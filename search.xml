<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello，欢迎来到耀耀切克闹的博客！</title>
    <url>/2022/09/22/hello%EF%BC%8C%E5%8D%9A%E5%AE%A2%EF%BC%81/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="一-为什么要搭建博客？"><a href="#一-为什么要搭建博客？" class="headerlink" title="一.为什么要搭建博客？"></a>一.为什么要搭建博客？</h1><ol>
<li>搭建博客就是为了写博客，整理思路，将学习的知识融会贯通，以教为学。</li>
<li>在这个过程中，你可以认识更多兴趣相投的人。</li>
<li>事件驱动学习，每周持续的博客更新，查看自己是否学习到新东西！</li>
<li>对自己也是一种督促，你拥有一个完全属于自己的博客，会驱动自己分享学习！</li>
</ol>
<h1 id="二-搭建博客方式"><a href="#二-搭建博客方式" class="headerlink" title="二.搭建博客方式"></a>二.搭建博客方式</h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c43a9e29f11943a0bfdda5c3ab74f953~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="1-自己开发"><a href="#1-自己开发" class="headerlink" title="1.自己开发"></a>1.自己开发</h2><p>这是最原始的博客建站方式了，自己写代码（前台 + 后台管理+数据库等等）、自己将项目发布上线、自己来维护网站，啥都自己来干。这就意味着全栈的工作，你需要理解和学习的地方有好多好多，在这过程中需要耗费大量时间，但对自己的提升是不可估量的，并且代码掌握在自己手里，很安想加什么功能都不会受到限制，很灵活。这里推荐 Github 上的开源项目，可以在此上进行二次开发：</p>
<p>Halo博客，一款现代化的开源博客/CMS系统，值得一试。详细部署可以去  <a href="https://docs.halo.run/">https://docs.halo.run</a></p>
<h2 id="2-站点生成器"><a href="#2-站点生成器" class="headerlink" title="2.站点生成器"></a>2.站点生成器</h2><p>博客是一种很典型的网站，所以有大佬将博客的功能（比如文章管理）抽象出来，做成了 站点生成器 ，可以用极少的命令 + 配置文件的方式，自动生成精美的博客网站。本人还是比较菜的，刚毕业，工作了2个月多，前端菜鸡程序员一枚，于是采用了这种方式，也是我极力推荐的一种方式，省时省力，灵活程度虽然比不上完全由自己开发，但适合大多数人的需求。并且，绝大多数的站点生成器都只能生成静态网站，也就是说网站的内容（比如博客文章、文档等）是固定的，不需要从数据库中获取内容，因此有很多优点：</p>
<ul>
<li><p>省钱：把文件扔 GitHub Pages、Gitee Pages 啥的就能免费部署</p>
</li>
<li><p>速度快：省去了数据的动态获取过程，配合 CDN 加载速度飞起</p>
</li>
<li><p>SEO：静态网站更容易被搜索引擎的蜘蛛抓取，稳定排名</p>
</li>
<li><p>易维护：没那么多花里胡哨的功能，比动态网站好维护不少</p>
<p>这里推荐：</p>
</li>
</ul>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9da46d8689f54c17b43c325b00bfa08a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>  <strong>当然，好像另外还有一种方式就是建站程序，主流就是 WordPress（推荐）或 Typech，跟着官方文档操作就行，不过俺了解甚少。感兴趣的朋友可以去看看，据说也很方便。</strong></p>
<h2 id="3-建站平台和购买"><a href="#3-建站平台和购买" class="headerlink" title="3.建站平台和购买"></a>3.建站平台和购买</h2><p> 简单说吧！就是花钱办事，用金钱换时间。</p>
<p><strong>建站平台：</strong>套个现成的模板、利用界面拖拖拽拽就能搞出来一个网站，平台还会给你提供域名，一键上线。此外，网站的维护也不用咱自己操心了，全交给别人，我们专注于网站的内容就行，百度搜索应该有一大堆。</p>
<p><strong>购买</strong>: 极致的体验，没有最好，只有更好，你就是大爷，可以尽情享受氪金带来的快乐！（手动狗头)</p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>为什么要搭建博客</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>element-plus表格合并（例如前两列合并）</title>
    <url>/2023/07/19/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/element-plus%E8%A1%A8%E6%A0%BC%E5%90%88%E5%B9%B6%EF%BC%88%E4%BE%8B%E5%A6%82%E5%89%8D%E4%B8%A4%E5%88%97%E5%90%88%E5%B9%B6%EF%BC%89/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">
</head><body># 前言

<blockquote>
<p>做了一个后台管理日清的列表，不上线，只发布到测试环境，只供开发人员自己看的，方便了解啥时候结束联调，测试，上线等，其中有一个表格合并的功能做一下记录</p>
</blockquote>
<h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"dataList"</span> <span class="attr">:span-method</span>=<span class="string">"objectSpanMethod"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"日期"</span> <span class="attr">prop</span>=<span class="string">"createTime"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"业务线"</span> <span class="attr">prop</span>=<span class="string">"projectType"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 其他列定义 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>  <span class="title function_">objectSpanMethod</span> =(<span class="params">{ row, column, rowIndex, columnIndex }</span>)=&gt; {</span><br><span class="line"><span class="keyword">const</span> dataList = [.....] <span class="comment">//具体的表格数据</span></span><br><span class="line"><span class="comment">//columnIndex列,前两列</span></span><br><span class="line">      <span class="keyword">if</span> (columnIndex === <span class="number">0</span> || columnIndex === <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">if</span> (rowIndex === <span class="number">0</span> || (rowIndex &gt; <span class="number">0</span> &amp;&amp; row[column.<span class="property">property</span>] !==dataList[rowIndex - <span class="number">1</span>][column.<span class="property">property</span>])) {</span><br><span class="line">          <span class="keyword">let</span> rowspan = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">let</span> colspan = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">while</span> (</span><br><span class="line">            rowIndex + i &lt; dataList.<span class="property">length</span> &amp;&amp;</span><br><span class="line">            row[column.<span class="property">property</span>] === dataList[rowIndex + i][column.<span class="property">property</span>]</span><br><span class="line">          ) {</span><br><span class="line">            rowspan++;</span><br><span class="line">            i++;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">return</span> { rowspan, colspan };</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (row[column.<span class="property">property</span>] === dataList[rowIndex - <span class="number">1</span>][column.<span class="property">property</span>]) {</span><br><span class="line">          <span class="keyword">return</span> { <span class="attr">rowspan</span>: <span class="number">0</span>, <span class="attr">colspan</span>: <span class="number">0</span> };</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="具体思路逻辑"><a href="#具体思路逻辑" class="headerlink" title="具体思路逻辑"></a>具体思路逻辑</h2><ol>
<li><p> 首先，我们检查当前列 <code>columnIndex</code> 是否为 0 或者 1，以确定我们只对前两列进行合并操作。</p>
</li>
<li><p> 对于第一行（<code>rowIndex === 0</code>），我们返回 <code>{ rowspan: 1, colspan: 1 }</code>，表示不进行合并。</p>
</li>
<li><p>对于其他行（<code>rowIndex &gt; 0</code>），我们根据合并逻辑进行判断。</p>
<ul>
<li>  首先，我们检查当前单元格的值 <code>row[column.property]</code>（例如，对于 “日期” 列，我们通过 <code>column.property</code> 访问 <code>createTime</code> 属性）是否与上一行的值相同，以及当前列是否为 “日期” 或者与上一行的 “业务线” 相同。如果满足这些条件，说明需要进行合并，我们返回 <code>{ rowspan: 0, colspan: 0 }</code>，表示该单元格不需要合并。</li>
<li>  如果不满足上述条件，我们开始计算正确的合并范围。我们初始化 <code>rowspan</code> 为 1，<code>colspan</code> 为 1，并使用变量 <code>i</code> 设置初始值为 1。</li>
<li>  接下来，我们使用一个循环，来寻找连续相同数据的范围。在循环中，我们依次检查当前行之后的每一行，判断它们的值是否与当前行相同，并且在 “日期” 列或者与当前行的 “业务线” 相同时。如果满足这些条件，我们将 <code>rowspan</code> 值增加 1，并递增 <code>i</code>。</li>
<li>  最后，我们返回计算出的 <code>{ rowspan, colspan }</code> 值，表示正确的合并范围。</li>
</ul>
</li>
</ol>
<p>通过这些逻辑，我们可以准确地合并相同数据的行，并保持表格的正确展示。</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1afcad0bcd8541a3856a5a023608a345~tplv-k3u1fbpfcp-watermark.image" alt="17772e34eae0873ab9b82504c5657df_mosaic.png"></p>
</body></html>]]></content>
      <categories>
        <category>项目搭建</category>
      </categories>
      <tags>
        <tag>项目搭建</tag>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端基础知识梳理-笔记</title>
    <url>/2023/07/11/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/WEB%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><h3 id="DOM事件流及事件委托机制"><a href="#DOM事件流及事件委托机制" class="headerlink" title="DOM事件流及事件委托机制"></a>DOM事件流及事件委托机制</h3><p><em>DOM事件流（DOM Event Flow）</em>： 是描述浏览器中事件传递的一种模型。当页面上发生事件时，浏览器会按照特定的顺序将事件传递给相关的元素。DOM事件流主要包括三个阶段：<em>捕获阶段（Capture Phase）、目标阶段（Target Phase）、冒泡阶段（Bubble Phase）</em>。</p>
<ol>
<li> 捕获阶段（Capture Phase）：事件从文档的根节点（即window对象）开始，逐级向下传递到事件的目标元素之前的节点。在捕获阶段，事件是从最外层的祖先元素依次捕获到目标元素，直到达到触发事件的元素。</li>
<li> 目标阶段（Target Phase）：事件到达触发事件的元素。</li>
<li> 冒泡阶段（Bubble Phase）：事件从触发事件的元素开始，逐级向上冒泡到文档的根节点。在冒泡阶段，事件会依次冒泡到祖先元素，直到达到文档的根节点。</li>
</ol>
<p><em>事件委托（Event Delegation）</em>：是一种利用事件冒泡机制的技术。通过将事件监听器绑定在祖先元素上，然后利用事件冒泡的原理，从而在事件冒泡到祖先元素时触发事件监听器。这样可以减少事件监听器的数量，提高性能和代码的可维护性。</p>
<p>事件委托的主要原理是通过事件冒泡，将事件处理器绑定到祖先元素上，而不是直接绑定到每个子元素上。当事件发生时，事件会冒泡到祖先元素，然后在祖先元素上触发事件处理器。通过判断事件的目标元素，可以实现根据目标元素的不同做出相应的操作。</p>
<p>事件委托机制的好处有：</p>
<ul>
<li>  减少事件处理器的数量，节省内存和提高性能。</li>
<li>  可以动态地添加或移除子元素，而不需要重新绑定事件处理器。</li>
<li>  可以处理动态生成的元素，即使在绑定事件处理器之前。</li>
</ul>
<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p><em>Ajax（Asynchronous JavaScript and XML）</em>： 是一种利用JavaScript、XML和HTTP请求的技术，用于在不重载整个页面的情况下与服务器进行异步通信。它可以实现在后台与服务器进行数据交换，并使用JavaScript更新页面的部分内容，从而提升用户体验和页面性能。</p>
<p><strong>Ajax的特点和优势包括：</strong></p>
<ol>
<li>异步通信：Ajax使用异步方式发送和接收数据，可以在后台与服务器进行数据交换，而不需要阻塞用户界面。这允许页面在等待服务器响应时仍然保持响应，并且可以同时进行其他操作。</li>
<li>增量更新：Ajax可以根据需要只更新页面的一部分内容，而不是整个页面。通过使用JavaScript动态地更新DOM，可以提高页面的加载速度和响应速度。</li>
<li>减少带宽消耗：由于只需要传输数据而不是整个页面，Ajax可以减少网络流量，降低带宽消耗。</li>
<li>更好的用户体验：Ajax可以使用户与网站进行交互更加流畅，减少页面加载时间和响应延迟，提升用户体验。</li>
<li>支持多种数据格式：虽然名字中包含XML，但Ajax并不限于只使用XML。它可以使用各种数据格式，如JSON、HTML、纯文本等。</li>
</ol>
<p><strong>在使用Ajax时，常见的步骤包括：</strong></p>
<ol>
<li>建立XMLHttpRequest对象</li>
<li>设置回调函数</li>
<li>配置请求信息，(如open,get方法)，使用open方法与服务器建立链接</li>
<li>向服务器发送数据</li>
<li>在回调函数中针对不同的响应状态进行处理;</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 1. 建立XMLHttpRequest对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">// 2. 设置回调函数</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = callback</span><br><span class="line">    <span class="comment">// 3. 配置请求信息，(如open,get方法)，使用open方法与服务器建立链接</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">'post'</span>, <span class="string">'/xxx'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 3. 设置请求头信息</span></span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">'Content-type'</span>, <span class="string">'application/json;charset=UTF-8'</span>)</span><br><span class="line">    <span class="comment">//4. 向服务器发送数据</span></span><br><span class="line">    <span class="keyword">var</span> params = { ... }</span><br><span class="line">    xhr.<span class="title function_">send</span>(params)</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"><span class="comment">// 5.  在回调函数中针对不同的响应状态进行处理;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>) { </span><br><span class="line"><span class="comment">// 判断异步对象的状态 </span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>) { </span><br><span class="line">    <span class="comment">// 判断交互是否成功 </span></span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">status</span> == <span class="number">200</span>) { </span><br><span class="line">        <span class="comment">// 获取服务器响应的数据 </span></span><br><span class="line">        <span class="keyword">var</span> res = xhr.<span class="property">responseText</span> </span><br><span class="line">        <span class="comment">// 解析数据 </span></span><br><span class="line">        res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res) </span><br><span class="line">        } </span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h2><h3 id="输入-URL-回车后经过哪些过程"><a href="#输入-URL-回车后经过哪些过程" class="headerlink" title="输入 URL 回车后经过哪些过程"></a>输入 URL 回车后经过哪些过程</h3><ol>
<li><p> 解析 URL，判断是否命中缓存（DNS prefetch）</p>
</li>
<li><p> 访问 DNS 服务器，将域名解析获取 IP 地址</p>
</li>
<li><p> 三次握手建立 TCP 连接</p>
</li>
<li><p> 发送 HTTP 请求</p>
</li>
<li><p> 服务器处理请求并返回 HTTP 报文</p>
</li>
<li><p> 浏览器解析渲染页面</p>
</li>
<li><p> 断开连接：TCP 四次挥手</p>
<h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>在前端开发中，常见的前端解决跨域问题的方法包括：</p>
</li>
<li><p><em>JSONP（JSON with Padding）</em>：JSONP利用&lt;script&gt;标签可以跨域加载外部资源的特性，通过动态创建&lt;script&gt;标签，将请求发送到其他域，并在返回的数据中包含一个回调函数调用，以实现跨域通信。但是JSONP只支持GET请求，且需要目标服务器支持返回预先定义好的回调函数。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">data</span>) {</span><br><span class="line">  <span class="comment">// 处理响应数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'script'</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">'http://example.com/api/data?callback=handleResponse'</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><p><em>CORS（Cross-Origin Resource Sharing）</em>：CORS是一种现代化的跨域解决方案，需要服务器设置响应头来允许跨域访问。前端代码无需特殊处理，只需发送跨域请求即可。在服务器响应中，设置Access-Control-Allow-Origin头为允许访问的域名或使用通配符*来表示允许所有域名访问。</p>
</li>
<li><p><em>使用代理服务器（本地工程化项目配置 Proxy 代理来跨域请求后端（Webpack、Vite），Nginx反向代理）</em>：前端代码将请求发送到同域的代理服务器，然后由代理服务器转发请求到目标服务器，在代理服务器与目标服务器之间跨域请求。前者更适合在开发环境中使用，而后者更适合在生产环境中使用。至于为什么（有性能，安全性等方面），NGINX具备一些强大的安全功能，如SSL终止、防止DDoS攻击等，安全性肯定是强些，又具有许多高级功能，如反向代理、负载均衡、缓存等。这些功能对于处理大量并发请求、提供高可用性和水平扩展方面非常有用，性能上也肯定好。</p>
</li>
<li><p><em>WebSocket</em>：WebSocket是一种支持在浏览器和服务器之间进行全双工通信的协议，它不受同源策略的限制，可以直接进行跨域访问。</p>
</li>
<li><p><em>postMessage</em>：postMessage是H5新引入的可跨源通信的API，可以通过这个api，让主页面和任意iframe页面或者windows.open打开的页面进行双向通信。</p>
</li>
</ol>
<p>需要注意的是，为了保护用户的安全性，浏览器实施了同源策略，限制了不同源（协议、域名、端口号任一不同）之间的交互行为。因此，跨域请求在默认情况下是受到限制的。上述方法都是在特定条件下解决跨域问题的方案，不同的场景可以选择不同的方法。</p>
<p><strong>postMessage的使用</strong></p>
<p>window.postMessage()是一个JavaScript方法，允许在不同的window或iframe之间进行跨域通信。它允许你向其他浏览上下文（页面、iframe、子窗口等）发送消息，并且不需要同源限制。</p>
<p>该方法接受两个参数（实际是3个参数，但一般只用到前2个）：</p>
<ol>
<li><p>message：要发送的数据，可以是字符串、数字、对象等。</p>
</li>
<li><p>targetOrigin：目标窗口的源，即目标窗口的域名。只有在目标窗口与当前窗口具有相同的源时，目标窗口才能接收到消息。也可以使用通配符 “*” 表示允许任何源接收消息，但这样可能会存在安全风险。</p>
</li>
</ol>
<p>使用示例：</p>
<p>在当前页面中发送消息：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> otherWindow = <span class="variable language_">window</span>.<span class="property">opener</span>;  <span class="comment">// 获取目标窗口的引用</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">'Hello, World!'</span>;    <span class="comment">// 要发送的消息</span></span><br><span class="line"></span><br><span class="line">otherWindow.<span class="title function_">postMessage</span>(message, <span class="string">'https://example.com'</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>在目标窗口中接收消息：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'message'</span>, <span class="keyword">function</span>(<span class="params">event</span>) {</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">origin</span> === <span class="string">'https://example.com'</span>) {  <span class="comment">// 检验消息来自合法的源</span></span><br><span class="line">    <span class="keyword">var</span> receivedMessage = event.<span class="property">data</span>;             <span class="comment">// 接收到的消息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(receivedMessage);</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p><code>window.opener</code>获取了打开当前窗口的窗口的引用。然后使用<code>postMessage()</code>方法将消息发送给目标窗口，并指定目标窗口的源。目标窗口中使用<code>window.addEventListener()</code>监听<code>message</code>事件，并通过<code>event.origin</code>检验消息的源。如果消息来自合法的源，就可以获取到消息内容<code>event.data</code>。</p>
<h3 id="移动端屏幕适配"><a href="#移动端屏幕适配" class="headerlink" title="移动端屏幕适配"></a>移动端屏幕适配</h3><p>在移动端屏幕适配中，我们需要确保网页或应用程序能够在不同尺寸和分辨率的移动设备上呈现良好的用户体验。以下是一些常见的移动端屏幕适配方法：</p>
<ol>
<li><p><em>响应式布局</em>：使用CSS媒体查询和弹性布局等技术，根据不同的屏幕尺寸和设备方向，调整页面布局和样式。这使得页面能自适应不同的屏幕大小，并保持可读性和操作性。</p>
</li>
<li><p><em>流体布局</em>：使用百分比或rem等相对单位来定义元素的尺寸和间距，而不是使用固定像素值。这允许页面元素相对于屏幕大小进行伸缩，以适应不同的设备。（通过插件postcss-pxtorem完成）</p>
</li>
<li><p><em>视口设置</em>：通过设置视口的meta标签来调整页面在移动设备上的显示方式。使用<code>&lt;meta name="viewport"&gt;</code>标签来设置视口宽度、缩放、禁止缩放等选项，以确保页面在不同设备上呈现正确。</p>
</li>
<li><p><em>移动端特定样式</em>：通过使用CSS媒体查询和移动端特定的样式规则，为移动设备提供更好的用户体验。例如，调整字体大小、按钮大小、触摸目标的可点击区域等。</p>
</li>
<li><p><em>使用Flexbox或Grid布局</em>：Flexbox和Grid布局是强大的CSS布局工具，可以帮助我们以更灵活的方式创建响应式布局。它们提供了一种简单而直观的方式来控制页面中元素的位置和尺寸。</p>
</li>
<li><p><em>测试和调试</em>：在开发过程中，务必经常在不同的移动设备上测试和调试应用程序。使用浏览器开发者工具、模拟器或真实设备进行调试，以确保页面在各种设备上呈现正确且良好的用户体验。</p>
</li>
</ol>
<p><code>注意在使用这些方案时需要注意一下兼容性的问题</code></p>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p><a href="https://juejin.cn/post/7161965374374674468">cookie、localStorage、sessionStorage随笔</a></p>
<h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p><em>浏览器缓存</em>是指浏览器在访问网页时将一些静态资源（如图片、CSS文件、JavaScript文件等）保存在本地的临时存储空间中，以便在下次访问同一网页时能够更快地加载这些资源，提高网页的加载速度和用户体验。</p>
<p>浏览器缓存分为两种类型：<code>强缓存和协商缓存</code>。</p>
<p><em>强缓存</em>是通过设置响应头中的Cache-Control和Expires字段来实现的。当浏览器发送请求时，会先检查本地缓存中是否存在该资源的副本，并根据Cache-Control和Expires字段的值判断是否可使用缓存。如果可使用缓存，则直接从本地缓存中加载资源，不会发送请求到服务器。</p>
<ul>
<li><strong>Expires</strong>（http 1.0 时期产物）：设置的是具体的过期时间。</li>
<li><strong>cache-control</strong>（http 1.1 时期产物）：设置的是经过多少时间（单位秒）之后过期，与 Expires 同时存在的话优先级更高。</li>
</ul>
<p><em>协商缓存</em>是通过设置响应头中的Last-Modified和ETag字段来实现的。当浏览器发送请求时，会先发送一个带有If-Modified-Since和If-None-Match字段的请求到服务器，服务器根据这些字段的值判断资源是否有更新。如果资源没有更新，则返回304 Not Modified状态码，浏览器直接从本地缓存中加载资源。如果资源有更新，则返回新的资源，并更新本地缓存。</p>
<ul>
<li><p>  <strong>Last-modified</strong>：顾名思义，最后一次更改时间。</p>
</li>
<li><p>  <strong>ETag</strong>：优先级更高，资源的唯一标识。优点是精度更高，因为 Last-modified 时间单位是秒，如果文件在 1 秒内被修改多次就很难侦测到。缺点是性能有一定消耗，因为获得资源的hash值需要额外计算。</p>
</li>
</ul>
<p>浏览器缓存可以有效减少网络请求，提高网页的加载速度。但有时候也会导致问题，例如当网站更新了静态资源但用户的浏览器缓存仍然存在旧版本的资源时，用户可能无法看到最新的内容。为了解决这个问题，可以通过修改资源的文件名或者使用版本号来强制浏览器重新加载资源。</p>
<h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p><a href="https://juejin.cn/post/7150118507030511624">前端路由的基础理解</a></p>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>javaScript中的垃圾回收机制是自动管理内存的一种方式。JavaScript引擎使用的垃圾回收算法主要是基于<code>标记-清除（Mark and Sweep）算法</code>。</p>
<p>标记-清除算法分为两个阶段：</p>
<ul>
<li>标记阶段：垃圾回收器会从根对象开始，遍历所有的对象，并标记出那些仍然被引用的对象。在JavaScript中，全局变量、当前调用栈上的局部变量以及正在运行的函数中的变量都被视为根对象。</li>
<li>清除阶段：垃圾回收器会对内存进行清理，释放那些没有被标记的对象所占用的内存空间。<br>不管什么程序语言，内存生命周期基本是一致的：</li>
</ul>
<p>JS 是在定义变量时就完成了内存分配，而“垃圾回收器”的工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。</p>
<p>除了标记-清除算法，JavaScript引擎还使用了其他优化算法来提高垃圾回收的效率，例如<code>分代回收（Generational Collection）</code>和<code>增量回收（Incremental Collection）</code>。</p>
<p><em>分代回收</em>将对象分为新生代和老生代两个年代。新生代中的对象生命周期较短，垃圾回收频率较高；而老生代中的对象生命周期较长，垃圾回收频率较低。通过不同的回收算法和策略来处理不同年代的对象，可以提高垃圾回收的效率。</p>
<p><em>增量回收</em>是一种在执行垃圾回收时，与程序交替执行的方式。这样可以将垃圾回收的任务分解成多个小部分，在每个小部分执行完后让程序继续执行，以减少垃圾回收对程序执行的影响，并提高响应性能。</p>
<p>总的来说，JavaScript的垃圾回收机制是一种自动管理内存的方式，通过使用标记-清除算法以及其他优化算法来检测和释放不再使用的内存空间，从而提高程序的性能和可靠性。</p>
<h3 id="V8引擎垃圾回收机制"><a href="#V8引擎垃圾回收机制" class="headerlink" title="V8引擎垃圾回收机制"></a>V8引擎垃圾回收机制</h3><p>V8是一款用于执行JavaScript代码的高性能JavaScript引擎，它内置了独特的垃圾回收机制，与普通的垃圾回收机制存在一些不同之处。以下是V8垃圾回收机制的主要特点：</p>
<ol>
<li> 分代回收：V8的垃圾回收器采用了分代回收策略。它将内存分为新生代（young generation）和老生代（old generation）两个代。新生代中存放的是新创建的对象，生命周期较短；而老生代中存放的是存活时间较长的对象。通过将内存分代，可以根据对象的生命周期采用不同的回收策略，提高垃圾回收的效率。</li>
<li> 增量式垃圾回收：V8的垃圾回收器采用了增量式垃圾回收，在执行JavaScript代码的过程中，将垃圾回收的任务分解为多个小部分，并与程序交替执行。这样可以将垃圾回收的负担分散到程序执行的过程中，减少了垃圾回收对应用程序的影响，提高了响应性能。</li>
<li> Scavenge算法：新生代内存的垃圾回收使用了Scavenge算法。该算法将新生代内存空间分为From空间和To空间，对象首先分配到From空间，随着垃圾回收的进行，存活的对象会被复制到To空间，同时进行压缩操作，然后清空From空间。这种方式有效地解决了新生代内存中频繁发生的垃圾回收问题。</li>
<li> 标记-清除算法：老生代内存的垃圾回收使用了标记-清除算法。垃圾回收器首先通过根对象遍历，标记所有可达的对象，然后清除那些未标记的对象，并回收它们占用的内存空间。V8的垃圾回收器还采用了增量标记和压缩操作，提高了清除过程的效率。</li>
</ol>
<p>总体而言，V8的垃圾回收机制在分代回收、增量式垃圾回收、Scavenge算法和标记-清除算法等方面与普通的垃圾回收机制有一些不同。这些特点使得V8能够在执行高性能JavaScript代码的同时，有效地管理内存并提高垃圾回收的效率。</p>
<h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><h3 id="HTTP-1-0-1-1-2-0-3-0-的特性"><a href="#HTTP-1-0-1-1-2-0-3-0-的特性" class="headerlink" title="HTTP 1.0/1.1/2.0/3.0 的特性"></a>HTTP 1.0/1.1/2.0/3.0 的特性</h3><p><em>HTTP 1.0</em></p>
<ol>
<li> 确定了协议是<strong>无状态</strong>的，即同一客户端每次请求都没有任何关系</li>
<li> 消息结构包含请求头和请求体</li>
</ol>
<p><em>HTTP 1.1</em></p>
<ol>
<li> 持久连接：引入了持久连接（Persistent Connection），可以在一次TCP连接中发送多个HTTP请求和响应，减少了连接建立和关闭的开销。</li>
<li> 流水线：引入了流水线（Pipelining），允许客户端同时发送多个请求，提高了并发性能。</li>
<li> 虚拟主机：通过Host请求头字段，可以在一台服务器上运行多个网站。</li>
<li> 缓存控制：引入了缓存控制机制，使得服务器和客户端可以更好地管理缓存和减少数据传输。</li>
<li> 分块传输编码：支持分块传输编码（Chunked Transfer Encoding），可以在不知道内容长度的情况下逐块发送数据。</li>
</ol>
<p><em>HTTP 2.0</em></p>
<ol>
<li> 二进制传输：HTTP 2.0使用二进制格式传输数据，替代了HTTP 1.x的文本格式，提高了传输效率和容错性。</li>
<li> 多路复用：引入了多路复用（Multiplexing），可以通过一个连接并发发送多个请求和响应，解决了HTTP 1.x的队头阻塞问题，提高了性能。</li>
<li> 请求优先级：可以设置请求的优先级，确保重要请求优先处理。</li>
<li> 头部压缩：使用HPACK算法对HTTP头部进行压缩，减少了数据传输的大小。</li>
<li> 服务器推送：服务器可以主动推送数据给客户端，减少客户端请求的延迟。</li>
</ol>
<p><em>HTTP 3.0</em></p>
<ol>
<li> 使用QUIC协议：HTTP 3.0使用QUIC（Quick UDP Internet Connections）作为传输协议，基于UDP提供更快的连接建立和数据传输。</li>
<li> 强化安全性：HTTP 3.0默认使用加密的传输，提供更好的安全性和隐私保护。</li>
<li> 抗网络阻塞：引入了拥塞控制机制，可以更好地应对网络阻塞和高延迟的情况。<h3 id="GET-和-POST-区别"><a href="#GET-和-POST-区别" class="headerlink" title="GET 和 POST 区别"></a>GET 和 POST 区别</h3></li>
</ol>
<ul>
<li>  Get 传输<strong>大小相对受限</strong>（不同浏览器之间不同），Post <strong>大小不受限制</strong></li>
<li>  Get 通过 <strong>URL</strong> 编码传输数据，Post 通过 <strong>body</strong> 传输，支持多种编码格式（两者都是<strong>明文传输</strong>，都不是安全的，但 Get 参数直接暴露在 URL 上，不能用来传递敏感信息）</li>
<li>  浏览器会<strong>缓存</strong> Get 请求，Post 则<strong>不会缓存</strong>。（在该特性下Get请求可能会出现 304 不更新，解决方法：链接加个随机参数）<h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3></li>
</ul>
<p><strong>XSS</strong>（跨站脚本攻击）：</p>
<p>利用了浏览器对于从服务器所获取的内容的信任，注入恶意脚本在受害者的浏览器中得以运行，分为反射型、储存型、DOM型。开启 <em>CSP</em>（内容安全策略）可以减少或消除这类攻击，副作用是 <code>eval</code>、<code>Function()</code> 等方法会失效。类似的还有 <em>CRLF</em> 攻击，防御此类攻击的核心就是严格控制用户提交的内容，对输入进行过滤，对输出进行转义。</p>
<p><strong>CSRF</strong>（跨站伪造请求）：<br>利用受害者的登录凭证（cookie）达到冒充该用户执行操作的目的，这在被攻击方很难完全防御，所以只能尽量减少 cookie 的使用，目前大部分网站也都是用 Token 来进行身份验证的，可以有效避免该类攻击。</p>
<p><strong>Injection</strong>（注入攻击）<br>这种攻击主要是接口设计不当导致的，例如接口根据用户传递的内容拼接 SQL，那么就可以通过传递 SQL 语句来注入攻击；又例如根据传递的内容来拼接 Shell 命令，那么攻击者如果传了类似 <em>&amp;&amp; rm -rf xxx</em> 这样的命令就会被执行，后果不言而喻。  </p>
<p><strong>DoS</strong>（服务拒绝）、<strong>DDoS</strong>（分布式服务拒绝）：</p>
<p>通过构造大量特定请求，导致服务器资源被消耗过度，挤压正常的请求，进而产生雪崩效应。在 DDoS 攻击中更是利用了僵尸网络，使得追溯源头的可能性几乎为零，这类攻击主要目的在于消耗服务器带宽，非常难防御，常见的有 SYN 洪泛攻击（利用 TCP 三次握手），只能通过一些手段缓解，例如缩短超时，让服务器更快地释放掉长时间响应的连接，从而增加攻击者的成本。  </p>
<p><strong>中间人攻击</strong>：</p>
<p>通过拦截窃取手段破坏通信，信息在用户和服务之间的传递都会暴露在攻击者的视野中。使用 HTTPS 协议传输一般可以避免，还有就是敏感信息不要使用明文传输，剩下的就只能交给用户的安全意识了，比如用户连接了不安全的公共 wifi，那么他就有可能被攻击。</p>
<h3 id="TCP-三次握手四次挥手的理解"><a href="#TCP-三次握手四次挥手的理解" class="headerlink" title="TCP 三次握手四次挥手的理解"></a>TCP 三次握手四次挥手的理解</h3><p><em>TCP（Transmission Control Protocol）</em> 是一种常用的传输层协议，用于在计算机网络中进行可靠的数据传输。为了建立和终止一个TCP连接，TCP使用了三次握手和四次挥手的过程。</p>
<p><em>三次握手（Three-way Handshake）</em> 是在客户端和服务器之间建立TCP连接的过程。具体步骤如下：</p>
<ol>
<li>第一次握手：客户端向服务器发送一个连接请求报文段（SYN）,服务端接收了报文，此时服务端可以确定客户端发送功能正常，自己接收也正常。</li>
<li>第二次握手： 服务器收到请求后，确认连接请求，并发送一个带有确认标志的报文段（SYN+ACK）作为响应,但此时服务端还不确定自己的发送是否正常</li>
<li>客户端收到服务器的响应后，再发送一个带有确认标志的报文段（ACK），表示连接已建立，双方都确认各自收发功能正常。</li>
</ol>
<p>这样，双方就完成了三次握手，建立了可靠的TCP连接，可以开始进行数据传输。</p>
<p><em>四次挥手（Four-way Handshake）</em> 是在客户端和服务器之间终止TCP连接的过程。具体步骤如下：</p>
<ol>
<li>客户端发送一个终止连接请求报文段（FIN）给服务器，表示客户端不再发送数据了。</li>
<li>服务器收到请求后，发送一个确认报文段（ACK），表示已收到客户端的终止请求。</li>
<li>服务器发送一个终止连接请求报文段（FIN）给客户端，表示服务器也不再发送数据了。</li>
<li>客户端收到请求后，发送一个确认报文段（ACK），表示已收到服务器的终止请求。</li>
</ol>
<p>这样，双方就完成了四次挥手，TCP连接成功终止。</p>
<p>三次握手和四次挥手的目的是为了保证双方都同意建立和终止连接，并确保数据的可靠传输。通过握手和挥手过程，双方可以进行信息交换，协商参数，并确保连接的稳定性和可靠性。</p>
<h3 id="域名发散和域名收敛"><a href="#域名发散和域名收敛" class="headerlink" title="域名发散和域名收敛"></a>域名发散和域名收敛</h3><p><em>域名发散（Domain Name Expansion）和域名收敛（Domain Name Convergence）</em> 是在网络中管理和分配域名的两种不同策略。</p>
<p><em>域名发散</em> 是指将一个域名分配给多个不同的IP地址或资源。这意味着同一个域名可能会映射到不同的服务器或资源上。这种策略在分布式系统或负载均衡环境中常见。例如，一个大型网站可能会将其域名映射到多个服务器上，以实现更好的性能和可靠性。</p>
<p><em>域名收敛</em>是指将多个域名指向同一个IP地址或资源。这意味着多个不同的域名将指向同一个服务器或资源。这种策略经常用于集中管理和简化网络架构。例如，一个公司可能会有多个域名，但它们都指向同一台服务器，这样可以方便地管理和维护这些域名和服务器。</p>
<p>选择采用域名发散或域名收敛策略取决于特定的网络需求和设计目标。域名发散可以提供更好的负载均衡和容错能力，但需要更复杂的配置和管理。域名收敛可以简化管理，但可能会对性能和可靠性产生风险。</p>
<h2 id="CSS相关"><a href="#CSS相关" class="headerlink" title="CSS相关"></a>CSS相关</h2><h3 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h3><p>CSS盒模型（CSS Box Model）是用于定义和布局HTML元素的一种模型。它将每个HTML元素看作一个矩形的盒子，包括内容区域、内边距、边框和外边距</p>
<ol>
<li> 内容区域（Content）：这是盒子中放置实际内容的部分，如文本、图像等。它的大小由<code>width</code>和<code>height</code>属性定义。</li>
<li> 内边距（Padding）：这是内容区域与边框之间的空白区域。它的大小由<code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code>和<code>padding-left</code>属性定义。</li>
<li> 边框（Border）：这是一个包围内容区域和内边距的线条或样式。它的大小和样式由<code>border-width</code>、<code>border-style</code>和<code>border-color</code>属性定义。</li>
<li> 外边距（Margin）：这是盒子与其他盒子之间的空白区域。它的大小由<code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code>和<code>margin-left</code>属性定义。</li>
</ol>
<p>标准盒模型：<code>box-sizing: content-box</code>，另外也可通过可以在HTML文档的<code>&lt;head&gt;</code>标签中添加文档类型声明（DOCTYPE）设置标准盒模型</p>
<ul>
<li>  在标准盒模型中，元素的总宽度和高度包括了内容区域、内边距、边框和外边距。</li>
<li>  元素的宽度（<code>width</code>）和高度（<code>height</code>）属性指定的是内容区域的尺寸。</li>
<li>  总宽度 = <code>width</code> + 左内边距 + 右内边距 + 左边框 + 右边框 + 左外边距 + 右外边距。</li>
<li>  总高度 = <code>height</code> + 上内边距 + 下内边距 + 上边框 + 下边框 + 上外边距 + 下外边距。</li>
</ul>
<p>IE盒模型（怪异盒子模型）：<code>box-sizing: border-box</code></p>
<p>元素宽度为内容宽度+边距+边框（content + padding + border = width）</p>
<h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>BFC的全称是块状格式化上下文</p>
<blockquote>
<p>一个块格式化上下文（block formatting context） 是Web页面的可视化CSS渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。</p>
<p> 一个块状格式化上下文可由以下方法创建：</p>
</blockquote>
<ol>
<li> 根元素（html元素）或其它包含它的元素</li>
<li> 浮动元素 (元素的 float 不是 none)</li>
<li> position 的值不为relative和static</li>
<li> 内联块 (元素具有 display: inline-block)</li>
<li> 表格单元格 (元素具有 display: table-cell，HTML表格单元格默认属性)</li>
<li> 表格标题 (元素具有 display: table-caption, HTML表格标题默认属性)</li>
<li> 具有overflow 且值不是 visible 的块元素</li>
<li> display: flow-root</li>
<li> column-span: all 应当总是会创建一个新的格式化上下文，即便具有 column-span: all 的元素并不被包裹在一个多列容器中。</li>
<li>弹性盒flex boxes（元素具有display: flex或inline-flex）</li>
</ol>
<p><strong>应用：</strong></p>
<ol>
<li> 阻止 <code>margin</code> 重叠</li>
<li> 阻止元素被浮动元素覆盖（以前常用于<strong>自适应两栏布局</strong>）</li>
<li> 清除内部浮动（父级元素<strong>高度塌陷</strong>问题）<h3 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h3></li>
</ol>
<p><em>回流</em>：是指浏览器根据DOM树和CSS样式计算元素的几何属性和布局信息的过程。当页面中的元素发生了改变（如添加、删除、修改元素的位置、大小等），浏览器会重新计算元素的布局信息，以确定每个元素在文档中的准确位置。回流是一种比较昂贵的操作，因为它会影响页面的整体布局，可能需要重新计算许多元素的位置，对性能有一定的影响。</p>
<p><strong>具体哪些情况会导致回流：</strong></p>
<ol>
<li>页面首次渲染</li>
<li>浏览器窗口变化</li>
<li>元素<strong>尺寸</strong>或<strong>位置</strong>变化（宽高、边距、边框等）</li>
<li>元素<strong>内容</strong>发生变化（文字数量、图片大小、字体大小变化）</li>
<li>添加删除<strong>可见</strong>的 DOM 节点</li>
<li>激活 css 伪类（hover、active等）</li>
<li>查询某些属性或调用某些方法（浏览器会必须回流来保证数据的准确性）</li>
</ol>
<p><em>重绘</em>：是指浏览器对页面进行重新绘制的过程，即根据元素的新的样式计算并绘制页面的外观。当元素的样式发生了改变（如颜色、背景、边框等），浏览器会重新计算元素的视觉效果，并将其重新绘制在屏幕上。相比于回流，重绘的开销较小，因为它只需要更新元素的样式，不需要重新计算布局。</p>
<p><em>回流必将引起重绘，重绘不一定引起回流。回流的性能开销更大</em></p>
<p><strong>如何减少回流重绘（性能优化）：</strong></p>
<p><strong>HTML层面</strong>：</p>
<ol>
<li> 避免使用 <code>table</code> 布局</li>
<li> 在 DOM 树最末端改变 class</li>
</ol>
<p><strong>CSS层面</strong>：</p>
<ol>
<li> 尽量减少使用 CSS 表达式（如：<code>calc</code>）</li>
<li> 避免多层内联样式</li>
<li> 将复杂动效应用在脱离文档流的元素上（<code>position: absolute / fixed</code>）</li>
</ol>
<p><strong>JS层面</strong>：</p>
<ol>
<li> 避免用 JS 操作样式（多个样式改变尽量<strong>合并为一次操作</strong>）</li>
<li> 如无法避免多次应用样式或操作 DOM，则可以先设置元素隐藏（先 <code>display:none</code> 再操作）</li>
<li> 重复使用元素属性时赋值给变量（避免重复查询元素导致回流）</li>
<li> 某些操作尽量采用防抖节流（如 resize、scroll）</li>
</ol>
<h3 id="实现水平垂直居中"><a href="#实现水平垂直居中" class="headerlink" title="实现水平垂直居中"></a>实现水平垂直居中</h3><p><strong>flex布局（最常用）</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> {</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p><strong>grid布局（兼容性不太好，适合内部系统，自己用）</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> {</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    place-items: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>translate偏移居中(绝对定位中最好用的方式，不限宽高)</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">.<span class="property">prant</span>{</span><br><span class="line">    <span class="attr">position</span>:relative;</span><br><span class="line">}</span><br><span class="line">.<span class="property">child</span>{</span><br><span class="line">    <span class="attr">position</span>:absolute;</span><br><span class="line">    <span class="attr">top</span>:<span class="number">50</span>%;</span><br><span class="line">    <span class="attr">left</span>:<span class="number">50</span>%;</span><br><span class="line">    <span class="attr">transform</span>:<span class="title function_">translate</span>(-<span class="number">50</span>%,-<span class="number">50</span>%)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="css多行文本隐藏"><a href="#css多行文本隐藏" class="headerlink" title="css多行文本隐藏"></a>css多行文本隐藏</h3><p>单行文本溢出隐藏</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></tbody></table></figure>
<p>单行文本溢出隐藏显示省略号</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></tbody></table></figure>
<p>多换文本溢出隐藏显示省略号</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span>: -o-ellipsis-lastline;</span><br><span class="line"><span class="attribute">overflow</span>: hidden</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;//想显示几行改成几</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="css换行"><a href="#css换行" class="headerlink" title="css换行"></a>css换行</h3><p><strong>1.自动换行：</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">word-wrap</span>:break-word;</span><br><span class="line"><span class="attribute">word-break</span>:normal; </span><br></pre></td></tr></tbody></table></figure>

<p><strong>2.强制换行：</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">word-break</span>:break-all;       按字符截断换行 <span class="comment">/* 支持IE和chrome，FF不支持*/</span></span><br><span class="line"><span class="attribute">word-wrap</span>:break-word;    按英文单词整体截断换行  <span class="comment">/* 以上三个浏览器均支持 */</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>注意：单词换行需要父盒子为块级元素  </li>
</ul>
<p><strong>3.强制不换行：</strong></p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="隐藏元素的办法"><a href="#隐藏元素的办法" class="headerlink" title="隐藏元素的办法"></a>隐藏元素的办法</h3><p><a href="https://juejin.cn/post/7210412098810740795">聊聊 CSS 隐藏元素的 10 种实用方法</a></p>
<h3 id="css常见问题"><a href="#css常见问题" class="headerlink" title="css常见问题"></a>css常见问题</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Howto">解决常见的 CSS 问题 - 学习 Web 开发 | MDN (mozilla.org)</a></p>
<h2 id="JS基础知识"><a href="#JS基础知识" class="headerlink" title="JS基础知识"></a>JS基础知识</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>基本数据类型：<code>undefined</code>、<code>null</code>、<code>string</code>、<code>number</code>、<code>boolean</code>、<code>bigint</code>、<code>symbol</code>,基本数据类型存放在栈内存中，大小是可预期的。</p>
<p>引用数据类型有：  <code>Object</code>、<code>Array</code>，引用数据类型存放在堆内存中，主要储存复杂数据。</p>
<p><strong>怎样理解 堆、栈、队列 ？</strong></p>
<p>【<em>堆</em>】：想象一个仓库，在申请到一片空间后就可以放任何东西，但是东西放多了找起来就比较麻烦，所以需要一份“清单”，通过查找清单上的索引去找你要的那堆东西，就不用每次都进仓库乱翻。</p>
<p>【<em>栈</em>】：想象一个箱子，先放进去的东西反而被压在了箱底，也就最慢才会被拿出来，所以说<em>先进后出，后进先出</em>。</p>
<p>【<em>队列</em>】：排队没什么好说吧，讲究一个先来后到，所以肯定<em>先进先出</em>。</p>
<p>这是我笔记主要来源的一篇文章作者的理解，感觉非常通俗易懂。</p>
<h3 id="JS-处理数组常用的方法"><a href="#JS-处理数组常用的方法" class="headerlink" title="JS 处理数组常用的方法"></a>JS 处理数组常用的方法</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">push</span>() <span class="comment">//末尾添加</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">unshift</span>()<span class="comment">//头部添加</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">pop</span>() <span class="comment">//末尾删除</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">shift</span>() <span class="comment">//末尾添加</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">reserve</span>()<span class="comment">//翻转数组</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">sort</span>() <span class="comment">//排序</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">slice</span>(start, end)<span class="comment">//切割，不改变原数组，返回新数组</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">splice</span>(start, length, newItem)<span class="comment">//更改数组（删除，添加数组）</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">indexOf</span>()<span class="comment">//查元素下标，查到返回元素下标，没有返回-1</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>数组循环</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>{})<span class="comment">//用来循环遍历数组的,无返回值 代替了for</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>{returen ...}) <span class="comment">//映射数组的，有返回值</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>{<span class="keyword">return</span> ...}) <span class="comment">//过滤数组,返回过滤后的数组</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">every</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>{<span class="keyword">return</span> ...}) <span class="comment">//主要是用来判断数组中是不是每一个都满足条件，返回一个布尔值</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">some</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>{<span class="keyword">return</span> ...}) <span class="comment">//主要是用来判断数组中有没有满足条件的,返回布尔值</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>{<span class="keyword">return</span> ...}) <span class="comment">//用来获取数组中满足条件的第一个数据，没有返回undefined</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,item,index</span>)=&gt;</span>{<span class="keyword">return</span> ...}) <span class="comment">//用来叠加的，prev :一开始就是初始值 当第一次有了结果以后；这个值就是第一次的结果</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="JS-处理对象常用的方法"><a href="#JS-处理对象常用的方法" class="headerlink" title="JS 处理对象常用的方法"></a>JS 处理对象常用的方法</h3><p>1.对象遍历</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = { <span class="attr">property1</span>: <span class="string">"value1"</span>, <span class="attr">property2</span>: <span class="string">"value2"</span>, <span class="attr">property3</span>: <span class="string">"value3"</span> };</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj ) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, obj[key]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>2.对象合并</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = {<span class="attr">property1</span>: <span class="string">"value1"</span>}</span><br><span class="line"><span class="keyword">const</span> source = {property2 <span class="string">"value2,property3 "</span>value3,}</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target,source)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br><span class="line"><span class="comment">// 输出: { property1: "value1", property2: "value2", property3: "value3" }</span></span><br></pre></td></tr></tbody></table></figure>
<p>3.对象中的属性检查</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = { <span class="attr">property</span>: <span class="string">"value"</span> }; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"property"</span> <span class="keyword">in</span> obj); <span class="comment">// 输出: true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"nonexistent"</span> <span class="keyword">in</span> obj); <span class="comment">// 输出: false</span></span><br></pre></td></tr></tbody></table></figure>
<p>4.对象拷贝</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//使用 Object.assign({},Obj)</span></span><br><span class="line"><span class="keyword">const</span> obj = { <span class="attr">property</span>: <span class="string">"value"</span> }; </span><br><span class="line"><span class="keyword">const</span> clone = <span class="title class_">Object</span>.<span class="title function_">assign</span>({}, obj); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone); <span class="comment">// 输出: { property: "value" } </span></span><br><span class="line"><span class="comment">// 或者 使用解构赋值和扩展运算符(...)</span></span><br><span class="line"><span class="keyword">const</span> clone2 = { ...obj }; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone2); <span class="comment">// 输出: { property: "value" }</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>上面的2种方式，如果对象的属性值为简单类型，通过这两种方式得到的新对象为深拷贝，如果属性值为【对象或者其他引用类型】，那对于这个对象实际上还是浅拷贝。</p>
</blockquote>
<p><strong>深拷贝方案</strong></p>
<p>1.使用 JSON 序列化和反序列化</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = { <span class="attr">property</span>: <span class="string">"value"</span>, <span class="attr">nestedObj</span>: { <span class="attr">nestedProperty</span>: <span class="string">"nestedValue"</span> } }; </span><br><span class="line"><span class="keyword">const</span> clone = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone); <span class="comment">// 输出: { property: "value", nestedObj: { nestedProperty: "nestedValue" } } </span></span><br><span class="line"><span class="comment">// 修改克隆对象的属性不会影响原始对象 </span></span><br><span class="line">clone.<span class="property">property</span> = <span class="string">"new value"</span>; </span><br><span class="line">clone.<span class="property">nestedObj</span>.<span class="property">nestedProperty</span> = <span class="string">"new nested value"</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// 输出: { property: "value", nestedObj: { nestedProperty: "nestedValue" } }</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>需要注意的是，使用 JSON 序列化和反序列化的方法无法处理函数、循环引用等特殊类型数据。</code></p>
<p>2.递归复制对象</p>
<p>这种方法通过递归地遍历原始对象，并针对对象的属性逐个进行深拷贝，以创建一个原对象的独立副本。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) {</span><br><span class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj!==<span class="string">'object'</span>) {</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> clone = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)?[]:{};</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) {</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj,key)) {</span><br><span class="line">            clone[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> obj = {<span class="attr">property</span>: <span class="string">"value"</span>, <span class="attr">nestedObj</span>: { <span class="attr">nestedProperty</span>: <span class="string">"nestedValue"</span> }}</span><br><span class="line"><span class="keyword">const</span> clone = <span class="title function_">deepClone</span>(obj)</span><br><span class="line"><span class="comment">// 修改克隆对象的属性不会影响原始对象 </span></span><br><span class="line">clone.<span class="property">property</span> = <span class="string">"new value"</span>; </span><br><span class="line">clone.<span class="property">nestedObj</span>.<span class="property">nestedProperty</span> = <span class="string">"new nested value"</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// 输出: { property: "value", nestedObj: { nestedProperty: "nestedValue" } }</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>要注意处理循环引用的情况，否则可能导致无限循环</code></p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包就是函数里面嵌套函数，并且内部函数可以访问外包函数的变量和作用域。</p>
<p><strong>闭包的主要作用：</strong></p>
<ol>
<li><p><em>保护数据和方法</em>：闭包可以创建私有变量和函数，避免全局污染，只有内部函数才能访问和修改这些数据和方法。这提供了一种封装和隐藏实现细节的方式，增加了代码的安全性和可维护性。</p>
</li>
<li><p><em>保持状态</em>：通过在闭包内部保存变量的状态，可以在函数调用之间保持数据的持久性。这在处理异步操作、循环事件绑定等场景中非常有用。</p>
</li>
<li><p><em>记忆和缓存</em>：使用闭包可以实现记忆功能和缓存计算结果。例如，可以使用闭包缓存函数的计算结果，避免重复计算，提高性能。（在vue中计算属性中，可以使用闭包来缓存一些计算结果，当依赖的数据没有发生变化时，可以直接使用缓存结果而不进行重复计算，提高性能。）</p>
</li>
<li><p><em>延迟执行</em>：闭包可以用来实现延迟执行功能，包括延迟函数调用、动画效果、事件监听等。闭包可以在特定条件满足时触发函数执行。（节流和防抖）</p>
</li>
<li><p><em>实现模块化和封装</em>：通过使用闭包，可以将相关的数据和方法封装在一个独立的作用域中，形成一个模块，提供模块化开发的能力。这样可以提高代码的可读性和可维护性。（axios的封装）</p>
</li>
<li><p><em>共享数据和状态管理</em>：闭包可以用于共享数据和状态管理。通过将数据存储在闭包作用域中，并提供访问和修改的方法，可以实现多个组件或函数之间的状态共享和管理。(vueX）</p>
</li>
</ol>
<p>总的来说，闭包是一种强大的编程概念，在JavaScript和其他编程语言中都有广泛的应用。它可以用来<em>处理数据封装、状态管理、模块化开发、函数式编程等</em>多个方面，提供了简洁、灵活和高度可控的编程方式。</p>
<p><code>当然不恰当的使用闭包将会导致内存泄漏，以下是常见的闭包导致内存泄漏的情况</code>：</p>
<p>1.<em>保留外部变量</em>：<br>    闭包会引用外部函数中的变量，导致这些变量无法被垃圾回收。当闭包存在时，外部函数的作用域仍然存在，即使外部函数已经执行完毕或不再需要。如果闭包中引用的变量占用大量内存，而且没有正确释放闭包，就会导致内存泄漏。</p>
<p>2.<em>不恰当的循环引用</em>：<br>    闭包内部的函数引用了其外部函数中的变量，而外部函数又引用了闭包内部函数，形成循环引用。如果这些循环引用无法被及时释放，就会导致内存泄漏。这种情况在使用事件监听器、定时器、异步操作等场景中比较常见。</p>
<p>3.<em>未正确清理资源</em>：<br>    闭包中可能引用了一些需要手动清理的资源，比如事件监听器定时等。如果不正确地释放这些资源，就会造成内存泄漏。</p>
<p><code>处理方式：</code></p>
<ul>
<li>  及时销毁闭包：在不再需要闭包时，确保将其置为null，这样可以打破对外部作用域的引用，使垃圾回收器能够回收内存。</li>
<li>  避免循环引用：确保闭包中引用的外部变量能够被及时释放，避免形成循环引用。</li>
<li>  显式清理资源：当闭包中引用了需要手动清理的资源时，确保适时释放这些资源，比如解绑事件监听器、取消定时器等。</li>
</ul>
<h3 id="JS-原型链"><a href="#JS-原型链" class="headerlink" title="JS 原型链"></a>JS 原型链</h3><p>JavaScript中的原型链是一种对象之间继承属性和方法的机制。每个JavaScript对象在创建时都有一个内部属性<code>[Prototype]</code>，它指向另一个对象，我们称之为原型对象（prototype）。</p>
<p>每个函数都有 <code>prototype</code> 属性，每个函数实例对象都有一个 <code>__proto__</code> 属性，<code>__proto__</code> 指向了 <code>prototype</code>，当访问实例对象的属性或方法，会先从自身构造函数中查找，如果找不到就通过 <code>__proto__</code> 去原型中查找，直到找到该属性或方法或到达原型链的顶端（即Object.prototype）。(全篇背诵，手动狗头）</p>
<p>以下是原型链的一些关键概念和操作：</p>
<ol>
<li><p>__proto__属性：每个JavaScript对象都有一个特殊的<code>__proto__</code>属性，它指向该对象的原型对象。通过<code>obj.__proto__</code>可以访问到对象的原型对象。</p>
</li>
<li><p>prototype属性：函数对象（包括构造函数和普通函数）会有一个<code>prototype</code>属性，它指向一个对象，成为该函数的原型对象。对于构造函数来说，它的<code>prototype</code>属性会被用作新创建的实例对象的原型。例如：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) {}</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john.<span class="property">age</span>); <span class="comment">// 25</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>instanceof操作符：用于检查一个对象是否是某个构造函数的实例。它会沿着原型链向上查找。例如：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) {}</span><br><span class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>创建对象的方式：通过构造函数、对象字面量或<code>Object.create()</code>方法来创建对象时，会根据原型链来确定新创建对象的原型。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) {}</span><br><span class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">// john的原型为Person.prototype</span></span><br><span class="line"><span class="keyword">var</span> jane = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// jane的原型为Person.prototype</span></span><br><span class="line"><span class="keyword">var</span> jim = {}; <span class="comment">// jim的原型为Object.prototype</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><p><code>call</code>、<code>apply</code>和<code>bind</code>都是JavaScript中用于控制函数执行上下文（即函数的<code>this</code>值）的方法。</p>
</li>
</ol>
<p><strong>1.call</strong></p>
<p><code>call</code>方法：<code>call</code>方法允许你显式地指定函数的执行上下文（即函数内部的<code>this</code>指向哪个对象），并且可以传入多个参数。具体用法是通过函数对象调用<code>call</code>方法，传入一个对象作为第一个参数，这个对象将成为函数执行时的<code>this</code>值，之后可以跟随多个参数。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) { </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"Hello, "</span> + <span class="variable language_">this</span>.<span class="property">name</span>); </span><br><span class="line">} </span><br><span class="line"><span class="keyword">var</span> person = { <span class="attr">name</span>: <span class="string">"John"</span> }; </span><br><span class="line">greet.<span class="title function_">call</span>(person); <span class="comment">// 输出：Hello, John</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上述例子中，通过调用<code>greet.call(person)</code>，将<code>greet</code>函数的执行上下文绑定为<code>person</code>对象，函数内部的<code>this</code>指向<code>person</code>，从而得到正确的输出结果。</p>
<p>以下是一个<code>手写call方法的简单版</code>：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">customCall</span> = <span class="keyword">function</span>(<span class="params">context,...args</span>) {</span><br><span class="line">    context = context || <span class="variable language_">window</span>;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">Symbol</span>();<span class="comment">//创建一个唯一的键值，避免命名冲突</span></span><br><span class="line">    context[key] = <span class="variable language_">this</span> <span class="comment">//将当前函数作为对象的方法</span></span><br><span class="line">    <span class="keyword">const</span> result = context[key](...args) <span class="comment">//执行函数</span></span><br><span class="line">    <span class="keyword">delete</span> context[key];</span><br><span class="line">    <span class="keyword">return</span> result;<span class="comment">//返回函数执行结果</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>2.apply</strong></p>
<p>apply()方法与call方法类似都是，用于指定函数执行的上下文，也可以传入多个参数。不同之处在于，apply方法接受一个数组作为参数列表。数组中的元素作为实参传递给函数</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">greeting</span>) { </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting + <span class="string">", "</span> + <span class="variable language_">this</span>.<span class="property">name</span>); </span><br><span class="line">} </span><br><span class="line"><span class="keyword">var</span> person = { <span class="attr">name</span>: <span class="string">"John"</span> }; </span><br><span class="line">greet.<span class="title function_">apply</span>(person, [<span class="string">"Hello"</span>]); <span class="comment">// 输出：Hello, John</span></span><br></pre></td></tr></tbody></table></figure>
<p>通过调用<code>greet.apply(person, ["Hello"])</code>，将<code>greet</code>函数的执行上下文绑定为<code>person</code>对象，并传入一个参数数组<code>["Hello"]</code>，函数内部的<code>this.name</code>将获得正确的值。</p>
<p>以下是一个<code>手写apply方法的简单版</code>：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">customApply</span> = <span class="keyword">function</span>(<span class="params">context,args=[]</span>){</span><br><span class="line">    context = context || <span class="variable language_">window</span>;</span><br><span class="line">    <span class="keyword">const</span> key =<span class="title class_">Symbol</span>();</span><br><span class="line">    context[key] = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> result = context[key](...args);</span><br><span class="line">    <span class="keyword">delete</span> context[key];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>3.bind</strong></p>
<p><code>bind</code>方法用于创建一个新的函数，并将指定的对象作为这个新函数的执行上下文，同时可以在调用新函数时传入一些参数。区别于前两者的是，<code>bind方法不会立即执行函数，而是返回一个绑定上下文后的新函数</code>。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) { </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"Hello, "</span> + <span class="variable language_">this</span>.<span class="property">name</span>); </span><br><span class="line">} </span><br><span class="line"><span class="keyword">var</span> person = { <span class="attr">name</span>: <span class="string">"John"</span> }; </span><br><span class="line"><span class="keyword">var</span> greetPerson = greet.<span class="title function_">bind</span>(person); </span><br><span class="line"><span class="title function_">greetPerson</span>(); <span class="comment">// 输出：Hello, John</span></span><br></pre></td></tr></tbody></table></figure>
<p>通过<code>greet.bind(person)</code>创建了一个新函数<code>greetPerson</code>，并将<code>person</code>对象作为执行上下文。当调用<code>greetPerson()</code>,发现页是改变这个新函数的执行上下文</p>
<p><code>以下是一个手写bind方法的简单版</code>：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">function</span>(<span class="params">context,...args</span>) {</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">boundFn</span>(<span class="params">...innerArgs</span>) {</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> boundFn) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">self</span>(...args,...innerArgs);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> self.<span class="title function_">apply</span>(context,[...args,...innerArgs])</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="JS进阶"><a href="#JS进阶" class="headerlink" title="JS进阶"></a>JS进阶</h2><h3 id="ES6-新语法-特性"><a href="#ES6-新语法-特性" class="headerlink" title="ES6 新语法/特性"></a>ES6 新语法/特性</h3><p><strong>模板字符串</strong></p>
<p> 使用反引号（``）括起来的字符串，可以包含变量和表达式，并支持多行字符串。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"耀耀"</span>; </span><br><span class="line"><span class="keyword">let</span> message = <span class="string">`Hello, <span class="subst">${name}</span>! Welcome to the world of JavaScript `</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><strong><code>let</code>、<code>const</code></strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> zy = <span class="string">'zy'</span>; <span class="comment">//块级作用域</span></span><br><span class="line"><span class="keyword">const</span> R =<span class="number">3.1415</span> <span class="comment">//声明常量，并且不可更改，块级作用域</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>箭头函数（没有自己的 <code>this</code>，不能使用 <code>new</code> 命令，不能调用 <code>call</code>）</strong></p>
<p>箭头函数提供了更简洁的函数定义语法，同时绑定了上下文的this值</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></tbody></table></figure>
<p> <strong><code>class</code> 类</strong></p>
<p> 类是一种创建对象的模板，支持构造函数、方法和继承等特性</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> { </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) { </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; </span><br><span class="line">    } </span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) { </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">${<span class="variable language_">this</span>.name}</span>!`</span>);</span><br><span class="line">    } </span><br><span class="line">} </span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"耀"</span>); </span><br><span class="line">person.<span class="title function_">sayHello</span>(); <span class="comment">// 输出: "Hello, 耀!"</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong><code>export</code>、<code>import</code> 模块化（ES Module）</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// math.js </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) { <span class="keyword">return</span> a + b; } </span><br><span class="line"><span class="comment">// app.js </span></span><br><span class="line"><span class="keyword">import</span> { add } <span class="keyword">from</span> <span class="string">"./math.js"</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出: 5</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>扩展运算符（很常用，<code>...</code> 用于组装数组/对象）</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = { <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> }; </span><br><span class="line"><span class="keyword">let</span> obj2 = { ...obj1, <span class="attr">z</span>: <span class="number">3</span> }; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// 输出: { x: 1, y: 2, z: 3 }</span></span><br></pre></td></tr></tbody></table></figure>
<p> <strong>解构赋值</strong></p>
<p> 可以将数组或对象的属性解构赋值给变量</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>]; </span><br><span class="line"><span class="keyword">let</span> {firstName, lastName} = {<span class="attr">firstName</span>: <span class="string">"Alice"</span>, <span class="attr">lastName</span>: <span class="string">"Smith"</span>};</span><br></pre></td></tr></tbody></table></figure>

<p> <strong><code>Set</code>（元素值是唯一的，常用于数组去重）</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> uniqueArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)] <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></tbody></table></figure>
<p> <strong><code>Map</code>（性能更好的对象）</strong></p>
<p><code>Map</code>在JavaScript中的作用是提供了一种存储和访问键值对的方式，可以用于数据处理、查询、遍历和优化等多种场景。根据具体的需求，你可以选择使用<code>Map</code>作为数据结构来更高效地处理和操作数据。</p>
<p><strong><code>Promise</code>、<code>async/await</code>（es7之后才支持）</strong></p>
<p>下面的异步编程有说明</p>
<h3 id="JS异步编程"><a href="#JS异步编程" class="headerlink" title="JS异步编程"></a>JS异步编程</h3><p><a href="https://juejin.cn/post/7164559783830224904">JavaScript 异步队列 - 掘金 (juejin.cn)</a></p>
<p><a href="https://juejin.cn/post/7231735955794444344">ECMAScript 6 异步编程 阅读笔记 - 掘金 (juejin.cn)</a></p>
<h3 id="JS实现继承的方式"><a href="#JS实现继承的方式" class="headerlink" title="JS实现继承的方式"></a>JS实现继承的方式</h3><ol>
<li> 原型继承</li>
<li> 构造函数继承</li>
<li> 组合继承（call / apply）</li>
<li> 寄生组合继承</li>
<li> class继承（es6）</li>
</ol>
<h2 id="vue相关"><a href="#vue相关" class="headerlink" title="vue相关"></a>vue相关</h2><h3 id="vue的数据双向绑定原理"><a href="#vue的数据双向绑定原理" class="headerlink" title="vue的数据双向绑定原理"></a>vue的数据双向绑定原理</h3><p>采用了”发布-订阅”的设计模式，通过Object.defineProperty()劫持各个属性的getter、setter，在数据变动时调用Dep.notify发布消息给订阅者Watcher，使之更新相应的视图</p>
<p>vue2使用Object.defineProperty的缺陷:</p>
<p>1.不能监听数组的变化，所以vue2需要对数组原型链上的方法进行一些修改才能实现监听</p>
<p>2.只能劫持对象的属性，所以需要深度遍历对象</p>
<p>Vue3中将Object.defineProperty替换为Proxy解决了对象深度监听的问题，因为 <code>Proxy</code> 代理了整个对象。</p>
<h3 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h3><p>Vue中的diff算法也叫做虚拟DOM的周界算法，主要用来比较两个虚拟DOM节点的差异。当一个组件的数据发生变化时，Vue通过重新渲染一个虚拟DOM树，然后将新旧虚拟DOM树进行对比。通过比较新旧虚拟DOM树的差异，Vue就能够明确哪些地方需要被更新，哪些地方无需重新渲染。</p>
<p>Vue的diff算法是通过深度优先、先序遍历的方式进行的，它将两个虚拟DOM树进行逐层比较，当找到某一层不一样的节点时，停止下降，然后比较这些节点的子节点。当所有的子节点都完成了比较之后，算法会由下至上进行回溯，此过程被称为执行patch操作。在执行patch操作时，Vue对于不同类型的节点的更新方式也不同，对于元素节点，可以更新它的属性和子节点；对于文本节点，只能更新它的文本内容；对于每个子节点，如果key值相同，可以进行复用或者重新排序，或者将其他的节点移动到这个位置。</p>
<p>通过这种逐层对比，Vue的diff算法能够快速高效地计算出哪些界面需要更新，从而避免了不必要的渲染和重绘，提高了渲染性能和用户体验。</p>
<h3 id="Virtual-Dom（虚拟DOM）"><a href="#Virtual-Dom（虚拟DOM）" class="headerlink" title="Virtual Dom（虚拟DOM）"></a>Virtual Dom（虚拟DOM）</h3><p>虚拟Dom是一种用来表示真实Dom结果的javaScript对象树。它是构建在浏览器原生Dom上的一个抽象层，虚拟dom可以在内存中进行操作，而不需要直接更新真实的Dom，最终通过diff 算法比较新旧差异，才会将最终的变化应用到真实的DOM上。</p>
<p>其实虚拟 DOM 并不能直接提升 DOM 操作性能，它出现的理由是 <em>JS 执行速度远比真实 DOM 操作要快</em>,因此结合diff算法，可以批量更新dom来提高性能，减少直接操作真实DOM的开销。</p>
<h3 id="vue权限管理该怎么做？"><a href="#vue权限管理该怎么做？" class="headerlink" title="vue权限管理该怎么做？"></a>vue权限管理该怎么做？</h3><p>方案有很多，我就只说我常用的一种。</p>
<p>菜单和路由都由后端返回，前端统一定义路由组件，需要将数据处理一下，将<code>component</code>换为真正的组件，将处理完的路由表通过pinia存好，然后通过router.addRoute(route)动态挂载，完成菜单权限管理。</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 menu 服务器返回的路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">menu</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getRoutesByMenu = (<span class="attr">menu</span>: <span class="title class_">Array</span>&lt;<span class="title class_">IMenuModel</span>&gt;): <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; =&gt; {</span><br><span class="line">	<span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = []</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> menu) {</span><br><span class="line">		routes.<span class="title function_">push</span>({</span><br><span class="line">			<span class="attr">path</span>: item.<span class="property">path</span>,</span><br><span class="line">			<span class="attr">component</span>: <span class="title function_">shallowRef</span>(<span class="title class_">Layout</span>),</span><br><span class="line">			<span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">			<span class="attr">meta</span>: item.<span class="property">meta</span>,</span><br><span class="line">			<span class="attr">children</span>: <span class="title function_">getChildren</span>(item.<span class="property">children</span>, item)</span><br><span class="line">		})</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// console.log('router', routes)</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> routes</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 menu children</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">children</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">item</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getChildren = (<span class="attr">children</span>: <span class="title class_">Array</span>&lt;<span class="title class_">IMenuModel</span>&gt; | <span class="literal">undefined</span>, <span class="attr">item</span>: <span class="title class_">IMenuModel</span> | <span class="title class_">RouteRecordRaw</span>): <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; =&gt; {</span><br><span class="line">	<span class="keyword">const</span> <span class="attr">childArray</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = []</span><br><span class="line">	<span class="keyword">if</span> (!children || children.<span class="property">length</span> === <span class="number">0</span>) {</span><br><span class="line">		childArray.<span class="title function_">push</span>({</span><br><span class="line">			<span class="attr">path</span>: item.<span class="property">path</span>,</span><br><span class="line">			<span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">			component的处理: modules[<span class="string">'/src/views'</span> + item.<span class="property">path</span> + <span class="string">'/index.vue'</span>],<span class="comment">//component的处理</span></span><br><span class="line">			<span class="attr">meta</span>: item.<span class="property">meta</span></span><br><span class="line">		})</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; (children <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">length</span>; i++) {</span><br><span class="line">			childArray.<span class="title function_">push</span>(...<span class="title function_">getChildren</span>((children <span class="keyword">as</span> <span class="built_in">any</span>)[i].<span class="property">children</span>, (children <span class="keyword">as</span> <span class="built_in">any</span>)[i]))</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> childArray</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>使用，其中404页面，一般放在最后add到路由表中，避免出现啥未知错误。</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//menu 将后端返回的菜单数据处理过了的</span></span><br><span class="line"><span class="keyword">await</span> permissionStore.<span class="title function_">setRoutes</span>(menu)</span><br><span class="line">    permissionStore.<span class="property">dynamicRoutes</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">route: RouteRecordRaw</span>) =&gt;</span> {</span><br><span class="line">            router.<span class="title function_">addRoute</span>(route)</span><br><span class="line">    })</span><br><span class="line"><span class="comment">// 添加 404</span></span><br><span class="line">router.<span class="title function_">addRoute</span>({</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/:pathMatch(.*)'</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">'/404'</span></span><br><span class="line"> })</span><br></pre></td></tr></tbody></table></figure>
<p><strong>按钮权限</strong></p>
<p>将之前登录时，用户信息中返回的按钮权限的标识存在pinia中，利用自定义指令，判断该按钮是否需要展示。</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  需求：不同角色后台管理的按钮权限不同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  思路：</span></span><br><span class="line"><span class="comment">  使用：给 Dom 加上 v-permissionBtn</span></span><br><span class="line"><span class="comment">  &lt;div v-permissionBtn="服务端返回的对应的权限值"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> { <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Storage</span> <span class="keyword">from</span> <span class="string">'@/utils/storage'</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ElType</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> {</span><br><span class="line">	<span class="attr">parentNode</span>: <span class="built_in">any</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">permissionBtn</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="title function_">beforeMount</span>(<span class="params">el: ElType, binding: DirectiveBinding</span>) {</span><br><span class="line">		<span class="keyword">const</span> <span class="attr">permissionList</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = <span class="title class_">Storage</span>.<span class="title function_">getItem</span>(<span class="string">'session'</span>, <span class="string">'btn_permission'</span>)</span><br><span class="line">		<span class="keyword">if</span> (!permissionList.<span class="title function_">includes</span>(binding.<span class="property">value</span>)) {</span><br><span class="line">			el.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'none'</span></span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> permissionBtn</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><p>当考虑前端性能优化时，需要从网络层面、JavaScript 层面和 CSS 层面进行分析和优化。</p>
<h3 id="网络层面优化"><a href="#网络层面优化" class="headerlink" title="网络层面优化"></a>网络层面优化</h3><ol>
<li> 减小文件大小：通过压缩文件、使用图像压缩算法、删除不必要的注释和空格等方式来减小文件大小。使用适当的文件格式（如 WebP 图片格式）来提高图像的压缩效率。</li>
<li> HTTP/2 和 HTTP/3：利用 HTTP/2 或 HTTP/3 协议提供的多路复用、头部压缩、服务器推送等性能优化特性，减少网络请求的开销。</li>
<li> 加载资源顺序：使用预加载和按需加载的技术，按照优先级加载关键资源，避免阻塞主要内容的加载。</li>
<li> 缓存：配置适当的缓存策略，通过设置适当的缓存头（如 Cache-Control、Expires），使浏览器可以缓存静态资源以减少重复请求。</li>
</ol>
<h3 id="JavaScript-层面优化"><a href="#JavaScript-层面优化" class="headerlink" title="JavaScript 层面优化"></a>JavaScript 层面优化</h3><ol>
<li> 代码压缩与混淆：使用压缩工具（如 UglifyJS、Terser）来删除不必要的字符、注释和空格，并进行变量名缩减，以减小文件大小。</li>
<li> 延迟加载和异步加载：使用延迟加载和异步加载技术来减少初始加载的 JavaScript 文件大小，只在需要时加载相关脚本。</li>
<li> 代码优化：避免不必要的计算、循环和操作，在关键路径上进行性能分析和优化。优化算法和数据结构的选择，避免性能瓶颈。</li>
<li> 避免频繁的 DOM 操作：减少直接操作 DOM 的次数，使用虚拟 DOM 或动态模板来优化页面渲染性能。</li>
</ol>
<h3 id="CSS-层面优化"><a href="#CSS-层面优化" class="headerlink" title="CSS 层面优化"></a>CSS 层面优化</h3><ol>
<li> 压缩和合并 CSS：使用压缩工具（如 cssnano）来删除不必要的字符、注释和空格，并将多个 CSS 文件合并为一个以减少网络请求次数。</li>
<li> 避免使用低效的选择器：避免使用通配符、属性选择器等效率较低的选择器，尽量使用 ID 选择器和类选择器。</li>
<li> 避免过多的 CSS 动画和过渡：过多的 CSS 动画和过渡可能会导致性能下降。限制动画的数量和复杂性，并使用硬件加速技术（如使用 <code>transform</code> 和 <code>opacity</code>）来提高性能。</li>
<li> 使用媒体查询和响应式布局：使用媒体查询来为不同屏幕尺寸和设备提供不同的样式，以实现响应式布局，减少不必要的布局更改。</li>
</ol>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><p><a href="https://yaoyaoqiekenao.com/">耀耀切克闹</a></p>
<h2 id="笔记来源"><a href="#笔记来源" class="headerlink" title="笔记来源"></a>笔记来源</h2><p><a href="https://juejin.cn/post/7216174863447146552#heading-31">「1.5w字总结」Web前端开发必知必会详尽知识手册</a></p>
<p><a href="https://juejin.cn/post/7210412098810740795">聊聊 CSS 隐藏元素的 10 种实用方法</a></p>
<p> <a href="https://juejin.cn/post/7117245974031892510#heading-1">BFC-块状格式化上下文的特性及具体应用</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>面试，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习笔记(四)-搭建项目</title>
    <url>/2023/06/19/React%20GO%20GO/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)-%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><blockquote>
<p>前面我已经把基础的东西学了，但还是缺点啥，自己得试着搭建一个react项目试试，实践出真知。</p>
</blockquote>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>我使用的是vite4.3+react18+zustand+antd创建的一个后台管理模板，主要也是为了巩固所学内容。</p>
<ul>
<li>vite创建react项目命令：<code>yarn create vite</code>,然后给项目起个名，选择react，选择TypeScript</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6569517e15448c1b6f5b5c9f0174ed3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ul>
<li>安装依赖：<code>yarn add</code></li>
<li>运行：<code>yarn dev</code>,项目就启动起来了<h2 id="Husky-eslint-prettier规范代码"><a href="#Husky-eslint-prettier规范代码" class="headerlink" title="Husky+eslint+ prettier规范代码"></a>Husky+eslint+ prettier规范代码</h2>具体可看我另一篇文章：<a href="https://juejin.cn/post/7233581502889443365">Husky+eslint+ prettier规范代码</a><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><h3 id="路径配置和vite兼容旧浏览器"><a href="#路径配置和vite兼容旧浏览器" class="headerlink" title="路径配置和vite兼容旧浏览器"></a>路径配置和vite兼容旧浏览器</h3>vite兼容旧浏览器:安装插件 <code>yarn add @vitejs/plugin-legacy -D</code><br>在vite.config.ts中<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineConfig } <span class="keyword">from</span> <span class="string">'vite'</span></span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">'@vitejs/plugin-react'</span></span><br><span class="line"><span class="keyword">import</span> viteEslint <span class="keyword">from</span> <span class="string">'vite-plugin-eslint'</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">import</span> legacy <span class="keyword">from</span> <span class="string">'@vitejs/plugin-legacy'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">react</span>(),</span><br><span class="line">    <span class="title function_">viteEslint</span>({</span><br><span class="line">      <span class="attr">failOnError</span>: <span class="literal">false</span></span><br><span class="line">    }),</span><br><span class="line">    <span class="comment">/** 兼容传统浏览器*/</span></span><br><span class="line">    <span class="title function_">legacy</span>({</span><br><span class="line">      <span class="attr">targets</span>: [<span class="string">'ie &gt;= 11'</span>],</span><br><span class="line">      <span class="attr">additionalLegacyPolyfills</span>: [<span class="string">'regenerator-runtime/runtime'</span>]</span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: {</span><br><span class="line">    <span class="attr">alias</span>: {</span><br><span class="line">      <span class="string">'@'</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">'src'</span>),</span><br><span class="line">      <span class="string">'@components'</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">'src/components'</span>),</span><br><span class="line">      <span class="string">'@utils'</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">'src/utils'</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<h3 id="添加-env配置文件"><a href="#添加-env配置文件" class="headerlink" title="添加.env配置文件"></a>添加.env配置文件</h3>根目录下添加.env.production<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable constant_">VITE_APP_ENV</span> = <span class="string">'production'</span></span><br><span class="line"><span class="variable constant_">VITE_BASE_URL</span> = <span class="string">'/'</span></span><br><span class="line"><span class="variable constant_">VITE_API_URL</span> = <span class="string">'/'</span></span><br></pre></td></tr></tbody></table></figure>
根目录下添加.env.development</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable constant_">VITE_APP_ENV</span> = <span class="string">'development'</span></span><br><span class="line"><span class="variable constant_">VITE_BASE_URL</span> = <span class="string">'/'</span></span><br><span class="line"><span class="variable constant_">VITE_API_URL</span> = <span class="string">'/'</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="安装需要的插件和依赖"><a href="#安装需要的插件和依赖" class="headerlink" title="安装需要的插件和依赖"></a>安装需要的插件和依赖</h2><h3 id="recat路由"><a href="#recat路由" class="headerlink" title="recat路由"></a>recat路由</h3><ul>
<li>安装react路由:<code>yarn add react-router-dom@latest</code><br>在src下新建router/lazyLoad.tsx</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">Suspense</span> } <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">lazyLoad</span> = (<span class="params">Component: React.LazyExoticComponent&lt;() =&gt; JSX.Element&gt;</span>) =&gt; {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> lazyLoad</span><br></pre></td></tr></tbody></table></figure>
<p>在router/index.tsx</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { lazy } <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> { createBrowserRouter, <span class="title class_">Navigate</span> } <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> { <span class="title class_">RouteObject</span> } <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lazyLoad <span class="keyword">from</span> <span class="string">'./lazyLoad'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">'@/layouts/index'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IsloginStatus</span> <span class="keyword">from</span> <span class="string">'@/components/auth/loginStatus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">'@/views/login'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'@/views/home'</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'@/views/aboutMy/about'</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Study</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'@/views/aboutMy/study'</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteObject</span>[] = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/login'</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">element</span>: (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">IsloginStatus</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Layout</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">IsloginStatus</span>&gt;</span></span></span><br><span class="line">    ),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">index</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">"/home"</span> <span class="attr">replace</span> /&gt;</span></span></span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/home'</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="title function_">lazyLoad</span>(<span class="title class_">Home</span>)</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/about'</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">index</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">"/about/study"</span> <span class="attr">replace</span> /&gt;</span></span></span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">path</span>: <span class="string">'study'</span>,</span><br><span class="line">            <span class="attr">element</span>: <span class="title function_">lazyLoad</span>(<span class="title class_">Study</span>)</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">path</span>: <span class="string">'aboutMy'</span>,</span><br><span class="line">            <span class="attr">element</span>: <span class="title function_">lazyLoad</span>(<span class="title class_">About</span>)</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createBrowserRouter</span>(routes, {</span><br><span class="line">  <span class="attr">basename</span>: <span class="string">'/'</span></span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="zustand"><a href="#zustand" class="headerlink" title="zustand"></a>zustand</h3><ul>
<li>安装zustand:<code>zustand一款简洁好用的状态管理库</code> <code>yarn add zustand</code></li>
</ul>
<ol>
<li> 在 src 目录下新建 stores 文件夹，添加 counter.ts 文件：</li>
</ol>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { create } <span class="keyword">from</span> <span class="string">'zustand'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CounterState</span> {</span><br><span class="line">  <span class="attr">counter</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">delcounter</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">increase</span>: <span class="function">(<span class="params">by: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">decrease</span>: <span class="function">(<span class="params">by: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useCounterStore = create&lt;<span class="title class_">CounterState</span>&gt;()(<span class="function">(<span class="params">set</span>) =&gt;</span> ({</span><br><span class="line">  <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">delcounter</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">increase</span>: <span class="function">(<span class="params">by</span>) =&gt;</span> <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> ({ <span class="attr">counter</span>: state.<span class="property">counter</span> + by })),</span><br><span class="line">  <span class="attr">decrease</span>: <span class="function">(<span class="params">by</span>) =&gt;</span> <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> ({ <span class="attr">delcounter</span>: state.<span class="property">delcounter</span> - by }))</span><br><span class="line">}))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCounterStore</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>src/home/index.tsx，在home组件中使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useCounterStore <span class="keyword">from</span> <span class="string">'@/store/counter'</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.module.scss'</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span>)</span><br><span class="line">  <span class="keyword">const</span> delcounter = <span class="title function_">useCounterStore</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">delcounter</span>)</span><br><span class="line">  <span class="keyword">const</span> increase = <span class="title function_">useCounterStore</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">increase</span>)</span><br><span class="line">  <span class="keyword">const</span> decrease = <span class="title function_">useCounterStore</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">decrease</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">{styles.home_content}</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>zustand状态管理小练习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{()</span> =&gt;</span> increase(1)}&gt;增加 counter:{counter}<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{()</span> =&gt;</span> decrease(1)}&gt;减少 counter:{delcounter}<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span></span><br></pre></td></tr></tbody></table></figure>
<p>效果如下：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddc61eaddbf3426194cf09f235cdba4e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h3 id="Antd"><a href="#Antd" class="headerlink" title="Antd"></a>Antd</h3><ul>
<li>安装Antd:<code>yarn add antd</code></li>
</ul>
<p> 具体使用就不详述了，还是看官网去吧：<a href="https://ant.design/index-cn">Ant Design - 一套企业级 UI 设计语言和 React 组件库</a></p>
<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul>
<li>安装Axios: <code>yarn add axios</code></li>
</ul>
<p>在 src 中添加 utils/https.ts 封装一下 axios</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { lazy } <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> { createBrowserRouter, <span class="title class_">Navigate</span> } <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> { <span class="title class_">RouteObject</span> } <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lazyLoad <span class="keyword">from</span> <span class="string">'./lazyLoad'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">'@/layouts/index'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IsloginStatus</span> <span class="keyword">from</span> <span class="string">'@/components/auth/loginStatus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">'@/views/login'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'@/views/home'</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'@/views/aboutMy/about'</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Study</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'@/views/aboutMy/study'</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteObject</span>[] = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/login'</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">element</span>: (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">IsloginStatus</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Layout</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">IsloginStatus</span>&gt;</span></span></span><br><span class="line">    ),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">index</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">"/home"</span> <span class="attr">replace</span> /&gt;</span></span></span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/home'</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="title function_">lazyLoad</span>(<span class="title class_">Home</span>)</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/about'</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">index</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">"/about/study"</span> <span class="attr">replace</span> /&gt;</span></span></span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">path</span>: <span class="string">'study'</span>,</span><br><span class="line">            <span class="attr">element</span>: <span class="title function_">lazyLoad</span>(<span class="title class_">Study</span>)</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">path</span>: <span class="string">'aboutMy'</span>,</span><br><span class="line">            <span class="attr">element</span>: <span class="title function_">lazyLoad</span>(<span class="title class_">About</span>)</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createBrowserRouter</span>(routes, {</span><br><span class="line">  <span class="attr">basename</span>: <span class="string">'/'</span></span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="SWR"><a href="#SWR" class="headerlink" title="SWR"></a>SWR</h3><p>SWR 是一个 React Hooks 库，它用于管理组件的数据获取和缓存。使用 SWR 可以方便地进行数据获取和处理，同时也有良好的缓存机制，可以减少对服务器的请求。</p>
<p>如果你正在使用 React，那么可以考虑采用 SWR。SWR 很容易安装和使用，并且可以与其他 React 库和组件配合使用。SWR 还支持多种数据源，包括 RESTful APIs、GraphQL、WebSocket 等。</p>
<p>要使用 SWR，你需要先安装它。可以使用 npm 或者 yarn 进行安装：</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line">yarn add swr</span><br></pre></td></tr></tbody></table></figure>
<p>安装完成后，就可以在 React 组件中使用 SWR。例如：<br>在api/hotNewApi</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">'swr'</span></span><br><span class="line"><span class="keyword">import</span> { httpClient } <span class="keyword">from</span> <span class="string">'@/utils/https'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useFetchHotNews</span> = (<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> { data, isValidating, error } = <span class="title function_">useSWR</span>(</span><br><span class="line">    <span class="string">`/new?type=<span class="subst">${<span class="keyword">type</span>}</span>`</span>,</span><br><span class="line">    <span class="function">(<span class="params">url</span>) =&gt;</span> httpClient.<span class="title function_">get</span>(url),</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">revalidateIfStale</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">revalidateOnFocus</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">revalidateOnReconnect</span>: <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">hotNews</span>: data?.<span class="property">data</span>.<span class="property">list</span>,</span><br><span class="line">    isValidating,</span><br><span class="line">    error</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useFetchHotNews } <span class="keyword">from</span> <span class="string">'@/api/hotNewsApi'</span></span><br><span class="line"><span class="keyword">const</span> { hotNews, isValidating, error } = <span class="title function_">useFetchHotNews</span>(<span class="string">'入参'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p><strong>swr中需要了解的属性<code>isValidating</code></strong></p>
<p><code>isValidating</code> 是 SWR 中一个非常有用的属性，它表示当前请求是否仍在进行中，即请求是否仍在等待服务器响应。</p>
<p>在使用 SWR 进行数据请求时，SWR 会首先在本地缓存中查找数据，如果缓存不存在或已经过期，则会发送一个新的请求，并标记 <code>isValidating</code> 为 <code>true</code>，表示请求正在进行中。当响应到达后，SWR 会将 <code>data</code> 更新为最新的响应数据，并将 <code>isValidating</code> 标记为 <code>false</code>，表示请求已经完成。</p>
<p>因此，我们可以利用 <code>isValidating</code> 属性来显示一个 loading 状态，告诉用户请求正在进行中，例如：</p>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">'swr'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> { data, error, isValidating } = <span class="title function_">useSWR</span>(<span class="string">'/api/user'</span>, fetch);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Failed to load user data<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (!data &amp;&amp; isValidating) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (!data) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>No data available.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{data.name}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>{data.email}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在这个例子中，我们根据数据、错误和 <code>isValidating</code> 来判断组件应该显示的内容。如果数据不存在且请求正在进行中，我们会显示 “Loading…”，否则就是显示错误信息或最终的数据。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整完之后的项目源码：<br><a href="https://github.com/DarknessZY/Recat-vite.git">Recat-vite (github.com)</a> 该项目的账号密码随便填，没做校验。</p>
<p>通过一系列的学习，现在能用react完成一些普通的功能，也跟着大佬的文章熟悉了react搭建项目的过程，个人感觉和vue搭建时差不多，果然熟悉了一个框架后，再去了解另一个框架，上手也会快些，类比着学习，也能明确感受到他们的区别，也算成功入门了react，提升了自己。就是目前公司都是vue的项目，可能没真实线上的项目练手了，后面再工作之余也只能去github上找一些好的开源项目练练手了。</p>
<h1 id="笔记来源"><a href="#笔记来源" class="headerlink" title="笔记来源"></a>笔记来源</h1><p><a href="https://juejin.cn/post/7237840998985072698#heading-2">react@18 + vite@4 + react-router@6 + zustand + antd@5 + axios + swr 保姆级搭建后台管理系统 - 掘金 (juejin.cn)</a></p>
</body></html>]]></content>
      <categories>
        <category>recat</category>
      </categories>
      <tags>
        <tag>recat</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习笔记(三)</title>
    <url>/2023/06/13/React%20GO%20GO/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h2 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h2><ul>
<li>  react-事件处理</li>
<li>  受控组件和非受控组件</li>
<li>  React Router</li>
</ul>
<h2 id="react-事件处理"><a href="#react-事件处理" class="headerlink" title="react-事件处理"></a>react-事件处理</h2><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a><strong>注册事件</strong></h3><p>React注册事件与DOM的事件语法非常像。语法<code>on+事件名=｛事件处理程序｝</code>&nbsp;比如<code>onClick={this.handleClick}</code>。React事件采用<strong>驼峰命名法</strong>，比如<code>onMouseEnter</code>,&nbsp;<code>onClick</code>。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Button clicked!'</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{handleClick}</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyComponent</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a><strong>事件对象</strong></h3><p>在React中，事件处理函数的第一个参数是事件对象（event object），它提供了一些关于事件的信息。例如，在一个点击事件处理函数中，事件对象将包含关于点击的位置、按下的键和其他信息。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">event</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">textContent</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{handleClick}</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="react中this的指向问题"><a href="#react中this的指向问题" class="headerlink" title="react中this的指向问题"></a><strong>react中this的指向问题</strong></h3><p>在React中，函数组件和类组件具有不同的this指向方式。</p>
<p>在函数组件中，this指向<code>undefined</code>，因为<code>函数组件是无状态的</code>，它们不会在实例化过程中创建this。因此，在函数组件中，你应该使用Hooks API（如useState）管理组件状态，或使用redux（或其他状态管理库）管理全局状态。而在类组件中，this指向类的实例对象。在React类组件中访问props和state时，你必须使用this关键字。否则，你将在当前作用域中引用未定义的变量。</p>
<h4 id="this丢失的问题（类组件开发时估计会遇到，我现在学时一直用的函数式组件开发，没遇上网上说的this丢失的问题，但也做个记录吧）"><a href="#this丢失的问题（类组件开发时估计会遇到，我现在学时一直用的函数式组件开发，没遇上网上说的this丢失的问题，但也做个记录吧）" class="headerlink" title="this丢失的问题（类组件开发时估计会遇到，我现在学时一直用的函数式组件开发，没遇上网上说的this丢失的问题，但也做个记录吧）"></a><code>this</code>丢失的问题（类组件开发时估计会遇到，我现在学时一直用的函数式组件开发，没遇上网上说的<code>this</code>丢失的问题，但也做个记录吧）</h4><p>但如果你是vue开发者，估计遇到<code>this</code>丢失的问题，例如：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>{</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>){</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'this'</span>, <span class="variable language_">this</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>){</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{this.handleClick}</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'test'</span>))</span><br></pre></td></tr></tbody></table></figure>

<p>在<code>react</code>中，像上面这样写，在执行的时候我们就会找不到<code>this</code>的引用。 我们首先要了解，我们在类中定义的<code>handleClick</code>和<code>render</code>方式是定义在类的原型上了。只有类的实例对象才可以调用，且函数内部的<code>this</code>指向实例本身。 在<code>ReactDOM.render()</code>执行的时候，会帮我们<code>new</code>一个实例对象，并调用<code>render</code>方法，所以在<code>render</code>方法内部的<code>this</code>指向实例自身。但是<code>&lt;button onClick={this.handleClick}&gt;点我&lt;/button&gt;</code>这里绑定的事件处理函数为<code>this.handleClick</code>方法的引用。但是当我们点击的时候，<code>handleClick</code>的执行上下文为<code>Window</code>，由于<code>jsx</code>经<code>babel</code>编译后会开启严格模式。所以<code>this</code>指向变为<code>undefined</code>。</p>
<h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p><strong>1.在构造函数中使用bind改变this的指向</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { <span class="title class_">Component</span> } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) {</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = {</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    };</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>({</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked {this.state.count} times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{this.handleClick}</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>上面实例中，我们通过将<code>this.handleClick</code>绑定到类实例上来保证该方法中的this指向正确。 在render方法中，使用<code>this.state</code>和<code>this.handleClick</code>访问计数器状态和点击处理程序</p>
<p><strong>2.使用箭头函数绑定事件</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>{</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'this'</span>, <span class="variable language_">this</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>){</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{(e)</span> =&gt;</span> this.handleClick(e)}&gt;点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'test'</span>))</span><br></pre></td></tr></tbody></table></figure>

<p><code>render</code>函数的<code>this</code>指向为实例自身，所以，我们可以直接在绑定的时候使用箭头函数，此时<code>handleClick</code>的执行上下文为箭头函数定义时的作用域。</p>
<p><strong>3.使用箭头函数定义实例方法</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法定义在实例对象，且执行上下文为实例自身</span></span><br><span class="line">    handleClick = <span class="function">()=&gt;</span>{</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'this'</span>, <span class="variable language_">this</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>){</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{this.handleClick}</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'test'</span>))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="受控组件和非受控组件"><a href="#受控组件和非受控组件" class="headerlink" title="受控组件和非受控组件"></a>受控组件和非受控组件</h2><p>在React中，表单元素（例如输入框、复选框、下拉框等）可以是“受控”组件或“非受控”组件。</p>
<h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a><strong>受控组件</strong></h3><p>受控组件是指受React控制的表单元素，其值通过React state来管理。在受控组件中每次用户输入时，都会更新组件状态并重新渲染组件（或更新虚拟DOM），从而反映表单元素的当前值。要使用受控组件，你需要将表单元素的值绑定到状态（state）并在改变时通过事件监听程序更新该状态。</p>
<h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a><strong>非受控组件</strong></h3><p>非受控组件是指值通过DOM节点本身管理的表单元素。在非受控组件中，组件自己掌控着输入框的值。非受控组件的值并不受React控制，所以React不会通过重新渲染来更新值。相反，您必须使用原生JavaScript来获取或设置组件的当前值。因此，在绝大多数情况下，我们都建议使用受控组件。</p>
<h3 id="受控组件与非受控组件对比"><a href="#受控组件与非受控组件对比" class="headerlink" title="受控组件与非受控组件对比"></a><strong>受控组件与非受控组件对比</strong></h3><p>我们来看一个使用受控组件，以及一个使用非受控组件的示例：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useState } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">   <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params">event</span>) {</span><br><span class="line">     <span class="title function_">setValue</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">handleSubmit</span>(<span class="params">event</span>) {</span><br><span class="line">     event.<span class="title function_">preventDefault</span>();</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'You typed: '</span>, value);</span><br><span class="line">     <span class="title function_">setValue</span>(<span class="string">''</span>);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">{handleSubmit}</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           Name:</span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">{value}</span> <span class="attr">onChange</span>=<span class="string">{handleChange}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   );</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>在这个示例中，我们定义了一个带有一个文本框和一个提交按钮的表单。文本框的值是一个受控组件，我们绑定它的值到状态变量<code>value</code>，每次文本变化时触发<code>handleChange</code>事件处理程序，<code>handleSubmit</code>处理表单的提交，把表单文本内容打印到控制台，并将状态<code>value</code>重置为空字符串。我们还可以通过使用非受控组件来改编相似的表单，但是将输入值传递给事件处理程序需要使用表单节点的引用来实现。如下所示：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useRef } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleSubmit</span>(<span class="params">event</span>) {</span><br><span class="line">      event.<span class="title function_">preventDefault</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'You typed: '</span>, inputRef.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">      inputRef.<span class="property">current</span>.<span class="property">value</span> = <span class="string">''</span>;</span><br><span class="line">      inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">{handleSubmit}</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Name:</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">{inputRef}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>在这个示例中，我们定义了一个带有一个文本框和一个提交按钮的表单。文本框是一个非受控组件，通过使用<code>ref</code>来获取其当前值。在<code>handleSubmit</code>事件处理程序中，我们将使用该方法记录输入值，并清空文本框，并将焦点设置回文本框中。</p>
<h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h2><h3 id="什么是React-router"><a href="#什么是React-router" class="headerlink" title="什么是React router"></a><strong>什么是React router</strong></h3><p>React Router是React的一个第三方库，它提供了一种利用组件 <code>&lt;Route /&gt; &lt;Link /&gt;</code>等来定义路由的方式。通过React Router，开发者可以方便地实现路由控制，将不同的组件映射到不同的URL路径上，以达到构建单页应用的目的。React Router还提供了一些高级功能，如动态路由匹配、嵌套路由和程序性导航等。</p>
<h3 id="安装使用React-Router"><a href="#安装使用React-Router" class="headerlink" title="安装使用React-Router"></a><strong>安装使用React-Router</strong></h3><p><code>npm install react-router-dom@6</code></p>
<p>如果在 web 上的话，你需要的是&nbsp;<code>react-router-dom</code>&nbsp;而不是&nbsp;<code>react-router</code>&nbsp;这个包。<a href="https://link.juejin.cn/?target=https://github.com/remix-run/react-router/issues/4648" title="https://github.com/remix-run/react-router/issues/4648">它们的区别</a>是，后者包含了&nbsp;<code>react-native</code>&nbsp;中需要的一些组件，如果你只需要做网页应用的话，用前者就可以了。</p>
<p>React Router 6 是 React Router 的下一个版本，与 React 18 兼容。它具有许多新功能和改进，包括全新的 Hooks API、对导航声明语法和后台路由的支持等。在 React 18 中使用 React Router 6，需要进行以下步骤：</p>
<ol>
<li><p>创建路由：在应用程序中定义路由。应用程序中可能有多种方式定义路由，例如通过 JavaScript 文件，或通过组件内部的以路径名为 key 的对象。</p>
<p> Javascript 文件：</p>
 <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// routes.js</span></span><br><span class="line"><span class="keyword">import</span> {<span class="title class_">Routes</span>, <span class="title class_">Route</span>} <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> {<span class="title class_">Home</span>, <span class="title class_">About</span>} <span class="keyword">from</span> <span class="string">'./pages'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AppRoutes</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">element</span>=<span class="string">{</span>&lt;<span class="attr">Home</span> /&gt;</span>} /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"about"</span> <span class="attr">element</span>=<span class="string">{</span>&lt;<span class="attr">About</span> /&gt;</span>} /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AppRoutes</span>;</span><br></pre></td></tr></tbody></table></figure>

<p> 组件内部：</p>
 <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> {<span class="title class_">Routes</span>, <span class="title class_">Route</span>} <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">element</span>=<span class="string">{</span>&lt;<span class="attr">Home</span> /&gt;</span>} /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"about"</span> <span class="attr">element</span>=<span class="string">{</span>&lt;<span class="attr">About</span> /&gt;</span>} /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>定义页面组件：在应用程序中定义页面组件，与路由结合使用。</p>
 <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// pages/Home.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pages/About.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">About</span>;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>定义导航：在应用程序中定义导航栏，以便在视图之间导航。</p>
 <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// components/Nav.js</span></span><br><span class="line"><span class="keyword">import</span> {<span class="title class_">Link</span>} <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Nav</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Nav</span>;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>上述代码中，我们首先在&nbsp;<code>routes.js</code>&nbsp;文件中配置了两个路由，并通过&nbsp;<code>element</code>&nbsp;属性指定了路由所对应的组件。然后我们在组件中使用&nbsp;<code>Routes</code>&nbsp;和&nbsp;<code>Route</code>&nbsp;组件来设置路由，路径为&nbsp;<code>/</code>&nbsp;的路由对应&nbsp;<code>Home</code>&nbsp;组件，路径为&nbsp;<code>/about</code>&nbsp;的路由对应&nbsp;<code>About</code>&nbsp;组件。</p>
<p>最后我们在&nbsp;<code>Nav</code>&nbsp;组件中使用&nbsp;<code>Link</code>&nbsp;组件来完成页面之间的跳转。</p>
<p>需要注意的是，在 React Router 6 中，<code>&lt;Switch&gt;</code>&nbsp;组件不再存在，取代它的是&nbsp;<code>&lt;Routes&gt;</code>&nbsp;组件，我们可以在&nbsp;<code>&lt;Routes&gt;</code>&nbsp;中定义多个路由，并在&nbsp;<code>&lt;Route&gt;</code>&nbsp;中设置&nbsp;<code>path</code>&nbsp;属性，React Router 6 会自动匹配路径，并渲染相应的组件。</p>
<h3 id="React-Router-1"><a href="#React-Router-1" class="headerlink" title="React Router"></a><strong>React Router</strong></h3><p>官网的介绍：</p>
<table>
<thead>
<tr>
<th>组件名</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;Routers&gt;</code></td>
<td>一组路由</td>
<td>代替原有<code>&lt;Switch&gt;</code>，所有子路由都用基础的Router children来表示</td>
</tr>
<tr>
<td><code>&lt;Router&gt;</code></td>
<td>基础路由</td>
<td>Router是可以嵌套的，解决原有V5中严格模式，后面与V5区别会详细介绍</td>
</tr>
<tr>
<td><code>&lt;Link&gt;</code></td>
<td>导航组件</td>
<td>在实际页面中跳转使用</td>
</tr>
<tr>
<td><code>&lt;Outlet/&gt;</code></td>
<td>自适应渲染组件</td>
<td>根据实际路由url自动选择组件</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>hooks名</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>useParams</code></td>
<td>返回当前参数</td>
<td>根据路径读取参数</td>
</tr>
<tr>
<td><code>useNavigate</code></td>
<td>返回当前路由</td>
<td>代替原有V5中的 useHistory</td>
</tr>
<tr>
<td><code>useOutlet</code></td>
<td>返回根据路由生成的element</td>
<td></td>
</tr>
<tr>
<td><code>useLocation</code></td>
<td>返回当前的location 对象</td>
<td></td>
</tr>
<tr>
<td><code>useRoutes</code></td>
<td>同Routers组件一样，只不过是在js中使用</td>
<td></td>
</tr>
<tr>
<td><code>useSearchParams</code></td>
<td>用来匹配URL中?后面的搜索参数</td>
<td></td>
</tr>
</tbody></table>
<h1 id="笔记来源"><a href="#笔记来源" class="headerlink" title="笔记来源"></a>笔记来源</h1><p><a href="https://juejin.cn/post/7127277986667036685#heading-7">react笔记（四）—— 事件处理 - 掘金 (juejin.cn)</a></p>
<p><a href="https://juejin.cn/post/7033313711947251743">React-Router V6 使用详解(干货) - 掘金 (juejin.cn)</a></p>
</body></html>]]></content>
      <categories>
        <category>recat</category>
      </categories>
      <tags>
        <tag>recat</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习笔记(二)</title>
    <url>/2023/06/06/React%20GO%20GO/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>书接上文，React继续学习并记录笔记。本文有好多是问chatGPT得到的，chatGPT回答结合着例子，感觉更加通俗易懂些。</p>
</blockquote>
<h2 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h2><ul>
<li>  react hooks</li>
<li>  组件间的传值</li>
<li>  组件内常用的使用方式（类比vue，v-if，v-for试试例子）</li>
</ul>
<h2 id="react-hooks"><a href="#react-hooks" class="headerlink" title="react hooks"></a>react hooks</h2><h3 id="什么是react-hooks"><a href="#什么是react-hooks" class="headerlink" title="什么是react hooks"></a><strong>什么是react hooks</strong></h3><p>我去问了问chatGPT，回答如下：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34da3027f4f9455091486b9b0cabeaad~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h3 id="react-hooks解决了什么问题"><a href="#react-hooks解决了什么问题" class="headerlink" title="react hooks解决了什么问题"></a><strong>react hooks解决了什么问题</strong></h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc3b40969b0e4ebe911168439d38238c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>大概就是这三点，网上的回答也大同小异：</p>
<ul>
<li>  让函数组件也能做类组件的事，有自己的状态，可以处理一些副作用，能获取 ref ，也能做数据缓存。</li>
<li>  解决逻辑复用难的问题</li>
<li>  放弃面向对象编程，拥抱函数式编程</li>
</ul>
<h3 id="什么是自定义hooks"><a href="#什么是自定义hooks" class="headerlink" title="什么是自定义hooks"></a><strong>什么是自定义hooks</strong></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ef1cb12e0e241babe962e58bdea3abd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h3 id="常用的React-hooks"><a href="#常用的React-hooks" class="headerlink" title="常用的React hooks"></a><strong>常用的React hooks</strong></h3><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><p>useState 可以使函数组件像类组件一样拥有 state，函数组件通过 useState 可以让组件重新渲染，更新视图。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [ ①state , ②dispatchAction ] = <span class="title function_">useState</span>(③initData)</span><br></pre></td></tr></tbody></table></figure>

<p>① state，目的提供给 UI ，作为渲染视图的数据源。</p>
<p>② dispatchAction 改变 state 的函数，可以理解为推动函数组件渲染的渲染函数。</p>
<p>③ initData 有两种情况，第一种情况是非函数，将作为 state 初始化的值。 第二种情况是函数，函数的返回值作为 useState 初始化的值。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useState } <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"></span><br><span class="line">interface myInterface{</span><br><span class="line">    <span class="attr">name</span>:string;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoState</span> = (<span class="params">props:myInterface</span>) =&gt; {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span><br><span class="line">    <span class="comment">/* number为此时state读取值 ，setNumber为派发更新的函数 */</span></span><br><span class="line">    <span class="keyword">let</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>) <span class="comment">/* 0为初始值 */</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        {/* 这里展示的又是最新的值，因为在整个事件处理结束之后再重新渲染组件，此时state已经更新好的 */}</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{ number }<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{</span> ()=&gt;</span> {</span></span><br><span class="line"><span class="language-xml">        setNumber(number+1)</span></span><br><span class="line"><span class="language-xml">      console.log(number) /* 由于 useState 是异步的，点击时state还没有更新好，所以 console.log 同步输出的是上一次更新后的值，并不是最新的值。  */</span></span><br><span class="line"><span class="language-xml">    } } &gt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoState</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h4><p>useRef 可以用来获取元素，缓存状态，接受一个状态 initState 作为初始值，返回一个 ref 对象, 这个对象上有一个 current 属性就是 ref 对象需要获取的内容。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ref = <span class="title class_">React</span>.<span class="title function_">useRef</span>(initState)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ref.<span class="property">current</span>)</span><br></pre></td></tr></tbody></table></figure>

<p><code>useRef常用用法</code>：</p>
<ul>
<li>  useRef 获取 DOM 元素，在 React Native 中虽然没有 DOM 元素，但是也能够获取组件的节点信息,如下：</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseRef</span> = (<span class="params"></span>)=&gt;{</span><br><span class="line">  <span class="keyword">const</span> dom= <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handerSubmit</span> = (<span class="params"></span>)=&gt;{</span><br><span class="line">    <span class="comment">/*  &lt;div &gt;表单组件&lt;/div&gt;  dom 节点 */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dom.<span class="property">current</span>)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    {/* ref 标记当前dom节点 */}</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">{dom}</span> &gt;</span>表单组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{()</span>=&gt;</span>handerSubmit()} &gt;提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>  可以利用 useRef 返回的 ref 对象来保存状态，只要当前组件不被销毁，那么状态就会一直存在。具体如下：</li>
</ul>
<ol>
<li> 定义一个ref变量</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li> 使用myRef保存状态</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [myState, setMyState] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">  myRef.<span class="property">current</span> = myState;</span><br><span class="line">}, [myState]);</span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们定义了一个名为myRef的ref变量，并在useEffect钩子函数中将myState保存到myRef中。这里要注意的是，因为myRef.current是一个可变的变量，所以当myState变化时，我们需要使用数组的解构赋值和useState钩子来更新myState的值。</p>
<ol start="3">
<li> 读取保存的状态</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myRef.<span class="property">current</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>在组件的任何部分，我们都可以使用myRef.current来读取已经保存的状态。</p>
<p>最后需要说明的是，useRef保存的状态在每次重新渲染时都会持续存在，这意味着它可以在不同的渲染之间长期存储数据，而不像useState只会在当前的渲染周期中有效。所以如果需要保存状态并且不想在render时失去这个状态，可以用useRef钩子。</p>
<h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><p>React的useEffect钩子用于在React组件渲染完成后执行一些副作用操作，比如访问API、更新DOM等。它的作用类似于类组件中的生命周期函数。<br>useEffect具有三种执行方式：</p>
<p><strong>初始化渲染</strong></p>
<p>初始渲染在初始渲染时，useEffect会在组件挂载之后立即执行回调函数。如果指定了依赖项，React会检查每个依赖项是否发生变化，如果有，则重新执行回调函数。<br>三种依赖项：</p>
<ul>
<li>   1.<code>不传值</code>  <code>现象</code>:&nbsp;useEffect 会在第一次渲染以及每次更新渲染后都执行。</li>
<li>   2.<code>空数组作为依赖</code>  <code>现象</code>:useEffect 会在第一次渲染后执行一次。</li>
<li>   3.<code>基本类型作为依赖</code> <code>现象:</code> &nbsp;useEffect 会在第一次渲染以及每次更新渲染后都执行。</li>
</ul>
<p>具体可看：<a href="https://juejin.cn/post/7083308347331444750#heading-9">React useEffect 两个参数你用对了吗 - 掘金 (juejin.cn)</a></p>
<p><strong>更新渲染</strong></p>
<p>在组件更新时，useEffect会在所有更新完毕后执行回调函数。如果指定了依赖项，React会检查每个依赖项是否发生变化，如果有，则重新执行回调函数。</p>
<p><strong>卸载组件</strong></p>
<p>在组件卸载时，useEffect会执行清除副作用操作的回调函数。这种情况下不需要指定依赖项。</p>
<p>useEffect钩子接收两个参数，第一个参数是一个函数，这个函数包含需要执行的副作用操作，例如在钩子中访问API或者更新DOM。第二个参数是一个数组，它用来指定useEffect什么情况下需要重新运行。如果不需要重新运行，可以将数组参数留空。</p>
<p><strong>例子</strong></p>
<p>下面是一些useEffect的用例：</p>
<ol>
<li> 访问API并更新状态</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useState, useEffect } <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">"https://api.example.com/data"</span>);</span><br><span class="line">      <span class="title function_">setData</span>(result.<span class="property">data</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">  }, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      {data.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">{item.id}</span>&gt;</span>{item.name}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))}</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们在useEffect钩子中发起了一个axios的get请求，并将获取到的数据设置到data状态中。需要注意的是，由于我们在useEffect钩子函数中调用了async函数，所以我们需要在函数前面加上async关键字。</p>
<ol start="2">
<li> 监听props的变化并更新状态</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useState, useEffect } <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) {</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="title function_">setCounter</span>(props.<span class="property">value</span>);</span><br><span class="line">  }, [props.<span class="property">value</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCounter</span>(counter + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>{counter}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{handleClick}</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们使用了useEffect钩子和useState钩子，以响应props的变化并更新状态。钩子中的函数会在props.value改变时触发，它将props.value的值设置到counter变量中。</p>
<p>总的来说，useEffect是React中非常重要的一个钩子，它可以让我们更加容易地进行组件的副作用操作，并且可以防止我们在组件渲染完成前执行操作。</p>
<h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><p>React的useMemo钩子用于缓存函数的计算结果，以减少不必要的计算和渲染。它的作用范围更广，可以缓存任何复杂的计算结果。</p>
<p>useMemo接收两个参数，第一个参数是一个函数，这个函数包含需要执行的计算操作，例如根据props和状态计算出一个值或者过滤一些数据。第二个参数是一个数组，它用来指定这个函数依赖的数据，只有当依赖数据发生变化时才会重新计算缓存结果。如果依赖数据没有变化，则直接返回上一次计算的缓存结果。</p>
<p>下面是一些useMemo的用例：</p>
<ol>
<li> 根据props和状态计算出一个值</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useMemo, useState } <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) {</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"Compute Result"</span>);</span><br><span class="line">    <span class="keyword">return</span> count * props.<span class="property">value</span>;</span><br><span class="line">  }, [count, props.<span class="property">value</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: {count}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Value: {props.value}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Result: {result}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{()</span> =&gt;</span> setCount(count + 1)}&gt;Increase Count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们使用了useMemo钩子来缓存计算结果，这个计算结果基于state变量count和props中的值计算而来。由于这个计算结果只依赖于count和props.value，所以只有count或props.value变化时，useMemo才会重新计算这个计算结果。同时，由于这个计算结果被缓存起来了，所以即使我们反复点击Increase Count按钮，计算结果也不会重新计算和渲染。</p>
<ol start="2">
<li> 从数组中过滤出存在某个字符的项</li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useState, useMemo } <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"mango"</span>, <span class="string">"peach"</span>]);</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = <span class="title function_">useState</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filteredList = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"Filter List"</span>);</span><br><span class="line">    <span class="keyword">return</span> list.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">includes</span>(search));</span><br><span class="line">  }, [list, search]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">event</span>) =&gt; {</span><br><span class="line">    <span class="title function_">setSearch</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">{search}</span> <span class="attr">onChange</span>=<span class="string">{handleChange}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        {filteredList.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">{item}</span>&gt;</span>{item}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))}</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们使用了useMemo钩子来缓存计算结果，这个计算结果被过滤离数组list中包含搜索关键词的项。由于这个计算结果只依赖于list和search变量，所以只有这两个变量发生变化时，useMemo才会重新计算。同样，由于这个过滤结果被缓存起来了，即使我们在搜索框中不断输入文字或者反复添加删除项，useMemo也只会在依赖变化时重新计算。</p>
<h4 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h4><p>React的useLayoutEffect钩子与useEffect类似，都是用于执行副作用操作，但是useLayoutEffect会在浏览器绘制之前执行，可以保证副作用操作对页面布局的影响被计算在内。</p>
<p>useLayoutEffect的使用方法和useEffect一样，都是接收一个函数和一个依赖数组。useLayoutEffect钩子的使用场景与useEffect相似，当需要在组件挂载或更新后立即执行一个副作用操作，以确保副作用操作对页面布局有影响时，可以使用useLayoutEffect。</p>
<p>下面是一个useLayoutEffect的用例：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useState, useLayoutEffect, useRef } <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> [width, setWidth] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="title function_">setWidth</span>(ref.<span class="property">current</span>.<span class="property">offsetWidth</span>);</span><br><span class="line">  }, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">{ref}</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>The width of the h1 element is {width}px.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们使用了useLayoutEffect钩子来获取h1元素的宽度，并将它保存到width状态变量中。由于useLayoutEffect钩子在DOM更新之前执行，在这个例子中，我们可以保证获取的宽度值是最新的，同时，由于我们使用useLayoutEffect钩子来获取宽度值，所以这个宽度值的更新不会导致额外的页面渲染。</p>
<h4 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h4><p>React的useContext钩子用于获取React上下文的值。上下文可以理解为一个全局对象，其中保存了在组件树中被共享的数据。使用useContext可以使得在组件树的任何一个组件中都能够访问到上下文的值。</p>
<p>useContext接收一个上下文对象作为参数，并返回这个上下文对象的当前值。上下文对象在创建时由React.createContext函数创建。</p>
<p>下面是一个useContext的用例：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createContext, useContext } <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title function_">createContext</span>(<span class="string">"light"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">"dark"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Parent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Current theme is {theme}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们创建了一个名为ThemeContext的上下文，它的默认值为”light”。在App组件中，我们使用ThemeContext.Provider提供了一个新的值”dark”，并将这个值传递给了Child组件。在Child组件中，我们使用了useContext钩子来获取当前的主题值，并将这个值显示在页面上。</p>
<p>需要注意的是，由于useContext只能在函数组件中使用，所以需要将上下文对象和Provider组件都放在函数组件外面或者使用React.memo包裹组件。另外，需要通过Context.Provider提供一个新值，以便在组件层次中下传下去。</p>
<h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><p>React的useReducer钩子用于管理和更新应用程序的状态，可与Redux架构相比。与useState（类似）不同之处在于，useState钩子通常用于管理状态值。useReducer则被视为管理复杂状态和操作的更好解决方案。</p>
<p>useReducer接收两个参数：一个是reducer函数，一个是初始状态值。reducer函数的作用是在更新状态之前处理一个操作（或动作），并且需要返回一个新的状态值。所得到的状态值将被作为useReducer钩子的返回值，同时，还将被传递到应用程序中的其他组件中。</p>
<p>下面是一个useReducer的用例：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useReducer } <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> initialState = {</span><br><span class="line">   &nbsp; &nbsp;<span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) {</span><br><span class="line">   &nbsp; &nbsp;<span class="keyword">switch</span> (action.<span class="property">type</span>) {</span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp;<span class="keyword">case</span> <span class="string">"increment"</span>:</span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="keyword">return</span> { <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> };</span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp;<span class="keyword">case</span> <span class="string">"reset"</span>:</span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="keyword">return</span> { <span class="attr">count</span>: initialState.<span class="property">count</span> };</span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp;<span class="attr">default</span>:</span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">"Invalid action type"</span>);</span><br><span class="line">   &nbsp; &nbsp;}</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">   &nbsp; &nbsp;<span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line">   &nbsp; &nbsp;<span class="keyword">return</span> (</span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp;<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: {state.count}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{()</span> =&gt;</span> dispatch({ type: "increment" })}&gt;Click to increment count: {state.count}<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{()</span> =&gt;</span> dispatch({ type: "reset" })}&gt;Reset count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   &nbsp; &nbsp; &nbsp; &nbsp;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &nbsp; &nbsp;);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们使用了useReducer钩子来创建一个与状态相关的reduce函数。该reduce函数管理一个名为“count”的状态计数器。在组件中，我们显示此计数器状态的当前值，并将两个按钮连接到dispatch方法。第一个按钮将用于increment操作，第二个用于reset计数器。</p>
<p>需要注意的是，在dispatch方法中，我们使用action对象来通知reducer函数要执行什么样的操作。这个对象是一个简单的JavaScript对象，包含一个字符串类型的属性，表示操作类型（在本例中，我们使用“increment”和“reset”作为操作类型字符串）。</p>
<p>总之，useReducer是一种更好的状态管理解决方案，可以轻松地管理复杂的组件状态。</p>
<h4 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h4><p>useImperativeHandle 可以配合 forwardRef 自定义暴露给父组件的实例值。使得父组件能够通过ref获取到子组件的实例，并且调用这些自定义的API。通常用于实现一些跨组件的通讯，或者是对某些组件逻辑的封装，可以将它看成是将一些子组件的方法暴露给父组件来调用。</p>
<p>useImperativeHandle接收两个参数：一个Ref（引用）对象和一个返回一个对象的函数。返回的对象表示要暴露给父组件的API接口。父组件可以通过ref来调用这些自定义的方法。</p>
<p>下面是一个useImperativeHandle的用例：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { forwardRef, useImperativeHandle, useState } <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">    },</span><br><span class="line">    <span class="title function_">reset</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="number">0</span>);</span><br><span class="line">    },</span><br><span class="line">  }));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Count: {count}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> childRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleIncrement</span>(<span class="params"></span>) {</span><br><span class="line">    childRef.<span class="property">current</span>.<span class="title function_">increment</span>();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleReset</span>(<span class="params"></span>) {</span><br><span class="line">    childRef.<span class="property">current</span>.<span class="title function_">reset</span>();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">{childRef}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{handleIncrement}</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{handleReset}</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们创建了一个名为Child的组件，它包含了一个名为“count”的状态计数器，并将它通过useImperativeHandle钩子暴露给了父组件。然后，我们使用forwardRef钩子将Child组件的ref引用传递给了App组件。在App组件中，我们使用ref来调用Child组件中的increment和reset方法。通过useImperativeHandle，我们可以在父组件中调用Child组件的自定义方法，实现了跨组件的通讯。</p>
<p>需要注意的是，如果你正在使用useImperativeHandle来暴露方法，则必须将子组件包装在forwardRef中，以便可以在父组件中使用ref引用。</p>
<h3 id="实现一个自定义的React的自定义Hooks"><a href="#实现一个自定义的React的自定义Hooks" class="headerlink" title="实现一个自定义的React的自定义Hooks"></a>实现一个自定义的React的自定义Hooks</h3><p>可以采用以下步骤来创建一个自定义Hooks:</p>
<ol>
<li> 创建一个以”use”开头的函数，这是React在命名约定中使用的方法，以通知其他程序员此函数是一个Hook；</li>
<li> 在函数中编写一些逻辑，可以使用现有的Hooks，如useState、useEffect;</li>
<li> 根据需要返回一些有用的值。</li>
</ol>
<p>以下是一个简单的示例，它使用useState和useEffect自定义了一个计时器hooks：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useState, useEffect } <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useTimer</span>(<span class="params">initialTime</span>) {</span><br><span class="line">  <span class="keyword">const</span> [time, setTime] = <span class="title function_">useState</span>(initialTime);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="title function_">setTime</span>(<span class="function"><span class="params">time</span> =&gt;</span> time + <span class="number">1</span>);</span><br><span class="line">    }, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    };</span><br><span class="line">  }, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> time;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useTimer;</span><br></pre></td></tr></tbody></table></figure>

<p>上面的代码中，我们定义了一个名为useTimer的自定义Hooks，并使用useState和useEffect在内部实现了一个计时器的逻辑，以输出时间。这个自定义Hooks可以用于任何需要计时器的组件中，并使得代码的重复度更低。</p>
<p>使用自定义Hooks非常简单，只需要导入并使用即可。例如：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useTimer <span class="keyword">from</span> <span class="string">"./useTimer"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> time = <span class="title function_">useTimer</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Current Time: {time} seconds<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>在上面这个例子中，我们导入了自定义Hooks useTimer，并在App组件中调用了它。最终，我们成功地使用自定义Hooks来达到了逻辑复用的效果。</p>
<p>总之，自定义Hooks是非常有用的，可以让我们在函数组件之间共享逻辑，并且使得我们的代码更加简洁易懂。当多个组件需要相同的逻辑时，它可以提高代码的重用性和可维护性。</p>
<h2 id="组件间的传值"><a href="#组件间的传值" class="headerlink" title="组件间的传值"></a>组件间的传值</h2><h3 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h3><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><p>在React中，父组件可以向子组件传递数据（props）以及函数作为回调来处理事件。在函数式组件中，可以通过参数的形式来接收父组件传递的props。</p>
<p>例如，父组件可以这样传递数据和函数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ParentComponent</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">const</span> data = { <span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">30</span> };</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Button clicked'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">data</span>=<span class="string">{data}</span> <span class="attr">onClick</span>=<span class="string">{handleClick}</span> /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p>而在子组件中，可以使用props来接收这些参数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">props</span>) {</span><br><span class="line">     <span class="keyword">const</span> { data, onClick } = props;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: {data.name}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: {data.age}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{onClick}</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">     );</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<p>在子组件中使用<code>props.xxx</code>即可获取父组件传递的数据或函数。这样，在子组件中就可以使用这些数据和函数来展示内容或处理事件了。</p>
<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><p>在React中，在函数式组件中子组件向父组件传递数据的方式是通过回调函数，父组件将一个函数作为props传递给子组件，然后子组件在需要向父组件传递数据时，调用该函数并传递参数即可。具体实现方法如下：</p>
<p>父组件：</p>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useState } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">'./Child'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> [message, setMessage] = <span class="title function_">useState</span>(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleMessage</span>(<span class="params">message</span>) {</span><br><span class="line">    <span class="title function_">setMessage</span>(message);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Parent Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">onMessage</span>=<span class="string">{handleMessage}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Message from child: {message}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Parent</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>子组件：</p>
<figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useState } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>) {</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleInput</span>(<span class="params">event</span>) {</span><br><span class="line">    <span class="title function_">setInputValue</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params"></span>) {</span><br><span class="line">    props.<span class="title function_">onMessage</span>(inputValue);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child Component<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">{inputValue}</span> <span class="attr">onChange</span>=<span class="string">{handleInput}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{sendMessage}</span>&gt;</span>Send message to parent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Child</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>在上述代码中，父组件通过<code>onMessage</code>属性向子组件传递一个函数<code>handleMessage</code>，子组件触发<code>sendMessage</code>函数来传递参数<code>inputValue</code>给父组件。子组件通过调用<code>props.onMessage(inputValue)</code>来触发父组件中的回调函数<code>handleMessage</code>，实现了子组件向父组件传递数据的功能。</p>
<h3 id="兄弟组件传值"><a href="#兄弟组件传值" class="headerlink" title="兄弟组件传值"></a>兄弟组件传值</h3><p>在 React 中，兄弟组件之间的传值通常需要借助父组件作为中间层，通过向父组件传递数据再由父组件传递给另一个兄弟组件实现。同时，我们可以使用&nbsp;<code>context API</code>、<code>Redux</code>&nbsp;等方案进行数据管理。</p>
<p>总体思路：将状态共享，提升到最近的公共父组件中，由父组件管理状态</p>
<ul>
<li>  提升公共状态</li>
<li>  提供操作共享状态的方法</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useState } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> [message, setMessage] = <span class="title function_">useState</span>(<span class="string">'Hello, World!'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleMessageChange</span>(<span class="params">message</span>) {</span><br><span class="line">    <span class="title function_">setMessage</span>(message);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child1</span> <span class="attr">onMessageChange</span>=<span class="string">{handleMessageChange}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child2</span> <span class="attr">message</span>=<span class="string">{message}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child1</span>(<span class="params">props</span>) {</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params">e</span>) {</span><br><span class="line">    props.<span class="title function_">onMessageChange</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onChange</span>=<span class="string">{handleChange}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child2</span>(<span class="params">props</span>) {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>{props.message}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>我们定义了一个名为&nbsp;<code>Parent</code>&nbsp;的组件作为中间层，分别传递给了&nbsp;<code>Child1</code>&nbsp;和&nbsp;<code>Child2</code>&nbsp;两个组件。<code>Child1</code>&nbsp;的输入框可以让用户输入任意文本，并将文本内容通过&nbsp;<code>props.onMessageChange</code>&nbsp;传递给父组件&nbsp;<code>Parent</code>&nbsp;中的&nbsp;<code>handleMessageChange</code>&nbsp;方法进行处理。父组件&nbsp;<code>Parent</code>&nbsp;的&nbsp;<code>handleMessageChange</code>&nbsp;方法通过设置&nbsp;<code>message</code>&nbsp;的状态来记录下输入框中的文本。最后，将&nbsp;<code>message</code>&nbsp;状态通过&nbsp;<code>props</code>&nbsp;传递给&nbsp;<code>Child2</code>&nbsp;组件进行渲染。</p>
<p>需要注意的是，在实际开发中，如果组件之间关系比较紧密，或者组件之间需要频繁地传递数据，则建议考虑使用&nbsp;<code>context API</code>、<code>Redux</code>&nbsp;等方案进行数据管理，这样可以使代码更加简洁和易于维护。</p>
<p>总之，在 React 中，兄弟组件之间的传值需要通过父组件作为中间层来实现。可以通过&nbsp;<code>props</code>、<code>context API</code>、<code>Redux</code>&nbsp;等方式实现数据的传递和管理。</p>
<h3 id="祖孙组件传值"><a href="#祖孙组件传值" class="headerlink" title="祖孙组件传值"></a>祖孙组件传值</h3><p>Context 跨组件传递数据 【类似vue的 provide / inject】</p>
<p>1、首先，在父组件中创建一个&nbsp;<strong>Contex对象：</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>();</span><br></pre></td></tr></tbody></table></figure>

<p>2、然后，在需要共享数据的组件的父组件中，通过&nbsp;<strong>Provider</strong>&nbsp;<strong>提供数据：</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyContext</span> <span class="keyword">from</span> <span class="string">'./MyContext'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ParentComponent</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> sharedData = <span class="string">'Hello, world!'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">{sharedData}</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>3、最后，在需要访问共享数据的组件中，可以使用&nbsp;<strong>useContext</strong>&nbsp;<strong>获取数据：</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useContext } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyContext</span> <span class="keyword">from</span> <span class="string">'./MyContext'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>{value}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="组件内常用的使用方式（类比vue，v-if，v-for试试例子）"><a href="#组件内常用的使用方式（类比vue，v-if，v-for试试例子）" class="headerlink" title="组件内常用的使用方式（类比vue，v-if，v-for试试例子）"></a>组件内常用的使用方式（类比vue，v-if，v-for试试例子）</h2><h3 id="类比v-if，react里的实现dom元素的切换显示隐藏"><a href="#类比v-if，react里的实现dom元素的切换显示隐藏" class="headerlink" title="类比v-if，react里的实现dom元素的切换显示隐藏"></a>类比v-if，react里的实现dom元素的切换显示隐藏</h3><p>在React中，你可以使用state来控制组件的显示和隐藏。下面是一个简单的代码示例来切换一个div元素的显示和隐藏：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useState } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> [show, setShow] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toggleDiv</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="title function_">setShow</span>(!show);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{toggleDiv}</span>&gt;</span>Toggle Div<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      {show &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>Some content to show<span class="tag">&lt;/<span class="name">div</span>&gt;</span>}</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>初始状态设置为不显示元素。当按钮被点击时，<code>toggleDiv</code>函数会被调用并更新<code>show</code>状态，如果<code>show</code>为<code>true</code>，则显示div元素，否则隐藏div元素。在JSX中使用<code>{}</code>，可以将变量嵌入到标签中。如果<code>show</code>为<code>false</code>，则<code>{show &amp;&amp; &lt;div&gt;Some content to show&lt;/div&gt;}</code>的内容会被忽略。</p>
<h3 id="类比v-if-else，react里的实现多个dom元素之间的显示隐藏"><a href="#类比v-if-else，react里的实现多个dom元素之间的显示隐藏" class="headerlink" title="类比v-if-else，react里的实现多个dom元素之间的显示隐藏"></a>类比v-if-else，react里的实现多个dom元素之间的显示隐藏</h3><p>React中，并没有&nbsp;<code>v-else</code>&nbsp;指令，但可以通过JavaScript中的条件运算符&nbsp;<code>ternary operator</code>&nbsp;（三元运算符）来实现类似的效果。</p>
<p>例如，假设有一个条件为&nbsp;<code>showComponent</code>&nbsp;的状态，当为&nbsp;<code>true</code>&nbsp;时渲染&nbsp;<code>Component1</code>，否则渲染&nbsp;<code>Component2</code>，可以这样编写：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{ showComponent ? <span class="language-xml"><span class="tag">&lt;<span class="name">Component1</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">Component2</span> /&gt;</span></span> }</span><br></pre></td></tr></tbody></table></figure>


<p>上述代码中，<code>{}</code>&nbsp;表示JSX中的JS表达式，其中使用三目运算符检查&nbsp;<code>showComponent</code>&nbsp;的状态，根据结果渲染相应的组件。</p>
<p>在React中也可以使用&nbsp;<code>if-else</code>&nbsp;语句来实现条件渲染，例如：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (showComponent) {</span><br><span class="line">  component = <span class="language-xml"><span class="tag">&lt;<span class="name">Component1</span> /&gt;</span></span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  component = <span class="language-xml"><span class="tag">&lt;<span class="name">Component2</span> /&gt;</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    {component}</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>

<p>以上代码中，根据&nbsp;<code>showComponent</code>&nbsp;的状态来分配&nbsp;<code>component</code>&nbsp;的值，然后在JSX中渲染该组件。</p>
<h3 id="类比v-for，实现列表遍历展示"><a href="#类比v-for，实现列表遍历展示" class="headerlink" title="类比v-for，实现列表遍历展示"></a>类比v-for，实现列表遍历展示</h3><p>在React中，你可以使用<code>map()</code>方法来遍历列表，并将列表项渲染到页面上。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> list = [<span class="string">'item1'</span>, <span class="string">'item2'</span>, <span class="string">'item3'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        {list.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">{index}</span>&gt;</span>{item}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))}</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>在这个示例中，<code>list</code>变量是一个包含三个字符串的数组。使用<code>map()</code>方法遍历数组，并为每个项创建一个<code>&lt;li&gt;</code>元素，并在元素中显示该项的值。<code>key</code>属性是必须的，并且必须是每个列表项的唯一标识符。在此示例中，使用<code>index</code>作为<code>key</code>属性，但更好的做法是使用每个项的唯一标识符。</p>
<h1 id="笔记来源"><a href="#笔记来源" class="headerlink" title="笔记来源"></a>笔记来源</h1><p><a href="https://juejin.cn/post/7083308347331444750#heading-9">React useEffect 两个参数你用对了吗 - 掘金 (juejin.cn)</a></p>
<p><a href="https://juejin.cn/post/7235279096312463421#heading-35">Vite+React+TS基础学习，看这里就够了！（上） - 掘金 (juejin.cn)</a></p>
<p><a href="https://juejin.cn/post/7123612981895626760#heading-5">十分钟搭建一个 Vite+React+TS+ESLint+Prettier+Husky+Commitlint 项目 - 掘金 (juejin.cn)</a></p>
</body></html>]]></content>
      <categories>
        <category>recat</category>
      </categories>
      <tags>
        <tag>recat</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习笔记(一)</title>
    <url>/2023/06/05/React%20GO%20GO/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>vue3的也历经了几个大项目，可以说的上是熟练运用了，本来我也在想，是继续深度研究vue，看看源码实现啥的，半年前买的霍春阳大佬写的《Vue.js的设计与实现》只看了1/2，也是惭愧，看了这么久都没看完，一直断断续续的看，哪怕是这样，我也感觉收获也颇深。先订个目标，react学完后，把这本书后面的学完看完。(可能对外面市场的焦虑，想多掌控一些技能，于是便先开始了对React的学习，之前虽然有了解，但我不怎么系统的学习),当然本文本来就是学习记录，如有雷同，肯定是我C+V过来记录的。</p>
</blockquote>
<h2 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h2><ul>
<li>  官网的快速入门 =&gt; 井字棋小游戏（因为有vue基础，我先去官网，试了试提供的例子，感觉挺有趣的）</li>
<li>  react组件</li>
<li>  react生命周期</li>
</ul>
<h2 id="react组件"><a href="#react组件" class="headerlink" title="react组件"></a>react组件</h2><h3 id="什么是react组件"><a href="#什么是react组件" class="headerlink" title="什么是react组件"></a><strong>什么是react组件</strong></h3><p>它接收任意的输入参数（props），并返回用于描述页面展示内容的React元素，也就是说我们在javascript函数中写一些react元素，处理一些逻辑，其实这就是一个组件。 组件可以将UI拆分成一个个独立的可复用的代码片段，并且可以对每个片段进行独立构思和管理，因此组件还能够很好的实现代码的复用。</p>
<h3 id="react组件的分类"><a href="#react组件的分类" class="headerlink" title="react组件的分类"></a><strong>react组件的分类</strong></h3><p>React 组件可以分为两种形式：<em>类（class）组件</em>和<em>函数（function）组件</em></p>
<h4 id="函数（function）组件"><a href="#函数（function）组件" class="headerlink" title="函数（function）组件"></a><strong>函数（function）组件</strong></h4><ul>
<li>  <em>函数式（function）组件</em>：函数式组件其实就是写一个JavaScript函数，接收一个props对象作为参数，并返回用于描述页面内容的React元素（JSX语法），这就构成了一个函数式组件。官网例子就是使用的这种方式。</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params"></span>) {  </span><br><span class="line"><span class="keyword">return</span> (  </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to my app<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyButton</span> /&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br><span class="line">    );  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><em>注意</em>：</p>
<pre><code>1.组件名称必须以大写字母开头
2.return出去的React元素需要有一个外层节点包裹着
</code></pre>
<h4 id="类（class）组件"><a href="#类（class）组件" class="headerlink" title="类（class）组件"></a><strong>类（class）组件</strong></h4><ul>
<li>  <em>类（class）组件</em>：使用ES6中的类（class）来定义React组件，通过声明一个类来实现定义一个React组件</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">'raeact'</span> ​</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> { &nbsp; &nbsp;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>){ &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span class="line">    <span class="variable language_">super</span>(props) &nbsp; </span><br><span class="line">  } &nbsp; &nbsp;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>){ &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span class="line">    <span class="keyword">return</span>( &nbsp; &nbsp; &nbsp; </span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> &nbsp; &nbsp; &nbsp; </span><br><span class="line">    ) &nbsp; </span><br><span class="line">  } </span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B</span><br></pre></td></tr></tbody></table></figure>

<p><em>注意</em>：</p>
<pre><code> 1.定义类组件必须要继承自React的Component类或React.PureComponent
 2.类中必须要定义一个名为render的函数，函数的返回值应该是React元素（JSX语法）
 3.在类的内部默认会有个props属性（继承自Component）可以直接使用
 4.与函数组件一样，组件名称必须以大写字母开头
 5.在类的构造函数（constructor）中通过this.props访问属性值是获取不到的，因为这时props还没有挂载到this.props上，要等constructor执行完成之后才会挂载
 6.如果非要在构造函数（constructor）中使用this.props来获取，则可以把外面传进来的props传递给constructor中的父类构造函数super从而实现this.props的挂载
 7.类组件是动态组件，基于数据驱动视图渲染
</code></pre>
<h3 id="react组件生命周期"><a href="#react组件生命周期" class="headerlink" title="react组件生命周期"></a>react组件生命周期</h3><h4 id="什么是react组件生命周期"><a href="#什么是react组件生命周期" class="headerlink" title="什么是react组件生命周期"></a><strong>什么是react组件生命周期</strong></h4><p>在 React 中，对于每一次由状态改变导致页面视图的改变，都会经历两个阶段：<code>render 阶段</code>、<code>commit 阶段</code>。只有 class 组件才有生命周期，因为 class 组件会创建对应的实例，而函数组件不会。组件实例从被创建到被销毁的过程称为<strong>组件的生命周期</strong>。红色的为react18删除,删除的我也就没深入了解。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da24c97e83f94eda99b0f0677fb3ef04~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h4 id="初始化阶段-render-阶段"><a href="#初始化阶段-render-阶段" class="headerlink" title="初始化阶段(render 阶段)"></a><strong>初始化阶段(render 阶段)</strong></h4><p><em>constructor</em></p>
<p><code>constructor</code>是JavaScript中的一个构造函数，在创建一个新对象时被调用。它通常用于初始化实例的属性或方法。继承了React.Component后，该方法只会执行一次，调用该方法会返回一个组件实例。<br>在初始化阶段执行，可直接对&nbsp;<code>this.state</code>&nbsp;赋值。其他生命周期函数中只能通过&nbsp;<code>this.setState</code>&nbsp;修改 state，不能直接为&nbsp;<code>this.state</code>&nbsp;赋值。</p>
<p><em>使用场景：</em> 一般在 constructor 中做一些组件的初始化工作，例如：初始化组件的 state。</p>
<p><em>getDerivedStateFromProps</em></p>
<p>简单翻译过来就是从Props中获得State，所以该函数的功能就是从<code>更新后的props中获取State，它让组件在 props 发生改变时更新它自身的内部 state</code>。</p>
<p><em>shouldComponentUpdate</em></p>
<p>在组件准备更新之前调用，但是首次渲染或者使用 forceUpdate 函数时不会被调用。跟它的名字一样，它用来判断一个组件是否应该更新。</p>
<p>默认情况下，当组件的 props 或者 state 变化时，都会导致组件更新。它在 render 方法之前执行，如果它的返回值为 false，则不会更新组件，也不会执行后面的 render 方法。</p>
<p>它接收两个参数，nextProps 和 nextState，即下一次更新的 props 和下一次更新的 state。我们可以将 <code>this.props</code> 和 nextProps 比较，以及将 <code>this.state</code> 与 nextState 比较，并返回 false，让组件跳过更新。</p>
<p><em>使用场景：</em> 这个生命周期方法通常用来做性能优化</p>
<p><em>render</em></p>
<p>render 方法是类组件中唯一必须实现的方法，它的返回值将作为页面渲染的视图。render 函数应该为纯函数，也就是对于相同的 state 和 props，它总是返回相同的渲染结果。</p>
<h4 id="commit-阶段-运行中阶段"><a href="#commit-阶段-运行中阶段" class="headerlink" title="commit 阶段(运行中阶段)"></a><strong>commit 阶段(运行中阶段)</strong></h4><p>commit 阶段在首次渲染时会执行 componentDidMount，在组件更新时会执行 getSnapshotBeforeUpdate 和 componentDidUpdate。</p>
<p><em>componentDidMount</em></p>
<p>该生命周期方法会在组件挂载之后执行，也只会执行一次，也就是将组件对应的 DOM 插入 DOM 树中之后调用。它会在浏览器更新视图之前调用，如果在 componentDidMount 中直接调用 <code>this.setState</code>，它会触发额外的渲染，会再一次调用 render 函数，但是浏览器中视图的更新只会执行一次。</p>
<p><em>使用场景:</em> 依赖于 DOM 的初始化操作应该放在这里，此外，我们一般在这个生命周期方法中<code>发送网络请求</code>、<code>添加订阅</code>等。</p>
<p>在函数式组件中，可以使用React的钩子函数&nbsp;<code>useEffect()</code>&nbsp;来完成&nbsp;<code>componentDidMount()</code>&nbsp;的功能。针对不同的需求，可以使用不同的函数来替代&nbsp;<code>componentDidMount()</code>。</p>
<p><em>使用hooks代替：</em></p>
<p>如果需要在组件挂载时执行一次某些操作，可以在&nbsp;<code>useEffect()</code>&nbsp;的回调函数中加入空数组作为第二个参数，该回调函数仅会在组件挂载时被调用一次，就类似于&nbsp;<code>componentDidMount()</code>：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useEffect } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>) {</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">// 挂载时的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Component is mounted'</span>);</span><br><span class="line">  }, []); <span class="comment">// 空数组作为第二个参数</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>**</p>
<p>如果需要在组件挂载和更新时都执行某些操作，可以省略掉第二个参数，这样&nbsp;<code>useEffect()</code>&nbsp;的回调函数会在每次组件更新时都被调用，就类似于&nbsp;<code>componentDidMount()</code>&nbsp;和&nbsp;<code>componentDidUpdate()</code>&nbsp;的结合：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useEffect } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>) {</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">// 挂载或更新时的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Component is mounted or updated'</span>);</span><br><span class="line">  });</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>**</p>
<p>有了&nbsp;<code>useEffect()</code>，我们就可以在函数式组件中获得和使用&nbsp;<code>componentDidMount()</code>&nbsp;相同的能力，以做到更好的组件控制和管理。</p>
<p><em>getSnapshotBeforeUpdate</em></p>
<p>此生命周期函数在最近一次渲染提交至 DOM 树之前执行，此时 DOM 树还未改变，我们可以在这里获取 DOM 改变前的信息，例如：更新前 DOM 的滚动位置。</p>
<p>它接收两个参数，分别是：prevProps、prevState，上一个状态的 props 和上一个状态的 state。它的返回值将会传递给 componentDidUpdate 生命周期钩子的第三个参数。</p>
<p><em>使用场景：</em> 需要<code>获取更新前 DOM 的信息</code>时。例如：需要以特殊方式处理滚动位置的聊天线程等。</p>
<p><em>componentDidUpdate</em></p>
<p>在组件更新后立即调用，首次渲染不会调用该方法。它的执行时机和 componentDidMount 一致，只是 componentDidMount 在首次渲染时调用，而 componentDidUpdate 在后续的组件更新时调用。可以在这个生命周期中直接调用 <code>this.setState</code>，但是必须包裹在一个条件语句中，否则会导致死循环。</p>
<p>componentDidUpdate 接收三个参数，分别是 prevProps、prevState、snapshot，即：前一个状态的 props，前一个状态的 state、getSnapshotBeforeUpdate 的返回值。</p>
<p>如果组件实现了 getSnapshotBeforeUpdate 生命周期函数，则 getSnapshotBeforeUpdate 的返回值将作为 componentDidUpdate 的第三个参数。</p>
<p><strong>使用场景：</strong></p>
<p>在这个生命周期方法中，可以<code>对 DOM 进行操作</code>或者进行<code>网络请求</code>。</p>
<p><strong>componentWillUnmount</strong></p>
<p>这个生命周期函数会在组件卸载以及销毁之前调用。</p>
<p><em>使用场景：</em> 通常用来执行组件的<code>清理操作</code>，例如：清除 timer、取消网络请求、清除订阅等。</p>
<h1 id="笔记来源"><a href="#笔记来源" class="headerlink" title="笔记来源"></a>笔记来源</h1><p><a href="https://juejin.cn/post/7096137407409422344">React 生命周期详解 - 掘金 (juejin.cn)</a></p>
<p><a href="https://juejin.cn/post/7111693389921255455">【react】 手把手学习react - state 及组件的生命周期 - 掘金 (juejin.cn)</a></p>
</body></html>]]></content>
      <categories>
        <category>recat</category>
      </categories>
      <tags>
        <tag>recat</tag>
      </tags>
  </entry>
  <entry>
    <title>git裸仓库并利用post-receive自动化部署hexo博客</title>
    <url>/2023/06/01/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/git%E8%A3%B8%E4%BB%93%E5%BA%93%E5%B9%B6%E5%88%A9%E7%94%A8post-receive%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">


</head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>因为最近想把自己的博客项目实现自动化部署，所以百度百科了这个相关的知识，然后总结，并记录笔记，总结并分享自己的操作！</p>
</blockquote>
<h2 id="1-git普通库"><a href="#1-git普通库" class="headerlink" title="1.git普通库"></a>1.git普通库</h2><p><strong>什么是普通库</strong></p>
<p>就是使用<code>git init</code>命令创建git仓库，可以先看看其目录结构</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos data]# git init simple</span><br><span class="line"><span class="title class_">Initialized</span> empty <span class="title class_">Git</span> repository <span class="keyword">in</span> /data/simple/.<span class="property">git</span>/</span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos data]# cd simple/</span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos simple]# touch <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos simple]# cd ..</span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos data]# tree -a simple/</span><br><span class="line">simple/</span><br><span class="line">|-- .<span class="property">git</span></span><br><span class="line">|   |-- branches</span><br><span class="line">|   |-- config</span><br><span class="line">|   |-- description</span><br><span class="line">|   |-- <span class="variable constant_">HEAD</span></span><br><span class="line">|   |-- hooks</span><br><span class="line">|   |   |-- applypatch-msg.<span class="property">sample</span></span><br><span class="line">|   |   |-- commit-msg.<span class="property">sample</span></span><br><span class="line">|   |   |-- post-update.<span class="property">sample</span></span><br><span class="line">|   |   |-- pre-applypatch.<span class="property">sample</span></span><br><span class="line">|   |   |-- pre-commit.<span class="property">sample</span></span><br><span class="line">|   |   |-- prepare-commit-msg.<span class="property">sample</span></span><br><span class="line">|   |   |-- pre-push.<span class="property">sample</span></span><br><span class="line">|   |   |-- pre-rebase.<span class="property">sample</span></span><br><span class="line">|   |   <span class="string">`-- update.sample</span></span><br><span class="line"><span class="string">|   |-- info</span></span><br><span class="line"><span class="string">|   |   `</span>-- exclude</span><br><span class="line">|   |-- objects</span><br><span class="line">|   |   |-- info</span><br><span class="line">|   |   <span class="string">`-- pack</span></span><br><span class="line"><span class="string">|   `</span>-- refs</span><br><span class="line">|       |-- heads</span><br><span class="line">|       <span class="string">`-- tags</span></span><br><span class="line"><span class="string">`</span>-- <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span> directories, <span class="number">14</span> files</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>通过上述命令操作后可以看到，<code>git init simple</code> 操作之后，创建了一个名为 simple 的库，simple 目录下还有一个<code> .git</code> 子目录，其中包含了git系统常用的文件，在<code> .git 目录</code>外是我们的工作区，可以存放我们库中待更新的文件，修改之后可以通过 <code>git add</code>，<code>git commi</code>t 等命令更新 .git 中的内容，简单来说普通库就是在工作目录 simple 中还包括一个 <code>.git 目录</code></p>
<h2 id="git裸仓库"><a href="#git裸仓库" class="headerlink" title="git裸仓库"></a>git裸仓库</h2><p><strong>什么是裸仓库</strong></p>
<p>就是使用git init –bare 命令创建git仓库，可以先看看其目录结构</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos data]# git init --bare bare.<span class="property">git</span></span><br><span class="line"><span class="title class_">Initialized</span> empty <span class="title class_">Git</span> repository <span class="keyword">in</span> /data/bare.<span class="property">git</span>/</span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos data]# tree bare.<span class="property">git</span>/ -a</span><br><span class="line">bare.<span class="property">git</span>/</span><br><span class="line">|-- branches</span><br><span class="line">|-- config</span><br><span class="line">|-- description</span><br><span class="line">|-- <span class="variable constant_">HEAD</span></span><br><span class="line">|-- hooks</span><br><span class="line">|   |-- applypatch-msg.<span class="property">sample</span></span><br><span class="line">|   |-- commit-msg.<span class="property">sample</span></span><br><span class="line">|   |-- post-update.<span class="property">sample</span></span><br><span class="line">|   |-- pre-applypatch.<span class="property">sample</span></span><br><span class="line">|   |-- pre-commit.<span class="property">sample</span></span><br><span class="line">|   |-- prepare-commit-msg.<span class="property">sample</span></span><br><span class="line">|   |-- pre-push.<span class="property">sample</span></span><br><span class="line">|   |-- pre-rebase.<span class="property">sample</span></span><br><span class="line">|   <span class="string">`-- update.sample</span></span><br><span class="line"><span class="string">|-- info</span></span><br><span class="line"><span class="string">|   `</span>-- exclude</span><br><span class="line">|-- objects</span><br><span class="line">|   |-- info</span><br><span class="line">|   <span class="string">`-- pack</span></span><br><span class="line"><span class="string">`</span>-- refs</span><br><span class="line">    |-- heads</span><br><span class="line">    <span class="string">`-- tags</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9 directories, 13 files</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure>

<p>目录结构来看裸仓库和普通库很像，甚至是一模一样，那么我们仿照普通库操作在这个目录下提交一个文件会怎样呢？</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos data]# cd bare.<span class="property">git</span>/</span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos bare.<span class="property">git</span>]# touch <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos bare.<span class="property">git</span>]# git add <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line"><span class="attr">fatal</span>: <span class="title class_">This</span> operation must be run <span class="keyword">in</span> a work tree</span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos bare.<span class="property">git</span>]# git status</span><br><span class="line"><span class="attr">fatal</span>: <span class="title class_">This</span> operation must be run <span class="keyword">in</span> a work tree</span><br><span class="line">[root@<span class="variable constant_">VM</span>-<span class="number">0</span>-<span class="number">3</span>-centos bare.<span class="property">git</span>]#</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>通过操作发现这个裸仓库<code>不允许增删改库内的文件</code>，甚至连 <code>git status</code> 这种命令都无法使用，统一提示了 <code>fatal: This operation must be run in a work tree</code> 这句话，告诉用户这些命令都必须在工作区内操作，既然不能修改，那么这个裸仓库就是“只读”的，那么它还有什么用呢？<br>虽然裸仓库不允许直接修改，但是可以<code>作为服务端远程仓库</code>，在本地克隆这个远程仓库之后再进行修改，这也是最常见的应用方式，总结来说，<code>普通库和裸仓库的区别就是：普通库拥有工作目录，并且工作目录中可以存放正常编辑和提交的文件，而裸库只存放这些文件的commit记录，不允许用户直接在上面进行各种git操作</code>。</p>
<h2 id="3-为什么使用裸仓库而不使用普通库"><a href="#3-为什么使用裸仓库而不使用普通库" class="headerlink" title="3.为什么使用裸仓库而不使用普通库"></a>3.为什么使用裸仓库而不使用普通库</h2><p>普通库实际上包含两份数据的，一份在 .git 目录中以object形式存在，一份在工作目录中以源文件形式存在，我们每次使用 git 命令，可以保证工作目录内文件和 .git 目录数据是一致的，但是如果将普通库作为远端时，在下游提交数据时，远端库中的 .git 目录会直接更新，但是工作区却不知道此时谁在用，不能直接更新覆盖，这就造成了数据不一致的情况。</p>
<h2 id="4-自动化部署"><a href="#4-自动化部署" class="headerlink" title="4.自动化部署"></a>4.自动化部署</h2><p><strong>post-receive</strong></p>
<p>post-receive是服务端钩子，<code>post-receive</code> 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 <code>pre-receive</code> 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器， 或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态， 所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。</p>
<p><strong>自动化部署原理</strong></p>
<p>利用 <code>post-receive</code> 进行自动化部署的原理就是，我们可以修改 <code>post-receive</code> 脚本，在修改提交后自动部署最新内容，实现自自动化部署。</p>
<h2 id="5-具体操作"><a href="#5-具体操作" class="headerlink" title="5.具体操作"></a>5.具体操作</h2><p>需求：服务端建立裸仓库，在接收到新的提交时，自动将项目部署到<code>/myPoject-Yao/distblog/DarknessZY.github.io</code> 目录下</p>
<p><strong>服务端远端操作</strong></p>
<ul>
<li>  建立裸仓库<code>/myPoject-Yao/repo/myBlog.git</code>,建立对应的部署目录<code>/myPoject-Yao/distblog</code></li>
<li>  新建 <code>/myPoject-Yao/repo/myBlog.git/hooks/post-receive</code>脚本,内容如下：</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">#!<span class="regexp">/bin/</span>sh</span><br><span class="line">echo <span class="string">'======上传代码到服务器======'</span></span><br><span class="line">unset <span class="variable constant_">GIT_DIR</span></span><br><span class="line"><span class="title class_">DeployPath</span>=<span class="regexp">/myPoject-Yao/</span>distblog/<span class="title class_">DarknessZY</span>.<span class="property">github</span>.<span class="property">io</span></span><br><span class="line">cd $DeployPath</span><br><span class="line">git pull origin master</span><br><span class="line">echo <span class="string">'======代码更新完成======'</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>本地hexo项目操作</strong></p>
<ul>
<li>  关联服务器的远程裸仓库</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">git remote add origin2 root@服务器公网地址:<span class="regexp">/myPoject-Yao/</span>repo/myBlog.<span class="property">git</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>  修改hexo博客根目录下的_config.yml</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">- <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repo</span>: git@github.<span class="property">com</span>:<span class="title class_">DarknessZY</span>/<span class="title class_">DarknessZY</span>.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span></span><br><span class="line">  <span class="attr">branch</span>: master</span><br><span class="line">- <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repo</span>: root@服务器公网地址:<span class="regexp">/myPoject-Yao/</span>repo/myBlog.<span class="property">git</span></span><br><span class="line">  <span class="attr">branch</span>: master</span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-注意"><a href="#6-注意" class="headerlink" title="6.注意"></a>6.注意</h2><ul>
<li>  如果服务器不是直接用的root用户，而是新建了一个用户，记得给给用户高权限，用户名尽量不要起和其他命令冲突的语义化命名</li>
<li>  建立的裸仓库和脚本文件也记得给高权限</li>
<li>  如果不想输入密码，可把本地git生成的公钥id_pub复制到服务器的/root/.ssh/authorized_keys下</li>
</ul>
<h2 id="7-我的博客"><a href="#7-我的博客" class="headerlink" title="7.我的博客"></a>7.我的博客</h2><p><em><a href="https://yaoyaoqiekenao.com/">耀耀切克闹</a></em> </p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>git自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Husky+eslint+ prettier规范代码</title>
    <url>/2023/05/25/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/Husky+eslint+%20prettier%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">


</head><body><h2 id="1-Git-Hooks"><a href="#1-Git-Hooks" class="headerlink" title="1.Git Hooks"></a>1.Git Hooks</h2><p>   <strong>什么是Git Hooks</strong></p>
<p>   Git Hooks 在Git执行特定事件（如commit、push、receive等）后触发运行脚本,类似于vue的生命周期钩子，git在某些特定事件发生前或后也会有某些执行特定功能的钩子。<code>githooks 保存在 .git 文件夹中</code></p>
<p>   对于<code>规范代码提交</code>我们主要用到的Git Hooks里的这两个钩子，也就是是在git commit执行前对git commit的提交信息做出规范。</p>
<ul>
<li>pre-commit 预提交钩子  触发时机：<code>git commit执行前，可以进行遍历、检测亦或是其他操作暂存区代码</code>  因此我们可以利用该钩子配合<a href="https://github.com/okonet/lint-staged">lint-staged</a>完成对代码风格的规范</li>
<li>commit-msg 预提交时提交消息的钩子  触发时机：<code>同样是git commit执行前，可检查提交消息</code>  因此我们可以在这个钩子执行时配合<a href="https://commitlint.js.org/#/">commitlint</a>完成规范代码提交消息</li>
</ul>
<h2 id="2-Husky"><a href="#2-Husky" class="headerlink" title="2.Husky"></a>2.Husky</h2><p><strong>什么是Husky</strong></p>
<p>就是让原生 git 钩子变得简单好操作的依赖包而已，您可以使用它来<strong>检查提交消息</strong>，<strong>运行测试</strong>，<strong>lint代码</strong>等…当您提交或推送时。<strong>Husky</strong>支持<a href="https://git-scm.com/docs/githooks">所有 Git 钩子</a>。</p>
<p><strong>Husky的使用</strong></p>
<ul>
<li><p>  首先执行安装命令 <code>npm install husky --save-dev</code></p>
</li>
<li><p>  然后再在项目根目录下package.json 文件的scripts配置项 添加一行代码</p>
</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line">    <span class="string">"prepare"</span>: <span class="string">"husky install"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-eslint-prettier"><a href="#3-eslint-prettier" class="headerlink" title="3.eslint+prettier"></a>3.eslint+prettier</h2><p><strong>eslint</strong></p>
<ul>
<li>执行命令 <code>yarn add eslint -D</code></li>
<li>如果希望ESLint支持TypeScript 执行命令<code>yarn add typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin --dev</code></li>
</ul>
<p><strong>prettier</strong></p>
<ul>
<li>执行命令 <code>yarn add prettier -D</code></li>
</ul>
<p><strong>结合ESLint与prettier</strong></p>
<p>单独使用ESLint需要在其配置文件中额外配置很多规则，而这些规则又大多为prettier的默认规则或者我们已经在prettier配了一份，这样难免出冲突，但插件的作者已经想到了这一点，出了一个名为<code>eslint-plugin-prettier</code>的插件。</p>
<ul>
<li>执行命令 <code>yarn add eslint-plugin-prettier -D</code></li>
<li>ESLint与prettier相关文件配置看个人习惯和公司项目需求配就行了<h2 id="4-lint-staged"><a href="#4-lint-staged" class="headerlink" title="4.lint-staged"></a>4.lint-staged</h2></li>
</ul>
<p><strong>什么是lint-staged</strong></p>
<p>int-staged 是一个在git暂存区上运行linters的工具</p>
<p><strong>lint-staged的使用</strong></p>
<ul>
<li> 执行安装命令 <code>npm install lint-staged --save-dev</code> </li>
<li> 然后再在项目根目录下package.json 文件的添加上相关配置并配合eslint+prettier+pre-commit可以对暂存区代码进行检测和操作</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"lint-staged"</span>: {</span><br><span class="line">   <span class="string">"src/**/*.{js,jsx,ts,tsx,json}"</span>: [</span><br><span class="line">     <span class="string">"prettier --write"</span>,</span><br><span class="line">     <span class="string">"eslint --fix"</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"*.vue"</span>: [</span><br><span class="line">     <span class="string">"eslint --fix"</span>,</span><br><span class="line">     <span class="string">"prettier --write"</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"*.{scss,less,styl,html}"</span>: [</span><br><span class="line">     <span class="string">"prettier --write"</span></span><br><span class="line">   ]</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="5-commitlint"><a href="#5-commitlint" class="headerlink" title="5.commitlint"></a>5.commitlint</h2><p><strong>什么是commitlint</strong></p>
<p>就是对你 git commit提交的消息做一个校验的插件，主要还是配合Git Hooks的钩commit-msg一起使用的。</p>
<p><strong>commitlint的使用</strong></p>
<ul>
<li>执行命令安装相关依赖 <code>yarn add @commitlint/cli @commitlint/config-conventional -D</code></li>
<li>在根目录下新建commitlint.config.js 用来配置commitlint</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">"@commitlint/config-conventional"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 以下时我们自定义的规则</span></span><br><span class="line">  <span class="attr">rules</span>: {</span><br><span class="line">    <span class="string">'type-enum'</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">'always'</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">'bug'</span>, <span class="comment">// 此项特别针对bug号，用于向测试反馈bug列表的bug修改情况</span></span><br><span class="line">        <span class="string">'feat'</span>, <span class="comment">// 新功能（feature）</span></span><br><span class="line">        <span class="string">'fix'</span>, <span class="comment">// 修补bug</span></span><br><span class="line">        <span class="string">'docs'</span>, <span class="comment">// 文档（documentation）</span></span><br><span class="line">        <span class="string">'style'</span>, <span class="comment">// 格式（不影响代码运行的变动）</span></span><br><span class="line">        <span class="string">'refactor'</span>, <span class="comment">// 重构（即不是新增功能，也不是修改bug的代码变动）</span></span><br><span class="line">        <span class="string">'test'</span>, <span class="comment">// 增加测试</span></span><br><span class="line">        <span class="string">'chore'</span>, <span class="comment">// 构建过程或辅助工具的变动</span></span><br><span class="line">        <span class="string">'revert'</span>, <span class="comment">// feat(pencil): add ‘graphiteWidth’ option (撤销之前的commit)</span></span><br><span class="line">        <span class="string">'merge'</span> <span class="comment">// 合并分支， 例如： merge（前端页面）： feature-xxxx修改线程地址</span></span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意</strong></p>
<p>如果是用命令建的commitlint.config.js文件，<code>echo "module.exports = {extends: ['@commitlint/config-conventional']}" &gt; commitlint.config.js</code>,在vs code中看看它的格式是否正确,如果不是UTF-8需要</p>
<p>改一下格式，我就是因为这个原因卡了半天<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14869db5337a4f329f83244c4c8ac708~tplv-k3u1fbpfcp-watermark.image" alt="1684205419515.png"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>前面把需要的依赖包和配置文件整好了（package.json里的不要忘了整），接下来就是利用脚本实现</p>
<p><strong>注意</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5ab36c23a214a5cacb1d486a046ea43~tplv-k3u1fbpfcp-watermark.image" alt="企业微信截图_16841411722462.png"><br>所以下面是放在.husk文件夹下利用脚本实现：</p>
<ul>
<li> 因为之前一安装好husky并在package.json配置了，直接执行<code>yarn husky add .husky/pre-commit 'npx --no-install lint-staged "$1"'</code>之后，会看到在根目录的<code>.husky</code>文件夹下多了一个 <code>pre-commit</code> 文件，其内容如下：</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/env sh</span><br><span class="line">. <span class="string">"$(dirname -- "</span>$<span class="number">0</span><span class="string">")/_/husky.sh"</span></span><br><span class="line">npx --no-install lint-staged <span class="string">"$1"</span></span><br></pre></td></tr></tbody></table></figure>
<p>可以看到之前安装并配置的lint-staged在这个钩子中就开始发挥作用了，在提交前利用lint-staged把不规范大代码格式化</p>
<ul>
<li>执行<code>yarn husky add .husky/commit-msg 'npx --no-install commitlint --edit "$1"'</code>之后，会看到在根目录的<code>.husky</code>文件夹下多了一个 <code>commit-msg</code> 文件，其内容如下：</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/env sh</span><br><span class="line">. <span class="string">"$(dirname -- "</span>$<span class="number">0</span><span class="string">")/_/husky.sh"</span></span><br><span class="line">npx --no-install commitlint --edit <span class="string">"$1"</span></span><br></pre></td></tr></tbody></table></figure>
<p>可以看到之前安装并配置的commitlint在这个钩子中就开始发挥作用了，开始检测你的提交消息了</p>
<h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><p>不规范提交</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6af8c321a8a64b61adab28439b65eed4~tplv-k3u1fbpfcp-watermark.image" alt="1684206668224.png"></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>git，Husky</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript 6 异步编程</title>
    <url>/2023/05/11/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ECMAScript%206%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p> 观<a href="http://www.ruanyifeng.com/">阮一峰</a>大佬的《深入掌握 ECMAScript 6 异步编程》 ，记录的笔记,其实也看了很多其他人写的文章，但主要的笔记记录，还得是他。</p>
</blockquote>
<h2 id="异步编程的方式"><a href="#异步编程的方式" class="headerlink" title="异步编程的方式"></a>异步编程的方式</h2><ul>
<li>回调函数 <strong>就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。</strong></li>
<li>事件监听<strong>任务的执行不取决于代码的顺序，而取决于某个事件是否发生</strong></li>
<li>发布/订阅 <strong>存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做<a href="https://en.wikipedia.org/wiki/Publish-subscribe_pattern">“发布/订阅模式”</a></strong></li>
<li>Promises对象<strong>每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数，本质上还是利用回调函数</strong></li>
<li>生成器函数 Generator/ yield <strong>yield表达式可以暂停函数执行，next方法用于恢复函数执行，这使得Generator函数非常适合将异步任务同步化</strong></li>
<li>async/await 函数  <strong>async 函数是通过<code>generator 和 promise 实现的一个自动执行的语法糖</code>，当函数内部执行到一个await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写。</strong><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><a href="https://en.wikipedia.org/wiki/Coroutine">“协程”</a>（coroutine），意思是多个线程互相协作，完成异步任务。生成器函数 Generator/ yield 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。</li>
</ul>
<p>举例来说，读取文件的协程写法如下：</p>
 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">function *asnycJob() {</span><br><span class="line">  // ...其他代码</span><br><span class="line"> var f = yield readFile(fileA);</span><br><span class="line">  // ...其他代码</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>上面代码的函数 asyncJob 是一个协程，它的奥妙就在其中的 yield 命令。它表示执行到此处，执行权将交给其他协程。也就是说，yield命令是异步两个阶段的分界线。</p>
<p>协程遇到 yield 命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除yield命令，简直一模一样。</p>
<p>异步的关键就是把会阻塞线程函数的执行权交出去，让这个函数等待恢复执行，等待的时间内请求（或者其他异步任务）也该执行完了，这时候再来继续执行这个函数。通过上面对协程的运行方式的讲解我们很容易就能想到用协程来解决这个问题，利用<code>yield</code>挂起这个阻塞线程函数，然后继续执行后面的语句，等这个函数不再阻塞了，再回到这个函数继续执行。那么问题来了，应该什么时候继续执行这个挂起的函数呢？（配合promise，根据promise返回的异步任务状态），所以诞生了async/await 函数，也是目前在工作和项目中使用最多的方式，具体实现后面会说明。</p>
<h2 id="Generator-函数的含义与用法"><a href="#Generator-函数的含义与用法" class="headerlink" title="Generator 函数的含义与用法"></a>Generator 函数的含义与用法</h2><p><strong>什么是 Generator 函数</strong></p>
<p>在Javascript中，一个函数一旦开始执行，就会运行到最后或遇到return时结束，运行期间不会有其它代码能够打断它，也不能从外部再传入值到函数体内而Generator函数（生成器）的出现使得打破函数的完整运行成为了可能，其语法行为与传统函数完全不同Generator函数是ES6提供的一种异步编程解决方案，形式上也是一个普通函数，但有几个显著的特征：</p>
<ul>
<li> function关键字与函数名之间有一个星号 “*” （推荐紧挨着function关键字）</li>
<li> 函数体内使用 yield 表达式，定义不同的内部状态 （可以有多个yield）</li>
<li> 直接调用 Generator函数并不会执行，也不会返回运行结果，而是返回一个遍历器对象（Iterator Object）</li>
<li> 依次调用遍历器对象的next方法，遍历 Generator函数内部的每一个状态</li>
</ul>
<p><strong>执行机制</strong></p>
<p>调用 Generator 函数和调用普通函数一样，在函数名后面加上()即可，但是 Generator 函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针<a href="https://juejin.cn/post/7038951223264804900">迭代器Iterator</a>)，所以要调用遍历器对象Iterator 的 next 方法，指针就会从函数头部或者上一次停下来的地方开始执行</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">func</span>(<span class="params"></span>){ </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"one"</span>); </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'1'</span>; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"two"</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'2'</span>; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"three"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'3'</span>; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">f.<span class="title function_">next</span>(); <span class="comment">// one // {value: "1", done: false} </span></span><br><span class="line">f.<span class="title function_">next</span>(); <span class="comment">// two // {value: "2", done: false} </span></span><br><span class="line">f.<span class="title function_">next</span>(); <span class="comment">// three // {value: "3", done: true} </span></span><br><span class="line">f.<span class="title function_">next</span>(); <span class="comment">// {value: undefined, done: true}</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>第一次调用 next 方法时，从 Generator 函数的头部开始执行，先是打印了 one ,执行到 yield 就停下来，并将yield 后边表达式的值 ‘1’，作为返回对象的 value 属性值，此时函数还没有执行完， 返回对象的 done 属性值是 false。</p>
<p>第二次调用 next 方法时，同上步 。</p>
<p>第三次调用 next 方法时，先是打印了 three ，然后执行了函数的返回操作，并将 return 后面的表达式的值，作为返回对象的 value 属性值，此时函数已经结束，多以 done 属性值为true 。</p>
<p>第四次调用 next 方法时， 此时函数已经执行完了，所以返回 value 属性值是 undefined ，done 属性值是 true 。如果执行第三步时，没有 return 语句的话，就直接返回 {value: undefined, done: true}。</p>
</blockquote>
<p>由此可以看出 <strong>yield表达式可以暂停函数执行，next方法用于恢复函数执行，这使得Generator函数非常适合将异步任务同步化</strong></p>
<h2 id="async-await-函数的含义与用法"><a href="#async-await-函数的含义与用法" class="headerlink" title="async/await 函数的含义与用法"></a>async/await 函数的含义与用法</h2><p>async/await的本质其实就是Generator和Promise的语法糖</p>
<p><strong>async/await的使用</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">url</span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="title function_">resolve</span>(url)</span><br><span class="line">    }, <span class="number">1000</span>)</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">requestData</span>(<span class="string">'aaa'</span>)</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">requestData</span>(res1 + <span class="string">'bbb'</span>)</span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">await</span> <span class="title function_">requestData</span>(res2 + <span class="string">'ccc'</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">//3秒钟后打印aaabbbccc</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>上面代码用 Generator 函数实现</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">url</span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="title function_">resolve</span>(url)</span><br><span class="line">    }, <span class="number">1000</span>)</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFoo</span>(<span class="params"></span>) {</span><br><span class="line">	<span class="keyword">const</span> res1 = <span class="keyword">yield</span> <span class="title function_">requestData</span>(<span class="string">'aaa'</span>)</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">yield</span> <span class="title function_">requestData</span>(res1 + <span class="string">'bbb'</span>)</span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">yield</span> <span class="title function_">requestData</span>(res2 + <span class="string">'ccc'</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> generate = <span class="title function_">generatorFoo</span>()</span><br><span class="line">generate.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res1</span> =&gt;</span> {</span><br><span class="line">  generate.<span class="title function_">next</span>(res1).<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res2</span> =&gt;</span> {</span><br><span class="line">    generate.<span class="title function_">next</span>(res2).<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res3</span> =&gt;</span> {</span><br><span class="line">      generate.<span class="title function_">next</span>(res3)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<p>因此如果我们把<strong>Generator 函数</strong>封装一下递归调用实现Generator 的自动迭代，是不是可以实现<strong>async/await</strong>的效果，所以说<strong>async/await的本质其实就是Generator和Promise的语法糖</strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/w3cnote/es6-generator.html">ES6 Generator 函数 | 菜鸟教程 (runoob.com)</a></p>
<p><a href="https://juejin.cn/post/7038968296518975525">async/await的本质分析 - 掘金 (juejin.cn)</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>常用数据处理方法（例如对象清空，浮点数计算等）</title>
    <url>/2023/04/20/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%EF%BC%88%E4%BE%8B%E5%A6%82%E5%AF%B9%E8%B1%A1%E6%B8%85%E7%A9%BA%EF%BC%8C%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97%E7%AD%89%EF%BC%89/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、对象清空-resetData"><a href="#一、对象清空-resetData" class="headerlink" title="一、对象清空 resetData"></a>一、对象清空 resetData</h1><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 对象清空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">object</span>} valueObj  传入的要清空的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">Object</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">resetData</span> = (<span class="params">valueObj: any</span>) =&gt; {</span><br><span class="line">	<span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(valueObj) === <span class="string">'[object Object]'</span>) {</span><br><span class="line">		<span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(valueObj)</span><br><span class="line">		<span class="keyword">const</span> <span class="attr">obj</span>: { [<span class="attr">name</span>: string]: string | <span class="title class_">Array</span>&lt;any&gt; | boolean | number } = {}</span><br><span class="line">		keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">			obj[item] =</span><br><span class="line">				<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(valueObj[item]) === <span class="string">'[object Array]'</span></span><br><span class="line">					? []</span><br><span class="line">					: <span class="keyword">typeof</span> valueObj[item] === <span class="string">'number'</span></span><br><span class="line">					? <span class="number">0</span></span><br><span class="line">					: <span class="keyword">typeof</span> valueObj[item] === <span class="string">'boolean'</span></span><br><span class="line">					? <span class="literal">false</span></span><br><span class="line">					: <span class="string">''</span></span><br><span class="line">		})</span><br><span class="line">		<span class="title class_">Object</span>.<span class="title function_">assign</span>(valueObj, obj)</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		<span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(valueObj[<span class="number">0</span>])</span><br><span class="line">		<span class="keyword">const</span> <span class="attr">obj</span>: { [<span class="attr">name</span>: string]: string | <span class="title class_">Array</span>&lt;any&gt; | boolean | number } = {}</span><br><span class="line">		keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">			obj[item] =</span><br><span class="line">				<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(valueObj[item]) === <span class="string">'[object Array]'</span></span><br><span class="line">					? []</span><br><span class="line">					: <span class="keyword">typeof</span> valueObj[item] === <span class="string">'number'</span></span><br><span class="line">					? <span class="number">0</span></span><br><span class="line">					: <span class="keyword">typeof</span> valueObj[item] === <span class="string">'boolean'</span></span><br><span class="line">					? <span class="literal">false</span></span><br><span class="line">					: <span class="string">''</span></span><br><span class="line">		})</span><br><span class="line">		<span class="title class_">Object</span>.<span class="title function_">assign</span>(valueObj[<span class="number">0</span>], obj)</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h1 id="二、js浮点数乘法处理"><a href="#二、js浮点数乘法处理" class="headerlink" title="二、js浮点数乘法处理"></a>二、js浮点数乘法处理</h1><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  js浮点数乘法处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type"></span>} <span class="variable">arg1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} <span class="variable">arg2</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">accMul</span> = (<span class="params">arg1: number, arg2?: number</span>) =&gt; {</span><br><span class="line">	<span class="keyword">return</span> arg2 ? <span class="title class_">Number</span>(<span class="title class_">Number</span>(arg1 * <span class="number">100</span>).<span class="title function_">toFixed</span>(arg2)) : <span class="title class_">Number</span>(<span class="title class_">Number</span>(arg1 * <span class="number">100</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="三、js浮点数除法处理"><a href="#三、js浮点数除法处理" class="headerlink" title="三、js浮点数除法处理"></a>三、js浮点数除法处理</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * js 浮点数除法处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} <span class="variable">arg1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} <span class="variable">arg2</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">accDiv</span> = (<span class="params">arg1: number, arg2?: number</span>) =&gt; {</span><br><span class="line">	<span class="keyword">return</span> arg2 ? <span class="title class_">Number</span>(<span class="title class_">Number</span>(arg1 / <span class="number">100</span>).<span class="title function_">toFixed</span>(arg2)) : <span class="title class_">Number</span>(<span class="title class_">Number</span>(arg1 / <span class="number">100</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="四、数字转金额格式"><a href="#四、数字转金额格式" class="headerlink" title="四、数字转金额格式"></a>四、数字转金额格式</h1><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数字转金额格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num 要格式化的数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> decimals 保留位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> numberToMoney = (<span class="attr">num</span>: number | <span class="title class_">BigNumber</span>, decimals = <span class="number">2</span>, thousandsSep = <span class="string">','</span>): <span class="function"><span class="params">string</span> =&gt;</span> {</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">isNaN</span>(num <span class="keyword">as</span> any)) {</span><br><span class="line">		<span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">const</span> prec = !<span class="built_in">isFinite</span>(+decimals) ? <span class="number">0</span> : <span class="title class_">Math</span>.<span class="title function_">abs</span>(decimals) <span class="comment">// 保留的位数一定是有限位数的正整数</span></span><br><span class="line">	<span class="keyword">const</span> sep = <span class="keyword">typeof</span> thousandsSep === <span class="string">'undefined'</span> ? <span class="string">','</span> : thousandsSep</span><br><span class="line">	<span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">BigNumber</span>(num).<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/,/g</span>, <span class="string">''</span>) <span class="comment">// 字符串，将，变成'';</span></span><br><span class="line">	<span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">BigNumber</span>(s) <span class="comment">// 解析一个字符串，并返回一个浮点数</span></span><br><span class="line">	<span class="keyword">const</span> n = p.<span class="built_in">isNaN</span>() ? <span class="number">1</span> : p</span><br><span class="line">	<span class="keyword">const</span> formatNum = n</span><br><span class="line">		.<span class="title function_">toFixed</span>(prec)</span><br><span class="line">		.<span class="title function_">toString</span>()</span><br><span class="line">		.<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=(\d{3})+\.)/g</span>, <span class="keyword">function</span> (<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) {</span><br><span class="line">			<span class="keyword">return</span> $<span class="number">1</span> + sep</span><br><span class="line">		})</span><br><span class="line">	<span class="keyword">return</span> num ? formatNum : <span class="string">''</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="五、时间戳转日期格式"><a href="#五、时间戳转日期格式" class="headerlink" title="五、时间戳转日期格式"></a>五、时间戳转日期格式</h1><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">type dateFormats = <span class="string">'y-M-d'</span> | <span class="string">'y-M-d H:m:s'</span> | <span class="string">'y年M月d日'</span> | <span class="string">'y年M月d日 H时i分'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间戳转日期格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">timestape</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">time</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dateFormat = (<span class="attr">timestape</span>: number, <span class="attr">formats</span>: dateFormats = <span class="string">'y-M-d H:m:s'</span>): <span class="function"><span class="params">string</span> =&gt;</span> {</span><br><span class="line">	<span class="keyword">if</span> (!timestape) {</span><br><span class="line">		<span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// 补零</span></span><br><span class="line">	<span class="keyword">const</span> zero = (<span class="attr">val</span>: number): string | <span class="function"><span class="params">number</span> =&gt;</span> {</span><br><span class="line">		<span class="keyword">return</span> val &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">${val}</span>`</span> : val</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">const</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>(timestape)</span><br><span class="line">	<span class="keyword">const</span> year = myDate.<span class="title function_">getFullYear</span>()</span><br><span class="line">	<span class="keyword">const</span> month = <span class="title function_">zero</span>(myDate.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">const</span> day = <span class="title function_">zero</span>(myDate.<span class="title function_">getDate</span>())</span><br><span class="line">	<span class="keyword">const</span> hour = <span class="title function_">zero</span>(myDate.<span class="title function_">getHours</span>())</span><br><span class="line">	<span class="keyword">const</span> minute = <span class="title function_">zero</span>(myDate.<span class="title function_">getMinutes</span>())</span><br><span class="line">	<span class="keyword">const</span> second = <span class="title function_">zero</span>(myDate.<span class="title function_">getSeconds</span>())</span><br><span class="line">	<span class="comment">// 替换 formats 中的内容</span></span><br><span class="line">	<span class="keyword">const</span> replaceDate = (<span class="attr">match</span>: string): <span class="function"><span class="params">string</span> =&gt;</span> {</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			{</span><br><span class="line">				<span class="attr">y</span>: year,</span><br><span class="line">				<span class="attr">M</span>: month,</span><br><span class="line">				<span class="attr">d</span>: day,</span><br><span class="line">				<span class="attr">H</span>: hour,</span><br><span class="line">				<span class="attr">m</span>: minute,</span><br><span class="line">				<span class="attr">s</span>: second</span><br><span class="line">			} <span class="keyword">as</span> any</span><br><span class="line">		)[match]</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> formats.<span class="title function_">replace</span>(<span class="regexp">/Y|M|d|H|m|s/gi</span>, replaceDate)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="六、数组去重"><a href="#六、数组去重" class="headerlink" title="六、数组去重"></a>六、数组去重</h1><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">uniqueArr</span> = (<span class="params">arr</span>) =&gt; [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uniqueArr</span>([<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]));</span><br><span class="line"><span class="comment">// ['1', '2', '3', '4']</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h1 id="七、获取当前h5页面的url参数"><a href="#七、获取当前h5页面的url参数" class="headerlink" title="七、获取当前h5页面的url参数"></a>七、获取当前h5页面的url参数</h1><p>一般是h5嵌套到其他如（app，小程序等），双方之前的交互时用到的，在main.ts中直接使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 url 中的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type"> String </span>} url 获取参数 url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> {<span class="type"> Object </span>} 返回 url 参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getQueryString</span> = (<span class="params">url = <span class="string">''</span></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> baseUrl = url || <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">  <span class="keyword">const</span> _pa = baseUrl.<span class="title function_">substring</span>(baseUrl.<span class="title function_">indexOf</span>(<span class="string">'?'</span>) + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> _arrS = _pa.<span class="title function_">split</span>(<span class="string">'&amp;'</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">_rs</span>: any = {};</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _arrS.<span class="property">length</span>; i++) {</span><br><span class="line">    <span class="keyword">const</span> pos = _arrS[i].<span class="title function_">indexOf</span>(<span class="string">'='</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos === -<span class="number">1</span>) {</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> key = _arrS[i].<span class="title function_">substring</span>(<span class="number">0</span>, pos);</span><br><span class="line">    <span class="keyword">const</span> value = <span class="built_in">decodeURIComponent</span>(_arrS[i].<span class="title function_">substring</span>(pos + <span class="number">1</span>));</span><br><span class="line">    _rs[key] = value;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> _rs;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如 当前页面为https://www.google.com.hk/search?number=666&amp;string=money</span></span><br><span class="line"><span class="comment">//import { getQueryString } from '这个方法存放的地方';</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> {number,string}: any = <span class="title function_">getQueryString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number,string);<span class="comment">//666 money</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="七、从url获取参数并转为对象"><a href="#七、从url获取参数并转为对象" class="headerlink" title="七、从url获取参数并转为对象"></a>七、从url获取参数并转为对象</h1><p>和上面不同的时需传入一个url</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getParameters</span> = <span class="variable constant_">URL</span> =&gt; <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">`{"<span class="subst">${<span class="built_in">decodeURI</span>(URL.split(<span class="string">"?"</span>)[<span class="number">1</span>]).replace(/<span class="string">"/g, </span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">'\\"</span><span class="string">').replace(/&amp;/g, '</span><span class="string">","</span><span class="string">').replace(/=/g, '</span><span class="string">":"</span><span class="string">')}"}`)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">getParameters("https://www.google.com.hk/search?number=666&amp;string=money");</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">// {number: '</span><span class="number">666</span><span class="string">', string: '</span>money<span class="string">'}</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="八、检查对象是否为空"><a href="#八、检查对象是否为空" class="headerlink" title="八、检查对象是否为空"></a>八、检查对象是否为空</h1><p>检查对象是否为空，实际上并不那么简单，即使对象为空，每次检查对象是否等于 <code>{}</code> 也会返回 <code>false</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isEmpty</span> = obj =&gt; <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="property">length</span> === <span class="number">0</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="title function_">isEmpty</span>({}) <span class="comment">// true </span></span><br><span class="line"><span class="title function_">isEmpty</span>({<span class="attr">a</span>:<span class="string">"not empty"</span>}) <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="九、文字复制到剪贴板"><a href="#九、文字复制到剪贴板" class="headerlink" title="九、文字复制到剪贴板"></a>九、文字复制到剪贴板</h1><p><code>Clipboard API</code> 它的所有操作都是异步的，返回 <code>Promise</code> 对象，不会造成页面卡顿。而且，它可以将任意内容（比如图片）放入剪贴板。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">copyText</span> = <span class="keyword">async</span> (<span class="params">text</span>) =&gt; <span class="keyword">await</span> navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(text)</span><br><span class="line"><span class="title function_">copyText</span>(<span class="string">'单行代码 前端世界'</span>)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>js常用方法</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3常用指令封装使用</title>
    <url>/2023/04/12/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/vue3%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%B0%81%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>因为需求可能需要频繁发送验证码，文本复制等等的，将这些封装成指令使用是最方便的，自己记个笔记，方便以后要用或者新项目搭建时的时候，c+v大法（手动狗头）</p>
</blockquote>
<h2 id="节流指令-v-throttle"><a href="#节流指令-v-throttle" class="headerlink" title="节流指令 v-throttle"></a>节流指令 v-throttle</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  需求：防止按钮在短时间内被多次点击，使用节流函数限制规定时间内只能点击一次。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  思路：</span></span><br><span class="line"><span class="comment">    1、第一次点击，立即调用方法并禁用按钮，等延迟结束再次激活按钮</span></span><br><span class="line"><span class="comment">    2、将需要触发的方法绑定在指令上</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  使用：给 Dom 加上 v-throttle 及回调函数即可</span></span><br><span class="line"><span class="comment">  &lt;button v-throttle="debounceClick"&gt;节流提交&lt;/button&gt;</span></span><br><span class="line"><span class="comment">  因为用了el.disabled也就是dom元素的disabled的属性，没disabled属性得使用，是不生效得</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">interface <span class="title class_">ElType</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> {</span><br><span class="line">	<span class="attr">__handleClick__</span>: <span class="function">() =&gt;</span> any;</span><br><span class="line">	<span class="attr">disabled</span>: boolean;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">throttle</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params">el: ElType, binding: DirectiveBinding</span>) {</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> binding.<span class="property">value</span> !== <span class="string">"function"</span>) {</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"callback must be a function"</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">let</span> <span class="attr">timer</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">		el.<span class="property">__handleClick__</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">			<span class="keyword">if</span> (timer) {</span><br><span class="line">				<span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">if</span> (!el.<span class="property">disabled</span>) {</span><br><span class="line">				el.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">				binding.<span class="title function_">value</span>();</span><br><span class="line">				timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">					el.<span class="property">disabled</span> = <span class="literal">false</span>;</span><br><span class="line">				}, <span class="number">1000</span>);</span><br><span class="line">			}</span><br><span class="line">		};</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	},</span><br><span class="line">	<span class="title function_">beforeUnmount</span>(<span class="params">el: ElType</span>) {</span><br><span class="line">		el.<span class="title function_">removeEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> throttle;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="防抖指令-v-debounce"><a href="#防抖指令-v-debounce" class="headerlink" title="防抖指令 v-debounce"></a>防抖指令 v-debounce</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-debounce</span></span><br><span class="line"><span class="comment"> * 按钮防抖指令，可自行扩展至input</span></span><br><span class="line"><span class="comment"> * 接收参数：function类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">interface <span class="title class_">ElType</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> {</span><br><span class="line">	<span class="attr">__handleClick__</span>: <span class="function">() =&gt;</span> any;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">debounce</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params">el: ElType, binding: DirectiveBinding</span>) {</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> binding.<span class="property">value</span> !== <span class="string">"function"</span>) {</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"callback must be a function"</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">let</span> <span class="attr">timer</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">		el.<span class="property">__handleClick__</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">			<span class="keyword">if</span> (timer) {</span><br><span class="line">				<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">			}</span><br><span class="line">			timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">				binding.<span class="title function_">value</span>();</span><br><span class="line">			}, <span class="number">500</span>);</span><br><span class="line">		};</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	},</span><br><span class="line">	<span class="title function_">beforeUnmount</span>(<span class="params">el: ElType</span>) {</span><br><span class="line">		el.<span class="title function_">removeEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> debounce;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="长按指令-v-longpress"><a href="#长按指令-v-longpress" class="headerlink" title="长按指令 v-longpress"></a>长按指令 v-longpress</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-longpress</span></span><br><span class="line"><span class="comment"> * 长按指令，长按时触发事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">directive</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params">el: HTMLElement, binding: DirectiveBinding</span>) {</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> binding.<span class="property">value</span> !== <span class="string">"function"</span>) {</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"callback must be a function"</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="comment">// 定义变量</span></span><br><span class="line">		<span class="keyword">let</span> <span class="attr">pressTimer</span>: any = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 创建计时器（ 2秒后执行函数 ）</span></span><br><span class="line">		<span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params">e: any</span>) =&gt; {</span><br><span class="line">			<span class="keyword">if</span> (e.<span class="property">button</span>) {</span><br><span class="line">				<span class="keyword">if</span> (e.<span class="property">type</span> === <span class="string">"click"</span> &amp;&amp; e.<span class="property">button</span> !== <span class="number">0</span>) {</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">if</span> (pressTimer === <span class="literal">null</span>) {</span><br><span class="line">				pressTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">					<span class="title function_">handler</span>(e);</span><br><span class="line">				}, <span class="number">1000</span>);</span><br><span class="line">			}</span><br><span class="line">		};</span><br><span class="line">		<span class="comment">// 取消计时器</span></span><br><span class="line">		<span class="keyword">const</span> <span class="title function_">cancel</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">			<span class="keyword">if</span> (pressTimer !== <span class="literal">null</span>) {</span><br><span class="line">				<span class="built_in">clearTimeout</span>(pressTimer);</span><br><span class="line">				pressTimer = <span class="literal">null</span>;</span><br><span class="line">			}</span><br><span class="line">		};</span><br><span class="line">		<span class="comment">// 运行函数</span></span><br><span class="line">		<span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params">e: MouseEvent | TouchEvent</span>) =&gt; {</span><br><span class="line">			binding.<span class="title function_">value</span>(e);</span><br><span class="line">		};</span><br><span class="line">		<span class="comment">// 添加事件监听器</span></span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"mousedown"</span>, start);</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"touchstart"</span>, start);</span><br><span class="line">		<span class="comment">// 取消计时器</span></span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, cancel);</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"mouseout"</span>, cancel);</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"touchend"</span>, cancel);</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"touchcancel"</span>, cancel);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> directive;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="拖拽指令-v-draggable"><a href="#拖拽指令-v-draggable" class="headerlink" title="拖拽指令 v-draggable"></a>拖拽指令 v-draggable</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	需求：实现一个拖拽指令，可在父元素区域任意拖拽元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	思路：</span></span><br><span class="line"><span class="comment">		1、设置需要拖拽的元素为absolute，其父元素为relative。</span></span><br><span class="line"><span class="comment">		2、鼠标按下(onmousedown)时记录目标元素当前的 left 和 top 值。</span></span><br><span class="line"><span class="comment">		3、鼠标移动(onmousemove)时计算每次移动的横向距离和纵向距离的变化值，并改变元素的 left 和 top 值</span></span><br><span class="line"><span class="comment">		4、鼠标松开(onmouseup)时完成一次拖拽</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	使用：在 Dom 上加上 v-draggable 即可</span></span><br><span class="line"><span class="comment">	&lt;div class="dialog-model" v-draggable&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">interface <span class="title class_">ElType</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> {</span><br><span class="line">	<span class="attr">parentNode</span>: any;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">draggable</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="attr">mounted</span>: <span class="keyword">function</span> (<span class="params">el: ElType</span>) {</span><br><span class="line">		el.<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">"move"</span>;</span><br><span class="line">		el.<span class="property">style</span>.<span class="property">position</span> = <span class="string">"absolute"</span>;</span><br><span class="line">		el.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">			<span class="keyword">let</span> disX = e.<span class="property">pageX</span> - el.<span class="property">offsetLeft</span>;</span><br><span class="line">			<span class="keyword">let</span> disY = e.<span class="property">pageY</span> - el.<span class="property">offsetTop</span>;</span><br><span class="line">			<span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">				<span class="keyword">let</span> x = e.<span class="property">pageX</span> - disX;</span><br><span class="line">				<span class="keyword">let</span> y = e.<span class="property">pageY</span> - disY;</span><br><span class="line">				<span class="keyword">let</span> maxX = el.<span class="property">parentNode</span>.<span class="property">offsetWidth</span> - el.<span class="property">offsetWidth</span>;</span><br><span class="line">				<span class="keyword">let</span> maxY = el.<span class="property">parentNode</span>.<span class="property">offsetHeight</span> - el.<span class="property">offsetHeight</span>;</span><br><span class="line">				<span class="keyword">if</span> (x &lt; <span class="number">0</span>) {</span><br><span class="line">					x = <span class="number">0</span>;</span><br><span class="line">				} <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; maxX) {</span><br><span class="line">					x = maxX;</span><br><span class="line">				}</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (y &lt; <span class="number">0</span>) {</span><br><span class="line">					y = <span class="number">0</span>;</span><br><span class="line">				} <span class="keyword">else</span> <span class="keyword">if</span> (y &gt; maxY) {</span><br><span class="line">					y = maxY;</span><br><span class="line">				}</span><br><span class="line">				el.<span class="property">style</span>.<span class="property">left</span> = x + <span class="string">"px"</span>;</span><br><span class="line">				el.<span class="property">style</span>.<span class="property">top</span> = y + <span class="string">"px"</span>;</span><br><span class="line">			};</span><br><span class="line">			<span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">				<span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="literal">null</span>;</span><br><span class="line">			};</span><br><span class="line">		};</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> draggable;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="复制指令-v-copy"><a href="#复制指令-v-copy" class="headerlink" title="复制指令 v-copy"></a>复制指令 v-copy</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-copy</span></span><br><span class="line"><span class="comment"> * 复制某个值至剪贴板</span></span><br><span class="line"><span class="comment"> * 接收参数：string类型/Ref&lt;string&gt;类型/Reactive&lt;string&gt;类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span>  { <span class="title class_">Toast</span> }  <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line">interface <span class="title class_">ElType</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> {</span><br><span class="line">	<span class="attr">copyData</span>: string | number;</span><br><span class="line">	<span class="attr">__handleClick__</span>: any;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">copy</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params">el: ElType, binding: DirectiveBinding</span>) {</span><br><span class="line">		el.<span class="property">copyData</span> = binding.<span class="property">value</span>;</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, handleClick);</span><br><span class="line">	},</span><br><span class="line">	<span class="title function_">updated</span>(<span class="params">el: ElType, binding: DirectiveBinding</span>) {</span><br><span class="line">		el.<span class="property">copyData</span> = binding.<span class="property">value</span>;</span><br><span class="line">	},</span><br><span class="line">	<span class="title function_">beforeUnmount</span>(<span class="params">el: ElType</span>) {</span><br><span class="line">		el.<span class="title function_">removeEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"><span class="variable language_">this</span>: any</span>) {</span><br><span class="line">	<span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"input"</span>);</span><br><span class="line">	input.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">copyData</span>.<span class="title function_">toLocaleString</span>();</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(input);</span><br><span class="line">	input.<span class="title function_">select</span>();</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">"Copy"</span>);</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(input);</span><br><span class="line">    <span class="title class_">Toast</span>({</span><br><span class="line">        <span class="attr">type</span>: <span class="string">'success'</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">'复制成功'</span>,</span><br><span class="line">      })</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> copy;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="全局注册所有自定义指令"><a href="#全局注册所有自定义指令" class="headerlink" title="全局注册所有自定义指令"></a>全局注册所有自定义指令</h2><p>directivesIndex.ts：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">App</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> copy <span class="keyword">from</span> <span class="string">"./modules/copy"</span>;</span><br><span class="line"><span class="keyword">import</span> draggable <span class="keyword">from</span> <span class="string">"./modules/draggable"</span>;</span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">"./modules/debounce"</span>;</span><br><span class="line"><span class="keyword">import</span> throttle <span class="keyword">from</span> <span class="string">"./modules/throttle"</span>;</span><br><span class="line"><span class="keyword">import</span> longpress <span class="keyword">from</span> <span class="string">"./modules/longpress"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">directivesList</span>: any = {</span><br><span class="line">	copy,</span><br><span class="line">	draggable,</span><br><span class="line">	debounce,</span><br><span class="line">	throttle,</span><br><span class="line">	longpress</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> directives = {</span><br><span class="line">	<span class="attr">install</span>: <span class="keyword">function</span> (<span class="params">app: App&lt;Element&gt;</span>) {</span><br><span class="line">		<span class="title class_">Object</span>.<span class="title function_">keys</span>(directivesList).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">			<span class="comment">// 注册所有自定义指令</span></span><br><span class="line">			app.<span class="title function_">directive</span>(key, directivesList[key]);</span><br><span class="line">		});</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> directives;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="在mian-ts引入并使用"><a href="#在mian-ts引入并使用" class="headerlink" title="在mian.ts引入并使用"></a>在mian.ts引入并使用</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> directivesIndex <span class="keyword">from</span> <span class="string">'directivesIndex.ts的路径'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(piniaStore).<span class="title function_">use</span>(directivesIndex).<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>项目搭建</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>NestJS搭建项目（跟着掘金大佬的文章学习，自己试着整了个登录注册接口）</title>
    <url>/2023/03/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/NestJS%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%88%E8%B7%9F%E7%9D%80%E6%8E%98%E9%87%91%E5%A4%A7%E4%BD%AC%E7%9A%84%E6%96%87%E7%AB%A0%E5%AD%A6%E4%B9%A0%EF%BC%8C%E8%87%AA%E5%B7%B1%E8%AF%95%E7%9D%80%E6%95%B4%E4%BA%86%E4%B8%AA%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E6%8E%A5%E5%8F%A3%EF%BC%89/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>学习NestJS，主要看了<br><a href="https://juejin.cn/post/7032079740982788132#heading-22">学完这篇 Nest.js 实战，还没入门的来锤我！(长文预警) - 掘金 (juejin.cn)</a>，也是跟着整时做一个笔记，大佬讲已经很清晰了，不出意外真入门了，然后试着写了登录注册的接口，成功的那一刻还是挺开心的！！！</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我是按照官网的Nest CLI创建的项目，也是官网推荐初学者使用的方式:</p>
<p>若要使用 Nest CLI 构建项目，请运行以下命令。这将创建一个新的项目目录，并使用核心的 Nest 文件和支撑模块填充该目录，从而为项目创建一个传统的基本结构。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i -g @nestjs/cli</span><br><span class="line">$ nest <span class="keyword">new</span> project-name</span><br></pre></td></tr></tbody></table></figure>
<p>运行完命令后：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c74eaaa078c4538849c0f7ad31fd6f0~tplv-k3u1fbpfcp-watermark.image" alt="1678264171764.png"></p>
<p>这里简单说明一下这些核心文件：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── app.controller.spec.ts</span><br><span class="line">├── app.controller.ts</span><br><span class="line">├── app.module.ts</span><br><span class="line">├── app.service.ts</span><br><span class="line">├── main.ts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| ------------------------ | ------------------------------------------------- |</span><br><span class="line">| `app.controller.ts`      | 单个路由的基本控制器(Controller)                            |</span><br><span class="line">| `app.controller.spec.ts` | 针对控制器的单元测试                                        |</span><br><span class="line">| `app.module.ts`          | 应用程序的根模块(Module)                                  |</span><br><span class="line">| `app.service.ts`         | 具有单一方法的基本服务(Service)                              |</span><br><span class="line">| `main.ts`                | 应用程序的入口文件，它使用核心函数 `NestFactory` 来创建 Nest 应用程序的实例。 |</span><br></pre></td></tr></tbody></table></figure>
<p>具体可以去看这位大佬写的文章，非常好！我后面也是跟着这篇文章学习的</p>
<p>怎么连接数据库，接口规范统一，swagger等我都是按下面链接的大佬的文章学习的，然后也算是入了门，才开始试试登录注册的。</p>
<p><a href="https://juejin.cn/post/7032079740982788132#heading-22">学完这篇 Nest.js 实战，还没入门的来锤我！(长文预警) - 掘金 (juejin.cn)</a></p>
<h2 id="登录注册"><a href="#登录注册" class="headerlink" title="登录注册"></a>登录注册</h2><h3 id="全局路由前缀"><a href="#全局路由前缀" class="headerlink" title="全局路由前缀"></a>全局路由前缀</h3><p>上面链接的大佬有提过，在main.ts</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  app.<span class="title function_">setGlobalPrefix</span>(<span class="string">'api'</span>); <span class="comment">// 设置全局路由前缀</span></span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line">}</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></tbody></table></figure>
<p>此时之前的路由，都要变更为：<a href="http://localhost/api/xxxx">http://localhost/api/xxxx</a></p>
<h3 id="创建-USER-模块"><a href="#创建-USER-模块" class="headerlink" title="创建 USER 模块"></a>创建 USER 模块</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">nest g mo modules/user <span class="comment">//创建moudle</span></span><br><span class="line">nest g co modules/user <span class="comment">//创建控制器</span></span><br><span class="line">nest g s modules/user <span class="comment">//创建服务</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意创建顺序</strong>： 先创建<code>Module</code>, 再创建<code>Controller</code>和<code>Service</code>, 这样创建出来的文件在<code>Module</code>中自动注册，反之，后创建Module, <code>Controller</code>和<code>Service</code>,会被注册到外层的<code>app.module.ts</code></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7277a852f1447debd184e9127a8bcea~tplv-k3u1fbpfcp-watermark.image" alt="1678265171776.png"></p>
<h3 id="user表实体"><a href="#user表实体" class="headerlink" title="user表实体"></a>user表实体</h3><p>新建 user.entity.ts 实体，到时候可以通过<code>TypeORM</code>将实体映射到数据库表</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 用户实体类</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">Column</span>, <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span> } <span class="keyword">from</span> <span class="string">'typeorm'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">Exclude</span> } <span class="keyword">from</span> <span class="string">'class-transformer'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Entity</span>(<span class="string">'User'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserEntity</span> {</span><br><span class="line">  <span class="comment">// 用户id</span></span><br><span class="line">  @<span class="title class_">PrimaryGeneratedColumn</span>()</span><br><span class="line">  <span class="attr">id</span>: number; <span class="comment">// 标记为主列，值自动生成</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 昵称</span></span><br><span class="line">  @<span class="title class_">Column</span>({<span class="attr">default</span>:<span class="string">''</span>})</span><br><span class="line">  <span class="attr">nickname</span>: string;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//头像</span></span><br><span class="line">  @<span class="title class_">Column</span>({<span class="attr">default</span>:<span class="string">'https://i.postimg.cc/wjcFjQMD/b.png'</span>})</span><br><span class="line">  <span class="attr">avatar</span>: string;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 手机号</span></span><br><span class="line">  @<span class="title class_">Column</span>(<span class="string">'text'</span>)</span><br><span class="line">  <span class="attr">mobile</span>: string;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建时间</span></span><br><span class="line">  @<span class="title class_">Column</span>({ <span class="attr">type</span>: <span class="string">'timestamp'</span>, <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">'CURRENT_TIMESTAMP'</span> })</span><br><span class="line">  <span class="attr">create_time</span>: <span class="title class_">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新时间</span></span><br><span class="line">  @<span class="title class_">Column</span>({ <span class="attr">type</span>: <span class="string">'timestamp'</span>, <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">'CURRENT_TIMESTAMP'</span> })</span><br><span class="line">  <span class="attr">update_time</span>: <span class="title class_">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加密后的密码</span></span><br><span class="line">  @<span class="title class_">Column</span>(<span class="string">'text'</span>, { <span class="attr">select</span>: <span class="literal">false</span> })</span><br><span class="line">  <span class="attr">password</span>: string;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加密盐</span></span><br><span class="line">  @<span class="title class_">Column</span>(<span class="string">'text'</span>, { <span class="attr">select</span>: <span class="literal">false</span> })</span><br><span class="line">  <span class="attr">salt</span>: string;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="user-dto"><a href="#user-dto" class="headerlink" title="user.dto"></a>user.dto</h3><p><code>Nest.js</code>自带了三个开箱即用的管道：<code>ValidationPipe</code>、<code>ParseIntPipe</code>和<code>ParseUUIDPipe</code>, 其中<code>ValidationPipe</code> 配合<code>class-validator</code>就可以完美的实现我们想要的效果（对参数类型进行验证，验证失败抛出异常）。</p>
<p>新建user.dto.ts用于校验，完善错误提示信息</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">ApiProperty</span> } <span class="keyword">from</span> <span class="string">'@nestjs/swagger'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">IsNotEmpty</span> } <span class="keyword">from</span> <span class="string">'class-validator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RegisterDTO</span> {</span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'昵称'</span> })</span><br><span class="line">  readonly <span class="attr">nickname</span>: string;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'头像'</span> })</span><br><span class="line">  readonly <span class="attr">avatar</span>: string;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'手机号'</span> })</span><br><span class="line">  readonly <span class="attr">mobile</span>: string;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">IsNotEmpty</span>({ <span class="attr">message</span>: <span class="string">'密码没填'</span> })</span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'密码'</span> })</span><br><span class="line">  readonly <span class="attr">password</span>: string;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoginInfoDTO</span> {</span><br><span class="line">  @<span class="title class_">IsNotEmpty</span>({ <span class="attr">message</span>: <span class="string">'手机号没填'</span> })</span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'手机号'</span> })</span><br><span class="line">  readonly <span class="attr">mobile</span>: string;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">IsNotEmpty</span>({ <span class="attr">message</span>: <span class="string">'密码没填'</span> })</span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'密码'</span> })</span><br><span class="line">  readonly <span class="attr">password</span>: string;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="user控制层"><a href="#user控制层" class="headerlink" title="user控制层"></a>user控制层</h3><p>在user.controller.ts 控制层定义接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">Body</span>, <span class="title class_">Controller</span>, <span class="title class_">Post</span> } <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">ApiOperation</span> } <span class="keyword">from</span> <span class="string">'@nestjs/swagger'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserService</span> } <span class="keyword">from</span> <span class="string">'./user.service'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Controller</span>(<span class="string">'user'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private readonly userService:UserService</span>) {</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">//注册</span></span><br><span class="line">  @<span class="title class_">ApiOperation</span>({ <span class="attr">summary</span>: <span class="string">'注册用户'</span> })</span><br><span class="line">  @<span class="title class_">Post</span>(<span class="string">'register'</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params">@Body() createUser:any</span>) {</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">register</span>(createUser);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//登录</span></span><br><span class="line">  @<span class="title class_">ApiOperation</span>({ <span class="attr">summary</span>: <span class="string">'登录'</span> })</span><br><span class="line">  @<span class="title class_">Post</span>(<span class="string">'login'</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">@Body() loginInfo:any</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">login</span>(loginInfo);</span><br><span class="line">  }  </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="user业务层"><a href="#user业务层" class="headerlink" title="user业务层"></a>user业务层</h3><p>在user.service.ts写登录注册相关的业务逻辑</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">BadRequestException</span>, <span class="title class_">HttpException</span>, <span class="title class_">Injectable</span> } <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">InjectRepository</span> } <span class="keyword">from</span> <span class="string">'@nestjs/typeorm'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">Repository</span> } <span class="keyword">from</span> <span class="string">'typeorm'</span>;</span><br><span class="line"><span class="keyword">import</span> { encryptPassword, makeSalt } <span class="keyword">from</span> <span class="string">'utils/cryptogram'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">RegisterDTO</span> , <span class="title class_">LoginInfoDTO</span>} <span class="keyword">from</span> <span class="string">'./user.dto'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserEntity</span>} <span class="keyword">from</span> <span class="string">'./user.entity'</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">JwtService</span> } <span class="keyword">from</span> <span class="string">'@nestjs/jwt'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    @InjectRepository(UserEntity)</span></span><br><span class="line"><span class="params">    private readonly userRepository: Repository&lt;UserEntity&gt;,</span></span><br><span class="line"><span class="params">    private readonly jwtService: JwtService</span></span><br><span class="line"><span class="params">  </span>) {}</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 注册</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  mobile 手机号 </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  password 密码 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">register</span>(<span class="attr">createUser</span>:<span class="title class_">RegisterDTO</span>):<span class="title class_">Promise</span>&lt;any&gt;{</span><br><span class="line">      <span class="keyword">const</span> {mobile,password} = createUser;</span><br><span class="line">      <span class="keyword">if</span> (!mobile) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpException</span>(<span class="string">'入参缺少mobile'</span>, <span class="number">401</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">const</span> existUser = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">findOne</span>({<span class="attr">where</span>: {mobile}});</span><br><span class="line">      <span class="keyword">if</span> (existUser) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpException</span>(<span class="string">'该用户已注册'</span>, <span class="number">401</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">const</span> newUser = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">create</span>(createUser)</span><br><span class="line">      <span class="keyword">const</span> salt = <span class="title function_">makeSalt</span>(); <span class="comment">// 制作密码盐</span></span><br><span class="line">      <span class="keyword">const</span> hashPassword = <span class="title function_">encryptPassword</span>(password, salt);  <span class="comment">// 加密密码</span></span><br><span class="line">      newUser.<span class="property">password</span> = hashPassword</span><br><span class="line">      newUser.<span class="property">salt</span> = salt</span><br><span class="line">      <span class="comment">// this.userRepository.create(createUser)相当于new User(createUser)只是创建了一个新的用户对象</span></span><br><span class="line">      <span class="comment">// save方法才是执行插入数据</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">save</span>(newUser);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 登录检验</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  mobile 手机号 </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  password 密码 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">checkLoginForm</span>(<span class="attr">loginInfo</span>:<span class="title class_">LoginInfoDTO</span>):<span class="title class_">Promise</span>&lt;any&gt; {</span><br><span class="line">      <span class="keyword">const</span> {mobile,password} = loginInfo;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span></span><br><span class="line">        .<span class="title function_">createQueryBuilder</span>(<span class="string">'user'</span>)</span><br><span class="line">        .<span class="title function_">addSelect</span>(<span class="string">'user.salt'</span>)</span><br><span class="line">        .<span class="title function_">addSelect</span>(<span class="string">'user.password'</span>)</span><br><span class="line">        .<span class="title function_">where</span>(<span class="string">'user.mobile = :mobile'</span>, { mobile })</span><br><span class="line">        .<span class="title function_">getOne</span>()</span><br><span class="line">      <span class="keyword">if</span> (!user) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">'用户名不正确！'</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">const</span> currentHashPassword = <span class="title function_">encryptPassword</span>(password, user.<span class="property">salt</span>)</span><br><span class="line">      <span class="keyword">if</span> (currentHashPassword !== user.<span class="property">password</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">'密码错误'</span>)</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> user</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成token</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  UserEntity 用户实体类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">certificate</span>(<span class="params">user:UserEntity</span>){</span><br><span class="line">    <span class="keyword">const</span> payload = { </span><br><span class="line">      <span class="attr">id</span>: user.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">mobile</span>: user.<span class="property">mobile</span>,</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="property">jwtService</span>.<span class="title function_">sign</span>(payload);</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 登录</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="attr">loginInfo</span>:<span class="title class_">LoginInfoDTO</span>):<span class="title class_">Promise</span>&lt;any&gt; {</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">checkLoginForm</span>(loginInfo)</span><br><span class="line">    <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">certificate</span>(user)</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        token</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>其中需要注意jwt和user.entity的实体需要在user.module.ts中引入，然后把user.module暴露出去给app.module暴露出去给app导入，这样就建立了模块之间的关系，毕竟主模块是app.moudle</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">Module</span> } <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserController</span> } <span class="keyword">from</span> <span class="string">'./user.controller'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserService</span> } <span class="keyword">from</span> <span class="string">'./user.service'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">TypeOrmModule</span> } <span class="keyword">from</span> <span class="string">'@nestjs/typeorm'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserEntity</span> } <span class="keyword">from</span> <span class="string">'./user.entity'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">JwtModule</span> } <span class="keyword">from</span> <span class="string">'@nestjs/jwt'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Module</span>({</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">UserEntity</span>]),</span><br><span class="line">    <span class="title class_">JwtModule</span>.<span class="title function_">register</span>({</span><br><span class="line">      <span class="attr">secret</span>: <span class="string">'dasdjanksjdasd'</span>, <span class="comment">// 密钥</span></span><br><span class="line">      <span class="attr">signOptions</span>: { <span class="attr">expiresIn</span>: <span class="string">'8h'</span> }, <span class="comment">// token 过期时效</span></span><br><span class="line">    }),</span><br><span class="line">  ],</span><br><span class="line"> </span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> {}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><h3 id="注册成功"><a href="#注册成功" class="headerlink" title="注册成功"></a>注册成功</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ebcb18765764990937b444485bd0064~tplv-k3u1fbpfcp-watermark.image" alt="1678415253600.png"></p>
<h3 id="登录成功，返回token"><a href="#登录成功，返回token" class="headerlink" title="登录成功，返回token"></a>登录成功，返回token</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0c784a068a24e9e88e6d4f579306ddd~tplv-k3u1fbpfcp-watermark.image" alt="1678415198199.png"></p>
</body></html>]]></content>
      <categories>
        <category>项目搭建</category>
      </categories>
      <tags>
        <tag>Nest</tag>
      </tags>
  </entry>
  <entry>
    <title>在开发h5移动端项目（v3+vant3+pinia+vite）时遇到的问题总结(二)</title>
    <url>/2023/03/01/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%9C%A8%E5%BC%80%E5%8F%91h5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%EF%BC%88v3+vant3+pinia+vite%EF%BC%89%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93(%E4%BA%8C)/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h2 id="一、h5页面嵌套在小程序中时，系统设置了深色模式，会出现背景色冲突、深色文字显示异常，深色图标显示异常等一些显示上的问题。"><a href="#一、h5页面嵌套在小程序中时，系统设置了深色模式，会出现背景色冲突、深色文字显示异常，深色图标显示异常等一些显示上的问题。" class="headerlink" title="一、h5页面嵌套在小程序中时，系统设置了深色模式，会出现背景色冲突、深色文字显示异常，深色图标显示异常等一些显示上的问题。"></a>一、h5页面嵌套在小程序中时，系统设置了深色模式，会出现背景色冲突、深色文字显示异常，深色图标显示异常等一些显示上的问题。</h2><p>因为我司的项目，当时立项时并没有考虑适配深色模式，所以导致了这种情况<br>解决方式：</p>
<blockquote>
<p>在相应的受深色模式影响的页面最外层div加上css  background设置为白色（因为我司项目，背景基本是白色所以这样改能行，但应该是不是通用的），当时是快上线了，发现这个问题，急着上就没去整适配，只能用这种办法。</p>
</blockquote>
<p>具体的适配可以看看：<br><a href="https://juejin.cn/search?query=h5%E9%80%82%E9%85%8D%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F&amp;type=0">h5适配深色模式 - 搜索 - 掘金 (juejin.cn)</a></p>
<h2 id="二、前端文本复制功能的实现"><a href="#二、前端文本复制功能的实现" class="headerlink" title="二、前端文本复制功能的实现"></a>二、前端文本复制功能的实现</h2><p>安装&nbsp;<code>vue-clipboard3</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">$ npm install --save vue-clipboard3</span><br></pre></td></tr></tbody></table></figure>
<p>使用 <code>vue-clipboard3</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;button @click=<span class="string">"copy(复制的内容)"</span>&gt;复制的内容&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入插件</span></span><br><span class="line"><span class="keyword">import</span> useClipboard <span class="keyword">from</span> <span class="string">'vue-clipboard3'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { toClipboard } = <span class="title function_">useClipboard</span>() </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">copy</span> = <span class="keyword">async</span> (<span class="params">msg</span>) =&gt; { </span><br><span class="line">    <span class="keyword">try</span> { </span><br><span class="line">    <span class="comment">// 复制 await toClipboard(msg) </span></span><br><span class="line">    <span class="comment">// 复制成功 </span></span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">catch</span> (e) {</span><br><span class="line">    <span class="comment">// 复制失败 </span></span><br><span class="line">    } </span><br><span class="line">}   </span><br></pre></td></tr></tbody></table></figure>
<h2 id="三、v3-vant3的图片上传"><a href="#三、v3-vant3的图片上传" class="headerlink" title="三、v3+vant3的图片上传"></a>三、v3+vant3的图片上传</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-uploader</span><br><span class="line">       :after-read=<span class="string">"afterRead"</span></span><br><span class="line">       :before-read=<span class="string">"beforeRead"</span></span><br><span class="line">       :before-<span class="keyword">delete</span>=<span class="string">"beforeDelete"</span></span><br><span class="line">       v-model=<span class="string">"cardForm.imgList"</span></span><br><span class="line">       :max-count=<span class="string">"3"</span></span><br><span class="line">       preview-size=<span class="string">"2.4rem"</span></span><br><span class="line">       upload-text=<span class="string">"最多3张"</span></span><br><span class="line">     &gt;</span><br><span class="line">         <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">preview-delete</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"getAssetsFile('iconDelete.png')"</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">             <span class="attr">:style</span>=<span class="string">"{ width: $px2rem('18px'), height: $px2rem('18px')}"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">van-uploader</span>&gt;</span></span> </span><br></pre></td></tr></tbody></table></figure>
<p>js部分</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//图片上传前做判校验</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">beforeRead</span> = (<span class="params">file: any</span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> type = [<span class="string">'image/jpeg'</span> ,<span class="string">'image/png'</span>,<span class="string">'image/jpg'</span>]</span><br><span class="line">    <span class="keyword">const</span> isImage = type.<span class="title function_">includes</span>(file.<span class="property">type</span>)</span><br><span class="line">    <span class="keyword">const</span> isLt5M = file.<span class="property">size</span> / <span class="number">1024</span> /<span class="number">1024</span> &lt; <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span>(!isImage) {</span><br><span class="line">      <span class="title class_">Toast</span>(<span class="string">'请上传 jpg,png,jpeg 格式图片!'</span>);</span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">if</span>(!isLt5M) {</span><br><span class="line">      <span class="title class_">Toast</span>(<span class="string">'图片大小不能超过 5MB!'</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> isImage&amp;&amp;isLt5M</span><br><span class="line">  };</span><br><span class="line">  <span class="comment">//图片删除前</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">beforeDelete</span> = (<span class="params">file:any,i:any</span>) =&gt; {</span><br><span class="line">    <span class="title class_">PicListParams</span>.<span class="property">value</span>.<span class="title function_">splice</span>(i.<span class="property">index</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  };</span><br><span class="line">  <span class="comment">//图片上传服务器</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">afterRead</span> = <span class="keyword">async</span>(<span class="params">file: any</span>) =&gt; {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">    file.<span class="property">status</span> = <span class="string">'uploading'</span>;</span><br><span class="line">    file.<span class="property">message</span> = <span class="string">'上传中...'</span>;</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">'file'</span>, file.<span class="property">file</span>);</span><br><span class="line">    <span class="comment">//调用图片上传的接口</span></span><br><span class="line">    <span class="comment">//成功 file.status = 'none';并把返回的图片push</span></span><br><span class="line">    <span class="comment">//失败 file.status = 'fail'</span></span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure>


<h2 id="四、vant3表单使用textarea-autosize完成表单高度的自适应时，出现滚动条"><a href="#四、vant3表单使用textarea-autosize完成表单高度的自适应时，出现滚动条" class="headerlink" title="四、vant3表单使用textarea+autosize完成表单高度的自适应时，出现滚动条"></a>四、vant3表单使用textarea+autosize完成表单高度的自适应时，出现滚动条</h2><p>解决方式：给vant3的表单的van-field__control加上 overflow-y: hidden</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">::v-<span class="title function_">deep</span>(<span class="params">.van-field__control</span>) {</span><br><span class="line">  overflow-<span class="attr">y</span>: hidden;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="五、localstorage只能存字符串，存对象时需要转化成json格式，用时记得转化回来"><a href="#五、localstorage只能存字符串，存对象时需要转化成json格式，用时记得转化回来" class="headerlink" title="五、localstorage只能存字符串，存对象时需要转化成json格式，用时记得转化回来"></a>五、localstorage只能存字符串，存对象时需要转化成json格式，用时记得转化回来</h2><blockquote>
<p>这个其实自己一直知道这个知识点，平时也嘎嘎在用，但是开发着开发着突然不知怎么脑袋抽筋了，忘转化了，导致localstorage.getItem获取的值一直没取到，第一时间还没考虑到是localstorage的原因，浪费了一些时间找问题所在，本来不想把这个当笔记记录的，但是为了让自己涨涨记性还是记下来。</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> object = <span class="title function_">reactive</span>({</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'涨涨'</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">})</span><br><span class="line"><span class="comment">//用localstorage存值时</span></span><br><span class="line">locastorage.<span class="title function_">setItem</span>(<span class="string">'object'</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(object))</span><br><span class="line"></span><br><span class="line"><span class="comment">////用localstorage取值时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">JosnObject1</span> = locastorage.<span class="title function_">getItem</span>(<span class="string">'object'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Object1</span> = <span class="title class_">Json</span>.<span class="title function_">parse</span>(<span class="title class_">JosnObject1</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="六、小程序返回使用H5页面返回-放弃小程序自带返回按钮"><a href="#六、小程序返回使用H5页面返回-放弃小程序自带返回按钮" class="headerlink" title="六、小程序返回使用H5页面返回,放弃小程序自带返回按钮"></a>六、小程序返回使用H5页面返回,放弃小程序自带返回按钮</h2><p>最开始准备在小程序上使用自定义导航栏，但是自定义导航栏并不生效，取官网才发现：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10323754a9114124b25c6d7cc84749e2~tplv-k3u1fbpfcp-watermark.image" alt="企业微信截图_16762707878468.png"></p>
<blockquote>
<p>既然设置不了自定义导航栏，而webview组件又自带导航，我又要放弃小程序自带返回按钮，于是另辟蹊径，webview组件自带导航栏背景颜色是白色，那我把返回按钮和文字都设置为白色，这样就看不到了，用户要点应该也不会取点一个看不到的返回按钮</p>
</blockquote>
<p>在小程序的page.json，对应的weiview的页面设置：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">        <span class="string">"path"</span>: <span class="string">"webview/index"</span>,</span><br><span class="line">        <span class="string">"style"</span>: {</span><br><span class="line">          <span class="string">"navigationBarTextStyle"</span>: <span class="string">"white"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="七、小程序嵌套h5项目时（使用的webview），从h5返回解决方式"><a href="#七、小程序嵌套h5项目时（使用的webview），从h5返回解决方式" class="headerlink" title="七、小程序嵌套h5项目时（使用的webview），从h5返回解决方式"></a>七、小程序嵌套h5项目时（使用的webview），从h5返回解决方式</h2><blockquote>
<p> 最开始把这个逻辑分析下，不就是h5跳小程序吗？调接口跳转就行了，但去官网看了看因为使用的webview嵌套在小程序中，返回小程序提供了专门的API，调接口跳小程序真的是脱裤子放屁，多此一举（手动狗头）</p>
</blockquote>
<p>解决方式：<br>在项目的index.html中引入微信官方提供的js-jdk，，就可以在页面中使用和&nbsp;<strong>微信相关的 API</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.3.2.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">wx.<span class="property">miniProgram</span>.<span class="title function_">navigateBack</span>() </span><br></pre></td></tr></tbody></table></figure>

<h2 id="八、在微信小程序中使用webview嵌套h5，跳转三方后，从三方返回到自己的h5页面时原本存在locastorage和sessionstorage里的数据全没了"><a href="#八、在微信小程序中使用webview嵌套h5，跳转三方后，从三方返回到自己的h5页面时原本存在locastorage和sessionstorage里的数据全没了" class="headerlink" title="八、在微信小程序中使用webview嵌套h5，跳转三方后，从三方返回到自己的h5页面时原本存在locastorage和sessionstorage里的数据全没了"></a>八、在微信小程序中使用webview嵌套h5，跳转三方后，从三方返回到自己的h5页面时原本存在locastorage和sessionstorage里的数据全没了</h2><p>原因分析：</p>
<h3 id="微信小程序中的-WebView"><a href="#微信小程序中的-WebView" class="headerlink" title="微信小程序中的 WebView"></a>微信小程序中的 WebView</h3><p>小程序的主要开发语言是&nbsp;<strong><code>JavaScript</code></strong>&nbsp;，其中&nbsp;<strong>逻辑层</strong>&nbsp;和&nbsp;<strong>渲染层</strong>&nbsp;是分开的，分别运行在不同的线程中，而其中的渲染层就是运行在&nbsp;<strong><code>WebView</code></strong>&nbsp;上：</p>
<table>
<thead>
<tr>
<th>运行环境</th>
<th>逻辑层</th>
<th>渲染层</th>
</tr>
</thead>
<tbody><tr>
<td>iOS</td>
<td>JavaScriptCore</td>
<td>WKWebView</td>
</tr>
<tr>
<td>安卓</td>
<td>V8</td>
<td>chromium 定制内核</td>
</tr>
<tr>
<td>小程序开发者工具</td>
<td>NWJS</td>
<td>Chrome WebView</td>
</tr>
</tbody></table>
<ul>
<li>  在真机中，需要实现同一域名下不同子路径的应用实现数据交互（纯前端操作，不涉及接口），由于同域名且是基于同一个页面进行跳转的（当然只是看起来是），而且这个数据是&nbsp;<strong>临时数据</strong>，因此觉得使用&nbsp;<strong><code>sessionStorage</code></strong>&nbsp;实现数据交互是很合适的</li>
<li>  实际上从&nbsp;<strong>A 应用</strong>&nbsp;跳转到&nbsp;<strong>B 应用</strong>&nbsp;中却无法获取对应的数据，而这是因为&nbsp;<strong>sessionStorage</strong>&nbsp;是基于当前窗口的会话级的数据存储，<strong>移动端浏览器</strong>&nbsp;或&nbsp;<strong>微信内置浏览器</strong>&nbsp;中在跳转新页面时，可能打开的是一个新的&nbsp;<strong>WebView</strong>，这就相当于我们在浏览器中的一个新窗口中进行存储，因此是没办法读取在之前的窗口中存储的数据</li>
</ul>
<p>解决方式：<br>存了的东西没了，就想办法从三方回来时再存一遍呗。</p>
<h2 id="九、vite获取环境变量遇到的坑"><a href="#九、vite获取环境变量遇到的坑" class="headerlink" title="九、vite获取环境变量遇到的坑"></a>九、vite获取环境变量遇到的坑</h2><blockquote>
<p>在根目录下的.env.prod文件中定义了需要的各种变量，其中定义了NODE_ENV和VITE_APP_ENV用来获取环境变量,发现import.meta.env.NODE_ENV为undefined，于是去官网看了看，只有VITE_前缀的变量才获取的到</p>
</blockquote>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable constant_">NODE_ENV</span> = <span class="string">'production'</span></span><br><span class="line"><span class="variable constant_">VITE_APP_ENV</span>= <span class="string">'production'</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">conlose.<span class="title function_">log</span>(<span class="string">'import.meta.env.VITE_APP_ENV'</span>,<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_ENV</span>)  <span class="comment">// 'production'</span></span><br><span class="line">conlose.<span class="title function_">log</span>(<span class="string">'import.meta.env.NODE_ENV '</span>,<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">NODE_ENV</span> ) <span class="comment">//undefined</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6257bd202c914c5198711539059f064a~tplv-k3u1fbpfcp-watermark.image" alt="d2a09598800238e6e9cbedfe0e79596.png"></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>H5项目，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的css函数式伪类</title>
    <url>/2023/02/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E7%9A%84css%E5%87%BD%E6%95%B0%E5%BC%8F%E4%BC%AA%E7%B1%BB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p> 能用css一步解决的，尽量少用js，一些合适的 CSS 甚至能让我们少写很多 JS，之前在工作中遇到了一个问题，本来准备用js实现的，在百度娘的科普下，使用某个CSS 函数式伪类就能实现，发现比自己预想的使用js方便多了，于是我就来多多了解了解一些常用的CSS 函数式伪类，此文做个笔记！（如有雷同，纯属抄袭，手动狗头）</p>
</blockquote>
<h2 id="一、逻辑组合-伪类"><a href="#一、逻辑组合-伪类" class="headerlink" title="一、逻辑组合 伪类"></a>一、逻辑组合 伪类</h2><h3 id="1-：not"><a href="#1-：not" class="headerlink" title="1. ：not"></a>1. ：not</h3><blockquote>
<p><code>:not</code> 匹配不符合一组选择器的元素。</p>
</blockquote>
<p>例如一个场景，每个列表项需要添加下边框线，一般最后一项是不需要的。通常我们会为每一项都设置下边框线，再单独设置最后一项的 <code>border-bottom</code> 为 0。使用 <code>:not</code> 也可以实现。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) {</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-has"><a href="#2-has" class="headerlink" title="2. :has"></a>2. :has</h3><blockquote>
<p><code>:has</code> 表示满足一定条件后，就会匹配该元素。这个据说是几十年来最激动人心的CSS发展<code>开发人员终于有了一种针对父元素的方法</code>。</p>
</blockquote>
<p>例如一个场景，在必填项的前面加上红色的星号</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">label</span><span class="selector-pseudo">:has</span>(+<span class="selector-tag">input</span><span class="selector-pseudo">:required</span>)<span class="selector-pseudo">::before</span>{</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">'*'</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>例如:父元素里有某个子元素时改变父元素的高</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">.<span class="property">father</span> :<span class="title function_">has</span>(<span class="params">.son</span>) {</span><br><span class="line">  <span class="attr">height</span>: 300px</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-is"><a href="#3-is" class="headerlink" title="3. :is"></a>3. :is</h3><blockquote>
<p>可以匹配一组选择器中的任意一个或多个，并把最终的选择器视为匹配到的那一个。<code>:is()</code>伪类函数<strong>大幅度缩减了选择器列表的字符数，简化了选择器列表的复杂度，降低了书写选择器列表出错的概率</strong>，注意<code>:is()</code> 不能与<code>::before</code> 和<code>::after</code> 伪元素相匹配</p>
</blockquote>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.test</span>&gt;<span class="selector-tag">img</span>,<span class="selector-class">.test1</span>&gt;<span class="selector-tag">img</span>,<span class="selector-class">.test2</span>&gt;<span class="selector-tag">img</span>,<span class="selector-class">.test3</span>&gt;<span class="selector-tag">img</span>{}</span><br></pre></td></tr></tbody></table></figure>
<p>上面的可简化为：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">:<span class="title function_">is</span>(.<span class="property">test</span>,.<span class="property">test1</span>,.<span class="property">tes2</span>,.<span class="property">test3</span>)&gt;img{}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-empty"><a href="#4-empty" class="headerlink" title="4. :empty"></a>4. :empty</h3><blockquote>
<p><code>:empty</code> 匹配没有子元素的元素。有时候列表的外层会包一层盒子，设置 padding 边距。当列表无数据返回时，外层盒子的 padding 会占用空间，使用 <code>:empty</code> 匹配无子元素时隐藏盒子，解决占用位置的问题。</p>
</blockquote>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>{</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.wrapper</span>:emtry{</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="二、用户行为-伪类"><a href="#二、用户行为-伪类" class="headerlink" title="二、用户行为 伪类"></a>二、用户行为 伪类</h2><h3 id="1-hover"><a href="#1-hover" class="headerlink" title="1. :hover"></a>1. :hover</h3><blockquote>
<p><code>selector:hover</code> 表示匹配鼠标经过的selector选择器元素。**:hover不是特备适用于移动端，虽然也能触发，但消失并不敏捷，体验反而奇怪。**</p>
</blockquote>
<p>例如：鼠标经过元素时的样式变化，Tips提示，下拉列表和过渡动画等</p>
<h3 id="2-active"><a href="#2-active" class="headerlink" title="2. :active"></a>2. :active</h3><blockquote>
<p><code>selector:active</code> 表示匹配激活状态的selector选择器元素（通过鼠标主键点击或触屏触摸的过程中触发样式，结束后还原样式），支持任意html元素</p>
</blockquote>
<h3 id="3-focus"><a href="#3-focus" class="headerlink" title="3. :focus"></a>3. :focus</h3><blockquote>
<p><code>selector:focus</code> 表示匹配聚焦状态的selector选择器元素。</p>
</blockquote>
<p>例如：表单聚焦改变样式</p>
<h3 id="4-focus-within"><a href="#4-focus-within" class="headerlink" title="4. :focus-within"></a>4. :focus-within</h3><blockquote>
<p><code>selector:focus-within</code> 表示当前selector选择器元素或者其子元素聚焦时都会匹配（而focus只会匹配对应元素本身）</p>
</blockquote>
<p>例如：form表单中任一表单元素聚集时让所有表单元素前面文字高亮</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">form</span><span class="selector-pseudo">:focus</span>-within <span class="selector-tag">label</span>{ <span class="attribute">color</span>:darkblue; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>; }</span><br></pre></td></tr></tbody></table></figure>

<h2 id="三、树结构伪类-伪类"><a href="#三、树结构伪类-伪类" class="headerlink" title="三、树结构伪类 伪类"></a>三、树结构伪类 伪类</h2><h3 id="1-root"><a href="#1-root" class="headerlink" title="1. :root"></a>1. :root</h3><blockquote>
<p>该伪类匹配的就是html根元素标签。由于现如今浏览器对CSS变量的支持，对于类似整站颜色，布局尺寸这样的变量，业界约定俗成<code>变量由:root伪类负责，而html选择器负责样式</code>。</p>
</blockquote>
<h3 id="2-first-child和-last-child"><a href="#2-first-child和-last-child" class="headerlink" title="2.:first-child和:last-child"></a>2.:first-child和:last-child</h3><blockquote>
<p><code>selector:first-child</code> 表示匹配作为其父元素的第一个子元素的selector元素</p>
</blockquote>
<blockquote>
<p><code>selector:last-child</code> 表示匹配作为其父元素的最后一个子元素的selector元素</p>
</blockquote>
<p>对列表元素的第一个/最后一个子元素的通用样式的重置。例如：最后一个子元素和第一个元素不要底部边框。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">li</span>:first-child{ border-<span class="attr">bottom</span>:none }</span><br><span class="line"><span class="attr">li</span>:last-child{ border-<span class="attr">bottom</span>:none }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-nth-child-和nth-last-child"><a href="#3-nth-child-和nth-last-child" class="headerlink" title="3. :nth-child()和nth-last-child()"></a>3. :nth-child()和nth-last-child()</h3><blockquote>
<p><code>selector:nth-child(n)</code> 表示匹配第n个子元素的selector元素</p>
</blockquote>
<blockquote>
<p><code>selector:nth-last-child(n)</code> 表示匹配从后往前数的第n个子元素的selector元素</p>
</blockquote>
<blockquote>
<ul>
<li><p>  <code>selector:nth-child(odd或even)</code>表示匹配作为其父元素的第奇数/偶数个子元素的selector元素</p>
</li>
<li><p><code>selector:nth-child(An+B)</code>表示匹配符合对应规则的子元素。</p>
<p>  其中A，B，n均为不为负的整数，但A前面可以添加负号。</p>
</li>
</ul>
</blockquote>
<p>示例：</p>
<pre><code> nth-child(5n)匹配第5，10，15...个子元素
 
 nth-child(3n+4)匹配第4，7，10...个子元素
 
 nth-child(-n+3)匹配前3个子元素
 
 nth-last-child(-n+3)匹配最后3个子元素
</code></pre>
<h3 id="4-first-of-type和-last-of-type"><a href="#4-first-of-type和-last-of-type" class="headerlink" title="4. :first-of-type和:last-of-type"></a>4. :first-of-type和:last-of-type</h3><blockquote>
<p><code>selector:first-of-type</code> 表示匹配与selector元素标签类型一致的第一个子元素</p>
</blockquote>
<blockquote>
<p><code>selector:last-of-type</code> 表示匹配与selector元素标签类型一致的最后一个子元素</p>
</blockquote>
<h3 id="5-nth-of-type-和nth-last-of-type"><a href="#5-nth-of-type-和nth-last-of-type" class="headerlink" title="5. :nth-of-type()和nth-last-of-type()"></a>5. :nth-of-type()和nth-last-of-type()</h3><blockquote>
<p><code>selector:nth-of-type(n)</code> 表示匹配与selector元素标签类型一致的子元素集合里第n个子元素</p>
</blockquote>
<blockquote>
<p><code>selector:nth-last-of-type(n)</code> 表示与selector元素标签类型一致的子元素集合里的从后往前数的第n个子元素</p>
</blockquote>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://juejin.cn/post/6943213394694504461#heading-25">CSS常用伪类选择器详解 - 掘金 (juejin.cn)</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>伪类</tag>
      </tags>
  </entry>
  <entry>
    <title>js常用方法</title>
    <url>/2023/02/10/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%A4%8D%E4%B9%A0%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[<html><head></head><body><h2 id="一、对象和字符串常用的方法"><a href="#一、对象和字符串常用的方法" class="headerlink" title="一、对象和字符串常用的方法"></a>一、对象和字符串常用的方法</h2><h3 id="字符串常用的方法"><a href="#字符串常用的方法" class="headerlink" title="字符串常用的方法"></a>字符串常用的方法</h3><p>1.indexOf()： 检索字符串，返回的是字符在字符串的下标</p>
<p>2.concat()：连接字符串</p>
<p>3.match()：在字符串内检索指定的值或找到一个或多个正则表达式的匹配，返回的是值而不是值的位置。</p>
<p>4.replace()：替换匹配的字符串</p>
<p>5.search()：检索与字符串匹配的子串，返回的是第一个字符所在的位置</p>
<p>6.split()：把字符分割成数组</p>
<p>7.substr()：从起始索引号提取字符串中指定书目的字符</p>
<h3 id="对象常用的方法"><a href="#对象常用的方法" class="headerlink" title="对象常用的方法"></a>对象常用的方法</h3><p>1.Object.assign()</p>
<p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。常用来合并对象。</p>
<p>assign其实是浅拷贝而不是深拷贝，如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const obj1 = { a: 1, b: 2 }</span><br><span class="line">const obj2 = { b: 4, c: 5 }</span><br><span class="line">const obj3 = Object.assign(obj1, obj2)</span><br><span class="line">const obj4 = Object.assign({}, obj1) // 克隆了obj1对象</span><br></pre></td></tr></tbody></table></figure>

<p>2.Object.keys() 对象的下标</p>
<p>3.Object.values() 对象的值</p>
<p>3.is方法和（===）功能基本类似，用于判断两个值是否绝对相等。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Object.is(1,1);//true</span><br><span class="line">Object.is(1,true);//false</span><br><span class="line">Object.is([],[]);//false</span><br><span class="line">Object.is(+0,-0);//false</span><br><span class="line">Object.is(NaN,NaN);//true</span><br></pre></td></tr></tbody></table></figure>
<h2 id="二、javascript高阶函数"><a href="#二、javascript高阶函数" class="headerlink" title="二、javascript高阶函数"></a>二、javascript高阶函数</h2><h3 id="1-map"><a href="#1-map" class="headerlink" title="1.map()"></a>1.map()</h3><p>定义：map()方法定义在JavaScript的Array中，它返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。</p>
<p>注意：map()不会对空数组进行检测，map()不会改变原始数组</p>
<p>语法：array.map(function(currentValue, index, arr), thisIndex)</p>
<p>参数说明：</p>
<p>currentValue：必须。当前元素的的值。 index：可选。当前元素的索引。 arr：可选。当前元素属于的数组对象。</p>
<p>thisIndex：可选。对象作为该执行回调时使用，传递给函数，用作”this”的值。</p>
<h3 id="2-reduce"><a href="#2-reduce" class="headerlink" title="2.reduce"></a>2.reduce</h3><p>定义：reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</p>
<p>注意: reduce() 对于空数组是不会执行回调函数的和map一样。</p>
<p>语法：array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</p>
<p>参数说明：</p>
<p>total 必需。初始值, 或者计算结束后的返回值。 currentValue 必需。当前元素 currentIndex 可选。当前元素的索引 arr 可选。当前元素所属的数组对象。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">totalAge = users.reduce((total, user) =&gt; user.age + total, 0);</span><br><span class="line">console.log(totalAge);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-filter"><a href="#3-filter" class="headerlink" title="3.filter"></a>3.filter</h3><p>定义：filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>
<p>注意： filter() 不会对空数组进行检测。</p>
<p>注意： filter() 不会改变原始数组。</p>
<p>语法 array.filter(function(currentValue,index,arr), thisValue)</p>
<p>参数说明：</p>
<p>currentValue 必须。当前元素的值 index 可选。当前元素的索引值 arr 可选。当前元素属于的数组对象</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">startsWithB = (string) =&gt; string.toLowerCase().startsWith('b');</span><br><span class="line">namesStartingWithB = users.filter((user) =&gt; startsWithB(user.name));</span><br><span class="line">console.log(namesStartingWithB);</span><br><span class="line">// [{ "name": "Bill", "age": 20 }]</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>前端随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>前端打印功能的实现</title>
    <url>/2023/01/14/%E7%BB%84%E4%BB%B6/%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前端打印功能的实现"><a href="#前端打印功能的实现" class="headerlink" title="前端打印功能的实现"></a>前端打印功能的实现</h1><h2 id="1-安装与使用"><a href="#1-安装与使用" class="headerlink" title="1.安装与使用"></a>1.安装与使用</h2><h3 id="Vue2-Version"><a href="#Vue2-Version" class="headerlink" title="Vue2 Version:"></a>Vue2 Version:</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install vue-print-nb --save</span><br><span class="line"></span><br><span class="line">// Global instruction  main.js中全局引入</span><br><span class="line">import Print from 'vue-print-nb'</span><br><span class="line">Vue.use(Print);</span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line">// Local instruction</span><br><span class="line">import print from 'vue-print-nb'</span><br><span class="line"></span><br><span class="line">directives: {</span><br><span class="line">    print   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Vue3-Version"><a href="#Vue3-Version" class="headerlink" title="Vue3 Version:"></a>Vue3 Version:</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install vue3-print-nb --save</span><br><span class="line">// Global instruction </span><br><span class="line">import { createApp } from 'vue'</span><br><span class="line">import App from './App.vue'</span><br><span class="line">import print from 'vue3-print-nb'</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(print)</span><br><span class="line">app.mount('#app')</span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line"></span><br><span class="line">// Local instruction</span><br><span class="line">import print from 'vue3-print-nb'</span><br><span class="line"></span><br><span class="line">directives: {</span><br><span class="line">    print   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"printTest"</span>&gt;</span>    </span><br><span class="line">    打印测试 <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-print</span>=<span class="string">"'#printTest'"</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-页眉页脚字符串问题"><a href="#2-页眉页脚字符串问题" class="headerlink" title="2.页眉页脚字符串问题"></a>2.页眉页脚字符串问题</h2><p>打印预览时发现页眉页脚会有页码 网址 undefined之类的字符</p>
<ol>
<li>直接利用样式解决，优点是简单粗暴，缺点是页面的上下边距都不存在了，就没有页面的上下留白了，看着打印出来的内容上下边距太窄 像下图设置为3mm就隐藏掉了页眉页脚</li>
</ol>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 打印媒体查询</span></span><br><span class="line"><span class="keyword">@media</span> print {</span><br><span class="line">  <span class="keyword">@page</span>{</span><br><span class="line">      size:  auto;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">3mm</span>;</span><br><span class="line">	}	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-打印时内容显示不全问题"><a href="#3-打印时内容显示不全问题" class="headerlink" title="3.打印时内容显示不全问题"></a>3.打印时内容显示不全问题</h2><p>在实际页面中高度不够部分内容隐藏了，这时候需要将对应块的内容为隐藏滚动的内容显示为全显示，打印时隐藏的内容并不会打印，只会打印到页面直接展示出来的内容</p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 打印媒体查询</span></span><br><span class="line"><span class="keyword">@media</span> print {</span><br><span class="line">  <span class="keyword">@page</span>{</span><br><span class="line">      size:  auto;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">3mm</span>;</span><br><span class="line">	}</span><br><span class="line"> <span class="selector-tag">body</span>{ </span><br><span class="line">		<span class="attribute">height</span>:auto;  <span class="comment">//在实际页面中高度不够部分内容隐藏了</span></span><br><span class="line">  }	   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-打印时样式消失了"><a href="#4-打印时样式消失了" class="headerlink" title="4.打印时样式消失了"></a>4.打印时样式消失了</h2><p>样式消失了的根本原因是写在打印内容外层的样式以及使用的一些框架的样式没有 在打印时 拿到的实际是打印块的iframe内容，如果明知道这块的内容需要打印，表格或者块内容不要使用任何UI框架以及其它外部scss或者less的内容,外部的类名拿不到，里面的所有样式拿不到， 要么单独根据api写上引入的样式地址，直方便便捷的方式是内联样式或者是写内部样式</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"printTest"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"print-style"</span>&gt;</span>打印的相关内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">   .box { } //无效</span><br><span class="line">   #printTest { } //无效</span><br><span class="line">	.print-style { } //写在这里的有效果</span><br><span class="line"> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="5-打印时需要根据内容分页及内容添加水印"><a href="#5-打印时需要根据内容分页及内容添加水印" class="headerlink" title="5.打印时需要根据内容分页及内容添加水印"></a>5.打印时需要根据内容分页及内容添加水印</h3><p>打印时如果有多个表格或者多个内容块，可以通过计算进行分以及给每一页添加水印 实际情况根据设置按需调整</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id="printTest"&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class="printPage printMark"  v-for="item in <span class="number">5</span>" :key=<span class="string">"item"</span> &gt;</span><br><span class="line">      打印的相关内容</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> &lt;div&gt;     </span><br><span class="line"></span><br><span class="line">// 打印媒体查询</span><br><span class="line">@media print {</span><br><span class="line">  <span class="keyword">@page</span>{</span><br><span class="line">      size:  auto;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">3mm</span>;</span><br><span class="line">   }</span><br><span class="line">  <span class="selector-tag">body</span>{ </span><br><span class="line">	<span class="attribute">height</span>:auto; </span><br><span class="line">  }</span><br><span class="line">  <span class="selector-class">.printPage</span> {   </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">291mm</span>;   //分页  根据实际</span><br><span class="line">    <span class="attribute">position</span>: relative; </span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span> {</span><br><span class="line">        <span class="attribute">position</span>: absolute; <span class="attribute">content</span>: <span class="string">'xx水印'</span>; <span class="attribute">top</span>:<span class="number">20%</span>; <span class="attribute">right</span>: <span class="number">5%</span>;  <span class="attribute">font-size</span>: <span class="number">48px</span>; <span class="attribute">opacity</span>: <span class="number">0.1</span>;  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">    }</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> {</span><br><span class="line">        <span class="attribute">position</span>: absolute; <span class="attribute">content</span>: <span class="string">'xx水印'</span>; <span class="attribute">bottom</span>:<span class="number">20%</span>; <span class="attribute">left</span>: <span class="number">5%</span>;  <span class="attribute">font-size</span>: <span class="number">48px</span>; <span class="attribute">opacity</span>: <span class="number">0.1</span>;  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">    }</span><br><span class="line">  }	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h1><p><a href="https://github.com/topics/vue-print-nb">vue-print-nb · GitHub Topics</a></p>
<p><a href="https://www.jianshu.com/p/4aad98b96771">vue 打印 vue-print-nb - 简书 (jianshu.com)</a></p>
</body></html>]]></content>
      <categories>
        <category>组件</category>
      </categories>
      <tags>
        <tag>组件封装</tag>
      </tags>
  </entry>
  <entry>
    <title>在开发h5移动端项目（v3+vant3+pinia+vite）时遇到的问题总结</title>
    <url>/2022/12/30/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%9C%A8%E5%BC%80%E5%8F%91h5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%EF%BC%88v3+vant3+pinia+vite%EF%BC%89%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="一-移动端适配和适配后内联样式没有生效"><a href="#一-移动端适配和适配后内联样式没有生效" class="headerlink" title="一.移动端适配和适配后内联样式没有生效"></a>一.移动端适配和适配后内联样式没有生效</h1><h2 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h2><blockquote>
<p>既然是整移动端项目，那么移动端适配是必须要整了，目前开发的这个项目就是使用的是<code>rem方案</code>，<code>rem方案</code>的话比较常用的插件就是postcss-pxtorem+lib-flexible，至于为什么没用<code>vw方案</code>, vw 方案 还是有缺点的。如 <code>vw 方案</code><strong>不适合大屏</strong>，因为 vw 是一个比例单位，随着屏幕尺寸变大，使用vw单位的元素、字体也越来越大。但我们肯定是希望在大屏上展示更多的内容，而不是更大的文字、图标。现在用大屏的用户也是挺多的，我自己感觉还是<code>rem方案</code>好一点点（手动狗头）</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">yarn add amfe-flexible</span><br><span class="line">yarn add -D postcss-pxtorem</span><br></pre></td></tr></tbody></table></figure>
<p>根目录下postcss.config.cjs</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">    <span class="attr">plugins</span>: {</span><br><span class="line">      <span class="string">'postcss-pxtorem'</span>: {</span><br><span class="line">        <span class="comment">//如果你蓝湖上的UI图尺寸为375px，这里rootValue设置为37.5</span></span><br><span class="line">        <span class="comment">//如果你蓝湖上的UI图尺寸为750px，这里rootValue设置为75</span></span><br><span class="line">        <span class="comment">//蓝湖上的UI图的尺寸可以调节的，移动端一般用的37.5</span></span><br><span class="line">        <span class="attr">rootValue</span>: <span class="number">37.5</span>,</span><br><span class="line">        <span class="attr">propList</span>: [<span class="string">'*'</span>],</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>main.ts中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'amfe-flexible'</span>;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="内联样式没有生效"><a href="#内联样式没有生效" class="headerlink" title="内联样式没有生效"></a>内联样式没有生效</h2><blockquote>
<p><em><strong>整完这些后，开发着开发着，用vant样式没事，自己写的样式也嘎嘎生效，突然有个dom元素需要加个动态样式，或者图片需要设置宽高，这就需要使用到内联样式，然后就发现了设置的内联样式不生效，弔！</strong></em></p>
</blockquote>
<p>解决方法也挺简单，就是在main.ts中定义一个全局方法，用来把px转化成rem：<br>main.ts中加上</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">px2rem</span> = (<span class="params">px:any</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/%/ig</span>.<span class="title function_">test</span>(px)){ <span class="comment">// 有百分号%，特殊处理，表述pc是一个有百分号的数，比如：90%</span></span><br><span class="line">      <span class="keyword">return</span> px</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">parseFloat</span>(px) / <span class="number">37.5</span>) + <span class="string">'rem'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$px2rem</span> = px2rem <span class="comment">// 放到全局</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div :style=<span class="string">"{marginBottom:(ismarginBottom? $px2rem('42px'):$px2rem('16px'))}"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="二-H5-IOS-input-聚焦时，页面整个被推上去了，键盘收起页面未下移-BUG"><a href="#二-H5-IOS-input-聚焦时，页面整个被推上去了，键盘收起页面未下移-BUG" class="headerlink" title="二.H5 IOS input 聚焦时，页面整个被推上去了，键盘收起页面未下移 BUG"></a>二.H5 IOS input 聚焦时，页面整个被推上去了，键盘收起页面未下移 BUG</h1><h2 id="遇见的场景"><a href="#遇见的场景" class="headerlink" title="遇见的场景"></a>遇见的场景</h2><p><a href="https://so.csdn.net/so/search?q=vue&amp;spm=1001.2101.3001.7020">vue</a>基于vant3框架开发移动端项目时，出现了这样一个问题：<code>在手机上点击页面输入框时唤起手机自带键盘，结果顶部固定的导航栏也被顶起，导致遮挡住页面部分内容</code></p>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>给相应的输入框一个聚焦的事件:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-field</span><br><span class="line">   v-model=<span class="string">"cardForm.topUpamount"</span></span><br><span class="line">   label=<span class="string">"￥"</span></span><br><span class="line">   :rules=<span class="string">"rulesFrom.amount"</span></span><br><span class="line">   placeholder=<span class="string">""</span></span><br><span class="line">   :clearable=<span class="string">"true"</span></span><br><span class="line">   type=<span class="string">"number"</span></span><br><span class="line">   @focus=<span class="string">"changefocus"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>这个可以放在utils的index.ts下，导出这个方法，在需要的页面使用</p>
<p>如果这个输入框不是在vant组件的弹窗：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ios键盘唤起，键盘收起以后页面不归位bug解决</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changefocus</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">   <span class="keyword">const</span> u = navigator.<span class="property">userAgent</span></span><br><span class="line">   <span class="keyword">const</span> isIOS = !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class="line">     <span class="keyword">if</span>(isIOS){</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">         <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">         }, <span class="number">200</span>)</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>
<p>如果这个输入框是在vant组件的弹窗，例如动作面板弹窗：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ios键盘唤起，键盘收起以后页面不归位bug解决</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changefocus</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> u = navigator.<span class="property">userAgent</span>;</span><br><span class="line">  <span class="keyword">const</span> isIOS = !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class="line">  <span class="keyword">if</span> (isIOS) {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">    }, <span class="number">200</span>);</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeblur</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> u = navigator.<span class="property">userAgent</span>;</span><br><span class="line">  <span class="keyword">const</span> isIOS = !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class="line">  <span class="keyword">if</span> (isIOS) {</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<h1 id="三-状态调接口轮询"><a href="#三-状态调接口轮询" class="headerlink" title="三.状态调接口轮询"></a>三.状态调接口轮询</h1><blockquote>
<p>如充值，提现这种场景时，三方那边返回的结果可能需要比较久，这个时候就需要轮询着去结果，根据轮询的结果展示不同的需要展示的页面，如充值中，充值成功，失败等</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">timer</span>: any = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">Result</span> = <span class="keyword">async</span> (<span class="params">No:any</span>) =&gt; {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">res</span>: any = <span class="keyword">await</span> <span class="title function_">getResult</span>({<span class="title class_">No</span>: tNo })</span><br><span class="line">      <span class="comment">// 0 处理中 1 成功 2失败</span></span><br><span class="line">      <span class="keyword">if</span> ([<span class="number">0</span>].<span class="title function_">includes</span>(res.<span class="property">data</span>.<span class="property">State</span>)) {</span><br><span class="line">        timer.<span class="property">value</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">          <span class="title class_">Result</span>(<span class="title class_">No</span>);</span><br><span class="line">        }, <span class="number">2</span> * <span class="number">1000</span>);</span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">State</span> === <span class="number">1</span> || res.<span class="property">data</span>.<span class="property">State</span> === <span class="number">2</span>) {</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer.<span class="property">value</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="title class_">State</span>.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">State</span></span><br><span class="line">      <span class="comment">//该赋值的赋值</span></span><br><span class="line">      <span class="comment">//......</span></span><br><span class="line">    } <span class="keyword">catch</span> (error) {</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer.<span class="property">value</span>);</span><br><span class="line">    }</span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure>
<p>离开页面时，一定要清除定时，避免一直调用接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="built_in">clearTimeout</span>(timer.<span class="property">value</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<h1 id="四-第一次进入页面有在app-vue的onmouted里写了获取token方法调接口，页面刷新后token没了"><a href="#四-第一次进入页面有在app-vue的onmouted里写了获取token方法调接口，页面刷新后token没了" class="headerlink" title="四.第一次进入页面有在app.vue的onmouted里写了获取token方法调接口，页面刷新后token没了"></a>四.第一次进入页面有在app.vue的onmouted里写了获取token方法调接口，页面刷新后token没了</h1><blockquote>
<p>使用pinia+数据持久化,存放token 或者直接把接口获取到的存在localstorage</p>
</blockquote>
<h1 id="五-app端嵌套h5页面时，返回APP端时，不能使用router-go（-1），需要使用app端提供的关闭的桥的方法"><a href="#五-app端嵌套h5页面时，返回APP端时，不能使用router-go（-1），需要使用app端提供的关闭的桥的方法" class="headerlink" title="五.app端嵌套h5页面时，返回APP端时，不能使用router.go（-1），需要使用app端提供的关闭的桥的方法"></a>五.app端嵌套h5页面时，返回APP端时，不能使用router.go（-1），需要使用app端提供的关闭的桥的方法</h1><p>isIos.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isIos = !!navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>bridge.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {isIos } <span class="keyword">from</span> <span class="string">'./isIos'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setupWebViewJavascriptBridge</span> = (<span class="params">callback</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (isIos) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WebViewJavascriptBridge</span>) <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="variable language_">window</span>.<span class="property">WebViewJavascriptBridge</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WVJBCallbacks</span>) <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">WVJBCallbacks</span>.<span class="title function_">push</span>(callback)</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">WVJBCallbacks</span> = [callback]</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">WVJBIframe</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'iframe'</span>)</span><br><span class="line">        <span class="title class_">WVJBIframe</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'none'</span></span><br><span class="line">        <span class="title class_">WVJBIframe</span>.<span class="property">src</span> = <span class="string">'wvjbscheme://__BRIDGE_LOADED__'</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">appendChild</span>(<span class="title class_">WVJBIframe</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> { <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">removeChild</span>(<span class="title class_">WVJBIframe</span>) }, <span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">appBridge</span> = (<span class="params">apiName, payload, cb</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (isIos) {</span><br><span class="line">        <span class="title function_">setupWebViewJavascriptBridge</span>(<span class="function">(<span class="params">bridge</span>) =&gt;</span> bridge.<span class="title function_">callHandler</span>(apiName, payload, cb))</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">let</span> res = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">jsHZG</span>[apiName]) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload) !== <span class="string">'{}'</span> &amp;&amp; payload) {</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> payload === <span class="string">'object'</span>) {</span><br><span class="line">                    res = <span class="variable language_">window</span>.<span class="property">jsHZG</span>[apiName](<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload))</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    res = <span class="variable language_">window</span>.<span class="property">jsHZG</span>[apiName](payload)</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                res = <span class="variable language_">window</span>.<span class="property">jsHZG</span>[apiName]()</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (cb) <span class="title function_">cb</span>(res)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">registerhandler</span> = (<span class="params">name, callback</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (isIos) {</span><br><span class="line">        <span class="title function_">setupWebViewJavascriptBridge</span>(<span class="keyword">function</span> (<span class="params">bridge</span>) {</span><br><span class="line">            bridge.<span class="title function_">registerHandler</span>(name, callback)</span><br><span class="line">        })</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="variable language_">window</span>[name] = <span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">callback</span>(data)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>webView.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { appBridge } <span class="keyword">from</span> <span class="string">'./bridge'</span></span><br><span class="line"><span class="comment">// 打开新web-view </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">newPage</span> = (<span class="params">isFull, path, query</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">appBridge</span>(<span class="string">'openNewPage'</span>, { <span class="attr">url</span>: isFull ? <span class="attr">path</span>: <span class="string">`<span class="subst">${<span class="variable language_">window</span>.location.origin}</span><span class="subst">${path}</span>`</span>  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭当前web-view</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">closePage</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">appBridge</span>(<span class="string">'closePage'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//跳转小程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">openXCX</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">appBridge</span>(<span class="string">'payStagesOrder'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取原生导航条的高度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStatusBarHeight</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">appBridge</span>(<span class="string">'getStatusBarHeight'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { closePage} <span class="keyword">from</span> <span class="string">'@/utils/webView'</span></span><br><span class="line"><span class="comment">//在需要的地方</span></span><br><span class="line"><span class="title function_">closePage</span>()</span><br></pre></td></tr></tbody></table></figure>
<h1 id="六-项目打包发布后，前端静态图片在测试环境无法显示的问题"><a href="#六-项目打包发布后，前端静态图片在测试环境无法显示的问题" class="headerlink" title="六. 项目打包发布后，前端静态图片在测试环境无法显示的问题"></a>六. 项目打包发布后，前端静态图片在测试环境无法显示的问题</h1><p>首先我们去vite官网看看关于静态资源文件的处理：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8eb5a3fa20b64c268656fffd4b2c2d72~tplv-k3u1fbpfcp-watermark.image" alt="企业微信截图_16720467796522.png"><br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ff1b2e4db47412e968f36bc9f43680d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><strong>这里我们先假设：</strong><br>静态文件目录：<code>src/assets/images/</code><br>我们的目标静态文件在&nbsp;<code>src/assets/images/home/home_icon.png</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">"src/assets/images/home/home_icon.png"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>那么这么写就会出现问题，在本地环境时你能够显示出图片，但打包发布到测试环境问题就出来了，图片没显示出来。<br>第一张图片标红的位置打包后是： <code>/assets/images/home/home_icon.（hash的值）.png</code> </p>
<p>综上所得：如果资源文件在assets文件夹打包后会把图片名加上 hash值，但是直接通过 :src=”imgSrc”方式引入并不会在打包的时候解析，导致开发环境可以正常引入，打包后却不能显示的问题<br>所以：<code>&lt;img src="src/assets/images/home/home_icon.png" /&gt;</code> 是肯定找不到的。                                                                      </p>
<h2 id="1-第一种方式解决方式（适用于处理单个链接的资源文件-普通推荐！！！！）"><a href="#1-第一种方式解决方式（适用于处理单个链接的资源文件-普通推荐！！！！）" class="headerlink" title="1.第一种方式解决方式（适用于处理单个链接的资源文件 普通推荐！！！！）"></a>1.第一种方式解决方式（适用于处理单个链接的资源文件 普通推荐！！！！）</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> homeIcon <span class="keyword">from</span> <span class="string">'@/assets/images/home/home_icon.png'</span></span><br><span class="line">&lt;img :src=<span class="string">"homeIcon"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="2-第二种解决方式：new-URL-import-meta-url（适用于处理多个链接的资源文件-极力推荐！！！！）"><a href="#2-第二种解决方式：new-URL-import-meta-url（适用于处理多个链接的资源文件-极力推荐！！！！）" class="headerlink" title="2.第二种解决方式：new URL() + import.meta.url（适用于处理多个链接的资源文件 极力推荐！！！！）"></a>2.第二种解决方式：new URL() + import.meta.url（适用于处理多个链接的资源文件 极力推荐！！！！）</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7b4011fe7b843c5b77fab9fbf678343~tplv-k3u1fbpfcp-watermark.image" alt="企业微信截图_16720474775759.png"><br>这也是vite官方文档说明的方式，new URL() + import.meta.url<br>工具文件目录：&nbsp;<code>src/util/img-use.ts</code><br>img-use.ts:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取assets静态资源</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getAssetsFile</span> = (<span class="params">url: string</span>) =&gt; {</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">`../assets/images/<span class="subst">${url}</span>`</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>).<span class="property">href</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>使用:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> getAssetsFile <span class="keyword">from</span> <span class="string">'@/util/img-use'</span></span><br><span class="line"><span class="comment">//setup语法糖写法,没用语法糖的记得return出去</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//如果是直接建在assets/images下，写图标名就行了</span></span><br><span class="line">&lt;img :src=<span class="string">"getAssetsFile('home_icon.png')"</span> /&gt;</span><br><span class="line"><span class="comment">//可以在../assets/images建目录如home文件夹，那么就是</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"getAssetsFile('/home/home_icon.png')"</span> /&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>另外：如果是背景图片引入的方式（一定要使用相对路径）</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">.<span class="property">imgBg</span> {</span><br><span class="line">  background-<span class="attr">image</span>: <span class="title function_">url</span>(<span class="string">'../../assets/images/WDNMD.jpg'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="3-第三种解决方式import-meta-glob或import-meta-globEager（适用于处理多个链接的资源文件-不怎么推荐！！！！）"><a href="#3-第三种解决方式import-meta-glob或import-meta-globEager（适用于处理多个链接的资源文件-不怎么推荐！！！！）" class="headerlink" title="3.第三种解决方式import.meta.glob或import.meta.globEager（适用于处理多个链接的资源文件 不怎么推荐！！！！）"></a>3.第三种解决方式import.meta.glob<code>或</code>import.meta.globEager（适用于处理多个链接的资源文件 不怎么推荐！！！！）</h2><p><strong>这种方式引入的文件必须指定到具体文件夹路径，传入的变量中只能为文件名，不能包含文件路径</strong></p>
<p>使用vite的<code>import.meta.glob</code>或<code>import.meta.globEager</code>，两者的区别是前者懒加载资源，后者直接引入。<br>那我为什么说不怎么推荐了，如果你使用的是最新版本的vite，就会出现</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b00c91d209c4435385ba8193c6f85089~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>可以看出<code>import.meta.globEager</code>已被弃用，只能用<code>import.meta.glob</code>了，并且你只能传图片名，不能传路径。</p>
<blockquote>
<p>const modules = import.meta.glob(‘./menus/**/*.ts’, { eager: true,import:’default’ })<br>以“default”这个选项作为默认的导出内容，从而避免对象为’unknow’时获取default的报错</p>
</blockquote>
<p>工具文件目录：&nbsp;<code>src/util/img-use.ts</code><br>img-use.ts:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取assets静态资源</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getAssetsHomeFile</span> = (<span class="params">url: string</span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> path = <span class="string">`../assets/images/home/<span class="subst">${url}</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> modules = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">globEager</span>(<span class="string">"../assets/images/home/*"</span>);</span><br><span class="line">    <span class="comment">//const modules = import.meta.globEager("../assets/images/home/*", { eager: true,import:'default' });</span></span><br><span class="line">    <span class="keyword">return</span> modules[path].<span class="property">default</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>使用:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useImg <span class="keyword">from</span> <span class="string">'@/util/img-use'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//写图标名就行了，不能带路径,并且你只能传图片名，不能传路径。</span></span><br><span class="line">&lt;img :src=<span class="string">"useImg('home_icon.png')"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="七-h5移动端，安卓看着没问题，ios的手机文字嘎嘎换行"><a href="#七-h5移动端，安卓看着没问题，ios的手机文字嘎嘎换行" class="headerlink" title="七.h5移动端，安卓看着没问题，ios的手机文字嘎嘎换行"></a>七.h5移动端，安卓看着没问题，ios的手机文字嘎嘎换行</h1><blockquote>
<p>（<em>原因</em>：给对应的dom元素设置了宽度，导致了换行，移动端布局时非必要不要设置宽度）</p>
</blockquote>
<h1 id="八-vant3-Dialog组件title没显示，我的是小米11的，ios或安卓的其他手机都显示了"><a href="#八-vant3-Dialog组件title没显示，我的是小米11的，ios或安卓的其他手机都显示了" class="headerlink" title="八.vant3 Dialog组件title没显示，我的是小米11的，ios或安卓的其他手机都显示了"></a>八.vant3 Dialog组件title没显示，我的是小米11的，ios或安卓的其他手机都显示了</h1><blockquote>
<p>目前没找到原因，见鬼了，就我的手机 Dialog组件title没显示。</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//手机号弹窗提示</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">dialogShow</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="title class_">Dialog</span>.<span class="title function_">alert</span>({</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">'我知道了'</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">'你瞅啥'</span>, <span class="comment">//这个没显示，离谱</span></span><br><span class="line">      <span class="attr">confirmButtonColor</span>: <span class="string">'#FE7E41'</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'瞅你乍地！！'</span>,</span><br><span class="line">    }).<span class="title function_">then</span>(<span class="function">() =&gt;</span> {});</span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure>
<h1 id="九-小程序嵌套web-view-H5页时，出现双导航的情况"><a href="#九-小程序嵌套web-view-H5页时，出现双导航的情况" class="headerlink" title="九.小程序嵌套web-view&nbsp;H5页时，出现双导航的情况"></a>九.小程序嵌套web-view&nbsp;H5页时，出现双导航的情况</h1><blockquote>
<p>在app.json中，小程序navBarTitle不设置，并且h5项目的mian.ts调用接口，获取这个是从哪来到或嵌套该h5页，把来源存放在全局中，用来判断是否隐藏left-arrow 返回箭头</p>
</blockquote>
<p>获取：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//调接口获取来源.............. 得到sourcePage</span></span><br><span class="line">     </span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$sourcePage</span> = sourcePage <span class="comment">// 放到全局</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">  title=<span class="string">"我的"</span></span><br><span class="line">  :left-arrow=<span class="string">"$sourcePage != '来源的值'"</span></span><br><span class="line">  :border=<span class="string">"false"</span></span><br><span class="line">  style=<span class="string">"width: 10rem"</span></span><br><span class="line">  :placeholder=<span class="string">"true"</span></span><br><span class="line">  :fixed=<span class="string">"true"</span></span><br><span class="line">  @click-left=<span class="string">"onClickLeft"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>这样就不是双导航了</p>
<h1 id="十-app端嵌套web-view-H5页时，出现双导航的情况"><a href="#十-app端嵌套web-view-H5页时，出现双导航的情况" class="headerlink" title="十.app端嵌套web-view&nbsp;H5页时，出现双导航的情况"></a>十.app端嵌套web-view&nbsp;H5页时，出现双导航的情况</h1><blockquote>
<p>让app端把原生的导航给隐藏了，使用h5的导航</p>
</blockquote>
<h1 id="十一-h5-title为空时，安卓手机导航栏会默认展示h5域名。"><a href="#十一-h5-title为空时，安卓手机导航栏会默认展示h5域名。" class="headerlink" title="十一.h5&nbsp;title为空时，安卓手机导航栏会默认展示h5域名。"></a>十一.h5&nbsp;title为空时，安卓手机导航栏会默认展示h5域名。</h1><blockquote>
<p>解决方案：通过document.title改变h5&nbsp;title</p>
</blockquote>
<h1 id="十二-安卓端布局正常，两div上下有间距，ios没间距"><a href="#十二-安卓端布局正常，两div上下有间距，ios没间距" class="headerlink" title="十二.安卓端布局正常，两div上下有间距，ios没间距"></a>十二.安卓端布局正常，两div上下有间距，ios没间距</h1><blockquote>
<p>ios自己写的样式不是vant组件的（vant组件自己做了适配）文字需要高度和行高，没高度就挤在一起了</p>
</blockquote>
<p>总结一手：vant组件使用样式穿透时，就不要给宽度，高度行高了，vant组件组件整好适配了，自己写的样式特别时文字需要给高度和行高，按蓝湖上来就行了</p>
<h1 id="十三-微信小程序配置业务域名，调用web-view组件打开需要嵌套的h5页面"><a href="#十三-微信小程序配置业务域名，调用web-view组件打开需要嵌套的h5页面" class="headerlink" title="十三.微信小程序配置业务域名，调用web-view组件打开需要嵌套的h5页面"></a>十三.微信小程序配置业务域名，调用web-view组件打开需要嵌套的h5页面</h1><p>应为有其他的微信 去到微信公众平台，开发管理下的开发设置的下配置义务域名<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26722f3dda64e84b36a36ef5f54ef7c~tplv-k3u1fbpfcp-watermark.image" alt="1672708788778.png"></p>
<p>下载的校验文件，放在public下，并且不要重命名，是什么名字就是什么，不然检测不到</p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>H5项目，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器相关原理</title>
    <url>/2022/12/20/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>前言：<br>  了解浏览器相关原理，自己也在掘金，csdn，知乎上看了别人的文章，觉得部分内容对我有益，复制下来做了下笔记，如有雷同，纯属c+v（手动狗头）</p>
</blockquote>
<h3 id="一、浏览器种类"><a href="#一、浏览器种类" class="headerlink" title="一、浏览器种类"></a>一、浏览器种类</h3><ul>
<li>  IE （internet Explorer）浏览器</li>
<li>  Firefox 火狐浏览器</li>
<li>  Chrome 谷歌浏览器</li>
<li>  Safari 浏览器</li>
<li>  Opera 浏览器</li>
</ul>
<blockquote>
<p>谈谈几种浏览器的内核</p>
</blockquote>
<ul>
<li><p>  内核只是一个通俗的说法，其英文名称为“Layout engine”，翻译过来就是“排版引擎”，也被称为“页面渲染引擎”</p>
</li>
<li><p>  它负责取得网页的内容（HTML、XML、图像等等）、整理信息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机</p>
</li>
<li><p>  所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要排版引擎。</p>
</li>
<li><p>内核种类</p>
<ul>
<li><p>Trident</p>
<ul>
<li>  这是微软开发的一种排版引擎。</li>
<li>  有时候，为了方便也有很多人直接简称其为IE内核</li>
<li>  IE、Maxthon、TT、The World</li>
</ul>
</li>
<li><p>Geckos</p>
<ul>
<li>  Gecko是套开放源代码的、以C++编写的网页排版引擎。</li>
<li>  FireFox</li>
</ul>
</li>
<li><p>Presto</p>
<ul>
<li>  Presto是一个由Opera Software开发的浏览器排版引擎</li>
<li>  Opera</li>
</ul>
</li>
<li><p>Webkit</p>
<ul>
<li>  苹果公司自己的内核，也是苹果的Safari浏览器使用的内核</li>
<li>  Webkit引擎包含WebCore排版引擎及JavaScriptCore解析引擎</li>
<li>  Safari、Chrome</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、浏览器功能"><a href="#二、浏览器功能" class="headerlink" title="二、浏览器功能"></a>二、浏览器功能</h3><ul>
<li><p>浏览器功能：</p>
<ul>
<li>  1、向服务器发出请求</li>
<li>  2、在浏览器窗口中展示您选择的网络资源</li>
<li>  这里所说的资源一般是指HTML文档，PDF、图片、其他的类型。</li>
<li>  资源的位置：由用户使用 URI（统一资源标示符）指定。</li>
</ul>
</li>
<li><p>浏览器解释显示规范：</p>
<ul>
<li>  浏览器解释并显示 HTML 文件的方式是在 HTML 和 CSS 规范中指定的。</li>
<li>  这些规范由网络标准化组织 W3C（万维网联盟）进行维护。</li>
<li>  万恶之源：虽然制定了相应的规范，但是各浏览器都没有完全遵从这些规范，同时还在开发自己独有的扩展程序，这给网络开发人员带来了严重的兼容性问题。</li>
</ul>
</li>
<li><p>浏览器的界面用户元素</p>
<ul>
<li>  用来输入 URI 的地址栏</li>
<li>  前进和后退按钮</li>
<li>  书签设置选项</li>
<li>  用于刷新和停止加载当前文档的刷新和停止按钮</li>
<li>  用于返回主页的主页按钮</li>
</ul>
</li>
<li><p>  浏览器的用户界面并没有任何正式的规范，这是多年来的最佳实践自然发展以及彼此之间相互模仿的结果。</p>
</li>
</ul>
<h3 id="三、浏览器渲染过程是怎样的？"><a href="#三、浏览器渲染过程是怎样的？" class="headerlink" title="三、浏览器渲染过程是怎样的？"></a>三、浏览器渲染过程是怎样的？</h3><p>按照渲染的时间顺序，流水线可分为如下几个子阶段：<code>构建 DOM 树</code>、<code>样式计算</code>、<code>布局阶段</code>、<code>分层</code>、<code>栅格化</code>和<code>显示</code>。</p>
<ol>
<li> 渲染进程将 HTML 内容转换为能够读懂DOM 树结构。</li>
<li> 渲染引擎将 CSS 样式表转化为浏览器可以理解的styleSheets，计算出 DOM 节点的样式。</li>
<li> 创建布局树，并计算元素的布局信息。</li>
<li> 对布局树进行分层，并生成分层树。</li>
<li> 为每个图层生成绘制列表，并将其提交到合成线程。合成线程将图层分图块，并栅格化将图块转换成位图。</li>
<li> 合成线程发送绘制图块命令给浏览器进程。浏览器进程根据指令生成页面，并显示到显示器上。</li>
</ol>
<p>浏览器从网络或硬盘中获得HTML字节数据后会经过一个流程将字节解析为DOM树,先将HTML的原始字节数据转换为文件指定编码的字符,然后浏览器会根据HTML规范来将字符串转换成各种令牌标签，如html、body等。最终解析成一个树状的对象模型，就是dom树；</p>
<p>获取css，获取style标签内的css、或者内嵌的css,或者当HTML代码遇见标签时，浏览器会发送请求获得该标签中标记的CSS，当渲染引擎接收到 CSS 文本时，会执行一个转换操作，将 CSS 文本转换为浏览器可以理解的styleSheets</p>
<p>创建布局树，遍历 DOM 树中的所有可见节点，并把这些节点加到布局中；而不可见的节点会被布局树忽略掉，如 head 标签下面的全部内容，再比如 body.p.span 这个元素，因为它的属性包含 dispaly:none，所以这个元素也没有被包进布局树。最后计算 DOM 元素的布局信息，使其都保存在布局树中。<code>布局完成过程中，如果有js操作或者其他操作，对元素的颜色，背景等作出改变就会引起重绘，如果有对元素的大小、定位等有改变则会引起回流。</code></p>
<p>因为页面中有很多复杂的效果，如一些复杂的 3D 变换、页面滚动，或者使用 z-indexing 做 z 轴排序等，为了更加方便地实现这些效果，渲染引擎还需要为特定的节点生成专用的图层，并生成一棵对应的图层树。</p>
<p>渲染引擎实现图层的绘制，把一个图层的绘制拆分成很多小的绘制指令然后再把这些指令按照顺序组成一个待绘制列表，当图层的绘制列表准备好之后，主线程会把该绘制列表提交给合成线程，合成线程会将图层划分为图块，然后按照视口附近的图块来优先生成位图(实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图)</p>
<p>一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令，然后将该命令提交给浏览器进程,浏览器最后进行显示。</p>
<h3 id="2-如何理解回流和重绘？"><a href="#2-如何理解回流和重绘？" class="headerlink" title="2.如何理解回流和重绘？"></a>2.如何理解回流和重绘？</h3><p><code>回流：</code>当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）。</p>
<p><code>重绘：</code>当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。 由此我们可以看出，重绘不一定导致回流，回流一定会导致重绘。</p>
<h5 id="常见的会导致回流的元素："><a href="#常见的会导致回流的元素：" class="headerlink" title="常见的会导致回流的元素："></a>常见的会导致回流的元素：</h5><ul>
<li>  常见的几何属性有 width、height、padding、margin、left、top、border 等等。</li>
<li>  最容易被忽略的操作：获取一些需要通过即时计算得到的属性,当你要用到像这样的属性：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight 时，浏览器为了获取这些值，也会进行回流。</li>
<li>  当我们调用了 getComputedStyle 方法，或者 IE 里的 currentStyle 时，也会触发回流。原理是一样的，都为求一个“即时性”和“准确性”。</li>
</ul>
<h5 id="避免方式："><a href="#避免方式：" class="headerlink" title="避免方式："></a>避免方式：</h5><ol>
<li> 避免逐条改变样式，使用类名去合并样式</li>
<li> 将 DOM “离线”,使用DocumentFragment</li>
<li> 提升为合成层,如使用<code>will-change</code></li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#divId {</span><br><span class="line">  will-change: transform;</span><br><span class="line">}</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>优点</code></strong></p>
<ul>
<li>  合成层的位图，会交由 GPU 合成，比 CPU 处理要快</li>
<li>  当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层</li>
<li>  对于 transform 和 opacity 效果，不会触发 layout 和 paint</li>
</ul>
<p><strong>注意：</strong></p>
<p>部分浏览器缓存了一个 flush 队列，把我们触发的回流与重绘任务都塞进去，待到队列里的任务多起来、或者达到了一定的时间间隔，或者“不得已”的时候，再将这些任务一口气出队。但是当我们访问一些即使属性时，浏览器会为了获得此时此刻的、最准确的属性值，而提前将 flush 队列的任务出队</p>
<h3 id="四、-JavaScript-中的数据是如何存储在内存中的？"><a href="#四、-JavaScript-中的数据是如何存储在内存中的？" class="headerlink" title="四、 JavaScript 中的数据是如何存储在内存中的？"></a>四、 JavaScript 中的数据是如何存储在内存中的？</h3><p>在 JavaScript 中，原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。</p>
<p>在 JavaScript 的执行过程中， 主要有三种类型内存空间，分别是<code>代码空间</code>、<code>栈空间</code>、<code>堆空间</code>。 其中的代码空间主要是存储可执行代码的，原始类型(Number、String、Null、Undefined、Boolean、Symbol、BigInt)的数据值都是直接保存在“栈”中的，引用类型(Object)的值是存放在“堆”中的。因此在栈空间中(执行上下文)，原始类型存储的是变量的值，而引用类型存储的是其在”堆空间”中的地址，当 JavaScript 需要访问该数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手流程。</p>
<p>在编译过程中，如果 JavaScript 引擎判断到一个闭包，也会在堆空间创建换一个<code>“closure(fn)”</code>的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存闭包中的变量。所以闭包中的变量是存储在“堆空间”中的。</p>
<p>JavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，堆空间很大，能存放很多大的数据，不过缺点是分配内存和回收内存都会占用一定的时间。因此需要“栈”和“堆”两种空间。</p>
<h1 id="原文参考"><a href="#原文参考" class="headerlink" title="原文参考"></a>原文参考</h1><p><a href="https://juejin.cn/post/6844903962216824839">浏览器相关原理(面试题)详细总结一 - 掘金 (juejin.cn)</a><br><a href="https://juejin.cn/post/6844903969693646862#heading-0">浏览器相关原理(面试题)详细总结二 - 掘金 (juejin.cn)</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>面试题，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>cookie、localStorage、sessionStorage</title>
    <url>/2022/12/14/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/cookie%E3%80%81localStorage%E3%80%81sessionStorage%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、三者的异同"><a href="#一、三者的异同" class="headerlink" title="一、三者的异同"></a>一、三者的异同</h1><table>
<thead>
<tr>
<th>特性</th>
<th>Cookie</th>
<th>localStorage</th>
<th>sessionStorage</th>
</tr>
</thead>
<tbody><tr>
<td>数据的生命期</td>
<td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td>
<td>除非被清除，否则永久保存</td>
<td>仅在当前会话下有效，关闭页面或浏览器后被清除</td>
</tr>
<tr>
<td>存放数据大小</td>
<td>4K左右</td>
<td>一般为5MB</td>
<td>一般为5MB</td>
</tr>
<tr>
<td>与服务器端通信</td>
<td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
</tr>
<tr>
<td>易用性</td>
<td>需要程序员自己封装，源生的Cookie接口不友好</td>
<td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>
<td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>
</tr>
</tbody></table>
<h1 id="二、localStorage和sessionStorage操作"><a href="#二、localStorage和sessionStorage操作" class="headerlink" title="二、localStorage和sessionStorage操作"></a>二、localStorage和sessionStorage操作</h1><h4 id="setItem存储value"><a href="#setItem存储value" class="headerlink" title="setItem存储value"></a>setItem存储value</h4><p>用途：将value存储到key字段</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sessionStorage.setItem("key", "value"); &nbsp; &nbsp; localStorage.setItem("site", "js8.in");</span><br></pre></td></tr></tbody></table></figure>

<h4 id="getItem获取value"><a href="#getItem获取value" class="headerlink" title="getItem获取value"></a>getItem获取value</h4><p>用途：获取指定key本地存储的值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var value = sessionStorage.getItem("key"); &nbsp; &nbsp; var site = localStorage.getItem("site");</span><br></pre></td></tr></tbody></table></figure>

<h4 id="removeItem删除key"><a href="#removeItem删除key" class="headerlink" title="removeItem删除key"></a>removeItem删除key</h4><p>用途：删除指定key本地存储的值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sessionStorage.removeItem("key"); &nbsp; &nbsp; localStorage.removeItem("site");</span><br></pre></td></tr></tbody></table></figure>

<h4 id="clear清除所有的key-value"><a href="#clear清除所有的key-value" class="headerlink" title="clear清除所有的key/value"></a>clear清除所有的key/value</h4><p>用途：清除所有的key/value</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sessionStorage.clear(); &nbsp; &nbsp; localStorage.clear();</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>面试题，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>css滚动条，让滚动条看起来更好看</title>
    <url>/2022/12/03/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/css%E6%BB%9A%E5%8A%A8%E6%9D%A1%EF%BC%8C%E8%AE%A9%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9C%8B%E8%B5%B7%E6%9D%A5%E6%9B%B4%E5%A5%BD%E7%9C%8B/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="css滚动条"><a href="#css滚动条" class="headerlink" title="css滚动条"></a>css滚动条</h1><p>相关样式属性说明（详情查看图片，序号一一对应） </p>
<ol>
<li>::-webkit-scrollbar 滚动条整体部分，可以设置 width, height, background, border 等</li>
<li>::-webkit-scrollbar-button 滚动条两端的按钮，可以设置 display:none 让其不显示，也可以添加背景图片、颜色改变其显示效果 </li>
<li>::-webkit-scrollbar-track 外层轨道，可以设置 display:none 让其不显示，也可以添加背景图片、颜色改变其显示效果 </li>
<li>::-webkit-scrollbar-track-piece 内层滚动槽 </li>
<li>::-webkit-scrollbar-thumb 滚动的滑块，也就是可以用鼠标点击拖动的部分 </li>
<li>::-webkit-scrollbar-corner 边角 </li>
<li>::-webkit-resizer 定义右下角拖动块的样式。</li>
</ol>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f4ba6b948dc46aeb59dd77439b71ea9~tplv-k3u1fbpfcp-watermark.image" alt="159ada1eddb44a00c5f7003f9df9961f.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/* 改变element表格的滚动条样式 */</span><br><span class="line">.el-table__body-wrapper::-webkit-scrollbar {</span><br><span class="line">    width: 4px; /* 纵向滚动条的大小 */</span><br><span class="line">    height: 10px; /* 横向滚动条的大小 */</span><br><span class="line">}</span><br><span class="line">.el-table__body-wrapper::-webkit-scrollbar-thumb {</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);</span><br><span class="line">    background: rgba(0, 0, 0, 0.2);</span><br><span class="line">}</span><br><span class="line">.el-table__body-wrapper::-webkit-scrollbar-track {</span><br><span class="line">    -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);</span><br><span class="line">    border-radius: 0;</span><br><span class="line">    background: rgba(0, 0, 0, 0.1);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>css样式</tag>
      </tags>
  </entry>
  <entry>
    <title>React基础</title>
    <url>/2022/11/23/React%20GO%20GO/React%20jsx%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><h1 id="React-JSX"><a href="#React-JSX" class="headerlink" title="React JSX"></a>React JSX</h1><p>全称：javascript XML</p>
<p>作用：用来创建react虚拟dom对象</p>
<p>优点：</p>
<ul>
<li>  JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。</li>
<li>  它是类型安全的，在编译过程中就能发现错误。</li>
<li>  使用 JSX 编写模板更加简单快速。</li>
</ul>
<p>基本语法规则：</p>
<ul>
<li>遇到以&lt;开头的代码 以标签语法来解析 html的同名标签就转化成html的标签</li>
<li>遇到以{开头的代码 以js语法来解析 标签中的js语法一定要用{}包裹起来</li>
</ul>
<p>基本使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"foo"</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>));</span><br></pre></td></tr></tbody></table></figure>

<h2 id="1-使用JSX"><a href="#1-使用JSX" class="headerlink" title="1.使用JSX"></a>1.使用JSX</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">      	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>zy<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-myattribute</span> = <span class="string">"somevalue"</span>&gt;</span>React学习<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      	,</span><br><span class="line">      	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>)</span><br><span class="line">      );</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-1-JSX中使用js语法"><a href="#1-1-JSX中使用js语法" class="headerlink" title="1.1 JSX中使用js语法"></a>1.1 JSX中使用js语法</h3><ul>
<li>JSX 中使用 JavaScript 表达式。表达式需写在花括号&nbsp; <strong>{}</strong> &nbsp;中</li>
<li>在 JSX 中不能使用&nbsp;<strong>if else</strong>&nbsp;语句，但可以使用&nbsp;<strong>conditional (三元运算)</strong> &nbsp;表达式来替代。以下实例中如果变量&nbsp;<strong>i</strong>&nbsp;等于&nbsp;<strong>1</strong>&nbsp;浏览器将输出&nbsp;<strong>true</strong>, 如果修改 i 的值，则会输出&nbsp;<strong>false</strong>.</li>
</ul>
<p>实例：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{1+1}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{i == 1 ? 'True!' : 'False'}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> </span><br><span class="line">     , <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-2-JSX中使用样式"><a href="#1-2-JSX中使用样式" class="headerlink" title="1.2 JSX中使用样式"></a>1.2 JSX中使用样式</h3><p>React 推荐使用内联样式。我们可以使用&nbsp;<strong>camelCase</strong>&nbsp;语法来设置内联样式. React 会在指定元素数字后自动添加&nbsp;<strong>px</strong>&nbsp;。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myStyle = { <span class="attr">fontSize</span>: <span class="number">100</span>, <span class="attr">color</span>: <span class="string">'#FF0000'</span> }; </span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">{myStyle}</span>&gt;</span>zy<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, </span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-3-JSX中使用注释"><a href="#1-3-JSX中使用注释" class="headerlink" title="1.3 JSX中使用注释"></a>1.3 JSX中使用注释</h3><p>注释需要写在花括号中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>zy<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>, </span></span><br><span class="line"><span class="language-xml">        {/*注释 我无敌，你随意*/}</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-3-JSX中使用数组"><a href="#1-3-JSX中使用数组" class="headerlink" title="1.3 JSX中使用数组"></a>1.3 JSX中使用数组</h3><p>JSX 允许在模板中插入数组，数组会自动展开所有成员：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [ </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>666<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>777<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>, </span><br><span class="line">]; </span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>{arr}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'React'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>]; </span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>{arr.map((item,index) =&gt;{</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">{index}</span>&gt;</span>{item}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )}<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>, </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>recat</category>
      </categories>
      <tags>
        <tag>recat</tag>
      </tags>
  </entry>
  <entry>
    <title>步骤条小组件的封装</title>
    <url>/2022/11/15/%E7%BB%84%E4%BB%B6/%E6%AD%A5%E9%AA%A4%E6%9D%A1%E5%B0%8F%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>公司有一个业务流程是需要步骤条的，为该业务新搭建了个h5的项目（v3+vite3.2+vant），h5页面直接嵌套在app端的，导航条是由app端控制的，第一个步骤是由app端完成，后面两步是由我们完成，步骤条等一切样式要求高度的统一，vant等ui库自带的步骤条组件，还需要自己一个个样式穿透的去改样式，得到的可能还不是自己想要的，于是就自己封装了一个，以便自己以后遇到同样的流程或业务，能够直接C+V。不多bbbb，直接上效果图和代码</p>
<h1 id="一、vue3步骤条组件的封装"><a href="#一、vue3步骤条组件的封装" class="headerlink" title="一、vue3步骤条组件的封装"></a>一、vue3步骤条组件的封装</h1><h1 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1.效果图"></a>1.效果图</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4649316f48046c3b4b5aaa40eba598d~tplv-k3u1fbpfcp-watermark.image" alt="1668496872696.png"></p>
<h1 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h1><p>其中$px2rem(‘72px’)是因为使用了移动端适配的插件postcss-pxtorem并做了相应的配置后，发现行内样式移动端适配的插件不生效。于是在main.ts里定义了一个全局行内的方法，让行内样式也能移动端适配</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 行内样式移动端适配请加这个$px2rem() </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">px2rem</span> = (<span class="params">px:any</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/%/ig</span>.<span class="title function_">test</span>(px)){ <span class="comment">// 有百分号%，特殊处理，表述pc是一个有百分号的数，比如：90%</span></span><br><span class="line">      <span class="keyword">return</span> px</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">parseFloat</span>(px) / <span class="number">37.5</span>) + <span class="string">'rem'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$px2rem</span> = px2rem <span class="comment">// 放到全局</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;!-- <span class="title class_">Steps</span> 步骤条-组件 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"formStep"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in stepData"</span> <span class="attr">v-bind:key</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"stepContent"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:class</span>=<span class="string">"((stepActive &gt; index ?'stepItemSuccess stepItem':'stepItem'))"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stepShow"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- 中间样式 --&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"index == stepActive-1 ? 'currentStepIndex' :'stepIndex'"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{index+1}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- 步骤文字 --&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stepStatus "</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stepName"</span>&gt;</span>{{item.status}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 线 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"stepActive-1 &lt;= index? 'stepActiveLine': 'stepLine'"</span> <span class="attr">:style</span>=<span class="string">"{width:index == stepData.length-1 ? 0+'px' : $px2rem('72px'),border:index == stepData.length-1 ? 'none' : '1px dashed #FFFFFF'}"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bgCard"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"@/assets/images/bgCard.png"</span> <span class="attr">:style</span>=<span class="string">"{width: $px2rem('265px'),height:$px2rem('40px')}"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> interface propsStep {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">stepData</span>: any,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">stepActive</span>: number</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">const</span> props = <span class="title function_">withDefaults</span>(defineProps&lt;propsStep&gt;(), {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="attr">stepData</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="attr">stepActive</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">});</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#FE7E41</span>, <span class="number">#FF5D0F</span>, <span class="number">#FF5C0E</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  // <span class="attribute">background-color</span>: <span class="number">#FF5C0E</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">justify-content</span>: space-between;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding-top</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding-bottom</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.stepContent</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.stepLine</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">top</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-left</span>: <span class="number">80px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.stepActiveLine</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">top</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-left</span>: <span class="number">80px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.stepItem</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">flex-direction</span>:column;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.stepStatus</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.stepName</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">17px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-family</span>: PingFangSC-Medium, PingFang SC;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">line-height</span>: <span class="number">17px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">opacity</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.stepIndex</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-weight</span>: bold;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">color</span>: <span class="number">#FE7E41</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">opacity</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-left</span>: <span class="number">32px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-right</span>: <span class="number">32px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.currentStepIndex</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-weight</span>: bold;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">color</span>: <span class="number">#FE7E41</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border</span>: <span class="number">3px</span>  <span class="number">#e8e8e8</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgb</span>(<span class="number">255</span> <span class="number">255</span> <span class="number">255</span> / <span class="number">50%</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-left</span>: <span class="number">32px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-right</span>: <span class="number">32px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.bgCard</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> <span class="selector-class">.stepItemSuccess</span><span class="selector-class">.stepItem</span> <span class="selector-class">.stepName</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> <span class="selector-class">.stepItemSuccess</span><span class="selector-class">.stepItem</span> <span class="selector-class">.stepIndex</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#FE7E41</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> <span class="selector-class">.stepItemActive</span><span class="selector-class">.stepItem</span> <span class="selector-class">.stepName</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> <span class="selector-class">.stepItemActive</span><span class="selector-class">.stepItem</span> <span class="selector-class">.stepIndex</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#FE7E41</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h1><p>在需要这个用到的组件那块导入</p>
<blockquote>
<p>import stepBar from ‘@/components/stepBar/stepBar.vue’ </p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//步骤条</span></span><br><span class="line">&lt;step-bar :stepData=<span class="string">"stepData"</span> :stepActive=<span class="string">"stepActive"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> stepActive = <span class="title function_">ref</span>(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> stepData = <span class="title function_">ref</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">status</span>: <span class="string">"666"</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">status</span>: <span class="string">"222"</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">status</span>: <span class="string">"555"</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&lt;script/&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Props-参数说明"><a href="#Props-参数说明" class="headerlink" title="Props 参数说明"></a>Props 参数说明</h4><table>
<thead>
<tr>
<th>参数名</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>stepData</td>
<td>Array</td>
<td>[]</td>
<td>步骤内容（如上面的‘666’‘222’什么的）</td>
</tr>
<tr>
<td>stepActive</td>
<td>Number</td>
<td>0</td>
<td>代表进行到了第几步</td>
</tr>
</tbody></table>
</body></html>]]></content>
      <categories>
        <category>组件</category>
      </categories>
      <tags>
        <tag>组件封装</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 异步队列实现</title>
    <url>/2022/11/10/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/JavaScript%20%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    了解JavaScript 异步队列实现，我们需要先了解什么是同步任务，什么是异步任务，异步代码中才区分宏任务微任务，什么是宏任务、微任务？宏任务、微任务有哪些？又是怎么执行的？</p>
<h1 id="一、异步任务和同步任务"><a href="#一、异步任务和同步任务" class="headerlink" title="一、异步任务和同步任务"></a>一、异步任务和同步任务</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b354be478dd4d369799be4d4f0087e2~tplv-k3u1fbpfcp-watermark.image" alt="同步任务与异步任务"></p>
<p>​        js 是一种单线程语言，简单的说就是：只有一条通道，那么在任务多的情况下，就会出现拥挤的情况，这种情况下就产生了 ‘多线程’ ，但是这种“多线程”是通过单线程模仿的，一切javascript多线程都是纸老虎！那么就产生了同步任务和异步任务。</p>
<ul>
<li><p>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</p>
</li>
<li><p>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</p>
</li>
<li><p>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</p>
</li>
<li><p>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p>
<blockquote>
<p>那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let data = [];</span><br><span class="line">$.ajax({</span><br><span class="line">    url:www.javascript.com,</span><br><span class="line">    data:data,</span><br><span class="line">    success:() =&gt; {</span><br><span class="line">        console.log('发送成功!');</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">console.log('代码执行结束');</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>ajax进入Event Table，注册回调函数<code>success</code>。</li>
<li>执行<code>console.log('代码执行结束')</code>。</li>
<li>ajax事件完成，回调函数<code>success</code>进入Event Queue。</li>
<li>主线程从Event Queue读取回调函数<code>success</code>并执行。</li>
</ul>
<h1 id="二、宏任务和微任务是什么呢？"><a href="#二、宏任务和微任务是什么呢？" class="headerlink" title="二、宏任务和微任务是什么呢？"></a>二、宏任务和微任务是什么呢？</h1><table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><strong>宏任务（macrotask）</strong></th>
<th align="center"><strong>微任务（microtask）</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">谁发起的</td>
<td align="center">宿主（Node、浏览器）</td>
<td align="center">JS引擎</td>
</tr>
<tr>
<td align="center">具体事件</td>
<td align="center">1. script (可以理解为外层同步代码)2. setTimeout/setInterval3. UI rendering/UI事件4. postMessage，MessageChannel5. setImmediate，I/O（Node.js）</td>
<td align="center">1. Promise2. MutaionObserver3. Object.observe（已废弃；Proxy 对象替代）4. process.nextTick（Node.js）</td>
</tr>
<tr>
<td align="center">谁先执行</td>
<td align="center">后运行</td>
<td align="center">先运行</td>
</tr>
<tr>
<td align="center">会触发新一轮Tick吗</td>
<td align="center">会</td>
<td align="center">不会</td>
</tr>
</tbody></table>
<h2 id="1-宏任务、微任务是怎么执行的？"><a href="#1-宏任务、微任务是怎么执行的？" class="headerlink" title="1.宏任务、微任务是怎么执行的？"></a>1.宏任务、微任务是怎么执行的？</h2><p>​    执行顺序：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71de5ee24ed84d108e0d1127c03f6474~tplv-k3u1fbpfcp-watermark.image" alt="宏任务、微任务是怎么执行"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">setTimeout(()=&gt;{</span><br><span class="line">  new Promise(resolve =&gt;{</span><br><span class="line">  	resolve();</span><br><span class="line">  }).then(()=&gt;{</span><br><span class="line">  	console.log('test');</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  console.log(4);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">new Promise(resolve =&gt; {</span><br><span class="line">  resolve();</span><br><span class="line">  console.log(1)</span><br><span class="line">}).then( () =&gt; {</span><br><span class="line">  console.log(3);</span><br><span class="line">  Promise.resolve().then(() =&gt; {</span><br><span class="line">    console.log('before timeout');</span><br><span class="line">  }).then(() =&gt; {</span><br><span class="line">    Promise.resolve().then(() =&gt; {</span><br><span class="line">      console.log('also before timeout')</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">})</span><br><span class="line">console.log(2);</span><br></pre></td></tr></tbody></table></figure>

<p>1.遇到setTimeout，异步宏任务，将() =&gt; {console.log(4)}放入宏任务队列中；</p>
<p>2.遇到new Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出1；</p>
<p>3.而Promise.then中注册的回调才是异步执行的，将其放入微任务队列中<br>4.遇到同步任务console.log(2)，输出2；主线程中同步任务执行完<br>5.从微任务队列中取出任务到主线程中，输出3，此微任务中又有微任务，Promise.resolve().then(微任务a).then(微任务b)，将其依次放入微任务队列中；<br>6.从微任务队列中取出任务a到主线程中，输出 before timeout；<br>7.从微任务队列中取出任务b到主线程中，任务b又注册了一个微任务c，放入微任务队列中；<br>8.从微任务队列中取出任务c到主线程中，输出 also before timeout；微任务队列为空<br>9.从宏任务队列中取出任务到主线程，此任务中注册了一个微任务d，将其放入微任务队列中，接下来遇到输出4，宏任务队列为空<br>10.从微任务队列中取出任务d到主线程 ，输出test，微任务队列为空</p>
<h1 id="三、关系总结"><a href="#三、关系总结" class="headerlink" title="三、关系总结"></a>三、关系总结</h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/945651e8e2404a5093810c7d73272897~tplv-k3u1fbpfcp-watermark.image" alt="总结"></p>
<p>上图也是盗的，自己对这些做个笔记，加深影响，到时候回顾起来也比较方便！</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>​    <a href="https://juejin.cn/post/6844903512845860872">这一次，彻底弄懂 JavaScript 执行机制 - 掘金 (juejin.cn)</a></p>
<p>​    <a href="https://blog.csdn.net/weixin_45888701/article/details/116781078"> 微任务/宏任务和同步/异步之间的关系_</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>微任务</tag>
        <tag>宏任务</tag>
      </tags>
  </entry>
  <entry>
    <title>vite 搭建vue3项目（二）</title>
    <url>/2022/10/25/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/vite%20%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">
</head><body># 1.login页面和功能就不多哔哔了

<h1 id="2-主体布局"><a href="#2-主体布局" class="headerlink" title="2.主体布局"></a>2.主体布局</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51e77c74aeb743b5a9e159607d1eb0e6~tplv-k3u1fbpfcp-watermark.image" alt="dd7860edba87d1d65d1c03b81f01f4c6.png"><br>layout-&gt;index.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;el-container&gt;</span><br><span class="line">        &lt;el-aside&gt;</span><br><span class="line">            &lt;Menu /&gt;</span><br><span class="line">        &lt;/el-aside&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;el-header&gt;</span><br><span class="line">            &lt;/el-header&gt;</span><br><span class="line">            &lt;el-main&gt;</span><br><span class="line">            //mian开发中</span><br><span class="line">                &lt;!-- &lt;router-view v-slot="{ Component, route }"&gt;</span><br><span class="line">                    &lt;transition appear name="fade-transform" mode="out-in"&gt;</span><br><span class="line">                        &lt;keep-alive :include="cacheRouter"&gt;</span><br><span class="line">                            &lt;component :is="Component" :key="route.path"&gt;&lt;/component&gt;</span><br><span class="line">                        &lt;/keep-alive&gt;</span><br><span class="line">                    &lt;/transition&gt;</span><br><span class="line">                &lt;/router-view&gt; --&gt;</span><br><span class="line">            &lt;/el-main&gt;</span><br><span class="line">            &lt;el-footer&gt;</span><br><span class="line">                &lt;Footer /&gt;</span><br><span class="line">            &lt;/el-footer&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang="ts"&gt;</span><br><span class="line">import Footer from "./footer/index.vue";</span><br><span class="line">import Menu from "./Menu/index.vue";</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line">    @import "./index.scss";</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h1 id="3-vite中的批量自动化导入：import-meta-globEager"><a href="#3-vite中的批量自动化导入：import-meta-globEager" class="headerlink" title="3.vite中的批量自动化导入：import.meta.globEager"></a>3.vite中的批量自动化导入：import.meta.globEager</h1><p>如果想在vite中批量导入某些文件，实现项目的模块化，vite提供的import.meta.globEager函数就很好用</p>
<p>比如用在路由模块化：</p>
<p>1、需求：不想把路由文件全部放在一个文件里面，找的时候要拖动很麻烦，就想着把每一个模块的路由按功能分成单个的文件</p>
<p>2、思路：在routers文件夹内新增一个modules文件夹：里面放不同功能的routers文件，然后在vue引入的路由入口处批量导入模块化的routers</p>
<p>3、实现：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9d6edc09e5e4e8fbb012d6155e3a5d1~tplv-k3u1fbpfcp-watermark.image" alt="87e7997f3c15921b398a37d928ac3a32.png"></p>
<p>在router文件内批量引入modules内模块化的文件并处理：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import { createRouter, createWebHashHistory, RouteRecordRaw } from "vue-router";</span><br><span class="line"></span><br><span class="line">// * 导入所有router</span><br><span class="line">//const metaRouters = import.meta.globEager("./modules/*.ts");</span><br><span class="line">//最新vite应该是弃用了上面的，用下面的</span><br><span class="line">const metaRouters:any = import.meta.glob('./modules/*.ts', { eager: true })</span><br><span class="line">// * 处理路由表</span><br><span class="line">export const routerArray: RouteRecordRaw[] = [];</span><br><span class="line">Object.keys(metaRouters).forEach(item =&gt; {</span><br><span class="line">    Object.keys(metaRouters[item]).forEach((key: any) =&gt; {</span><br><span class="line">    //	routerArray.push(...metaRouters[item][key]);</span><br><span class="line">    routerArray.push(metaRouters[item][key]);</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description 路由配置简介</span><br><span class="line"> * @param path ==&gt; 路由路径</span><br><span class="line"> * @param name ==&gt; 路由名称</span><br><span class="line"> * @param redirect ==&gt; 路由重定向</span><br><span class="line"> * @param component ==&gt; 路由组件</span><br><span class="line"> * @param meta ==&gt; 路由元信息</span><br><span class="line"> * @param meta.requireAuth ==&gt; 是否需要权限验证</span><br><span class="line"> * @param meta.keepAlive ==&gt; 是否需要缓存该路由</span><br><span class="line"> * @param meta.title ==&gt; 路由标题</span><br><span class="line"> * @param meta.key	==&gt; 路由key,用来匹配按钮权限</span><br><span class="line"> * */</span><br><span class="line">const routes: RouteRecordRaw[] = [</span><br><span class="line">  ...routerArray,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const router = createRouter({</span><br><span class="line">    history: createWebHashHistory(),</span><br><span class="line">    routes,</span><br><span class="line">    strict: false,</span><br><span class="line">    // 切换页面，滚动到最顶部</span><br><span class="line">    scrollBehavior: () =&gt; ({ left: 0, top: 0 })</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>注意 再使用时出现import.meta.globEager(“./modules/*.ts”);报错说什么弃用了，</strong></p>
<p><strong>去源码看标注：已弃用，使用这个什么代替</strong></p>
<p><strong>@deprecated Use <code>import.meta.glob('*', { eager: true })</code> instead</strong></p>
<h1 id="4-侧边栏的开发和header里的侧边栏折叠-底部栏就不多bb"><a href="#4-侧边栏的开发和header里的侧边栏折叠-底部栏就不多bb" class="headerlink" title="4.侧边栏的开发和header里的侧边栏折叠(底部栏就不多bb)"></a>4.侧边栏的开发和header里的侧边栏折叠(底部栏就不多bb)</h1><h2 id="侧边栏的开发"><a href="#侧边栏的开发" class="headerlink" title="侧边栏的开发"></a><strong>侧边栏的开发</strong></h2><p>主要是分为两部分，一部分是logo，一部分是路由菜单</p>
<p>logo是图片加文字，文字根据侧边栏折叠是否展示</p>
<p><strong>路由菜单</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-scrollbar&gt;</span><br><span class="line">        &lt;el-menu</span><br><span class="line">            :default-active="activeMenu"</span><br><span class="line">            :router="true"</span><br><span class="line">            :collapse="isCollapse"</span><br><span class="line">            :collapse-transition="false"</span><br><span class="line">            :unique-opened="true"</span><br><span class="line">            background-color="#191a20"</span><br><span class="line">            text-color="#bdbdc0"</span><br><span class="line">            active-text-color="#fff"</span><br><span class="line">        &gt;</span><br><span class="line">          //菜单项</span><br><span class="line">            &lt;SubItem :menuList="menuList" /&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-scrollbar&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>首先需要获取菜单列表，一般是调用接口根据登录的这个用户的权限获取列表接口，暂时用得请求的json模拟后台接口数据，把菜单数据存到pinia中</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">onMounted(async () =&gt; {</span><br><span class="line">    // 获取菜单列表</span><br><span class="line">    loading.value = true;</span><br><span class="line">    try {</span><br><span class="line">        const res = await getMenuList();</span><br><span class="line">        if (!res.data) return;</span><br><span class="line">        // 把路由菜单处理成一维数组（存储到 pinia 中）</span><br><span class="line">        const dynamicRouter = handleRouter(res.data);</span><br><span class="line">        authStore.setAuthRouter(dynamicRouter);</span><br><span class="line">        menuStore.setMenuList(res.data);</span><br><span class="line">    } finally {</span><br><span class="line">        loading.value = false;</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>然后需要有默认激活菜单的index和菜单是否折叠 获取pinia里存着的菜单数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//默认激活菜单的 index，当前路由对象的路径</span><br><span class="line">const activeMenu = computed((): string =&gt; route.path);</span><br><span class="line">//菜单是否折叠</span><br><span class="line">const isCollapse = computed((): boolean =&gt; menuStore.isCollapse);</span><br><span class="line">//菜单数据</span><br><span class="line">const menuList = computed((): Menu.MenuOptions[] =&gt; menuStore.menuList);</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// 监听窗口大小变化，折叠侧边栏</span><br><span class="line">const screenWidth = ref&lt;number&gt;(0);</span><br><span class="line">const listeningWindow = () =&gt; {</span><br><span class="line">    window.onresize = () =&gt; {</span><br><span class="line">        return (() =&gt; {</span><br><span class="line">            screenWidth.value = document.body.clientWidth;</span><br><span class="line">            if (isCollapse.value === false &amp;&amp; screenWidth.value &lt; 1200) menuStore.setCollapse();</span><br><span class="line">            if (isCollapse.value === true &amp;&amp; screenWidth.value &gt; 1200) menuStore.setCollapse();</span><br><span class="line">        })();</span><br><span class="line">    };</span><br><span class="line">};</span><br><span class="line">listeningWindow();</span><br></pre></td></tr></tbody></table></figure>

<p>菜单项就是遍历菜单数据展示路由菜单信息（子组件需要defineProps&lt;{ menuList: Menu.MenuOptions[] }&gt;();）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template v-for="subItem in menuList" :key="subItem.path"&gt;</span><br><span class="line">        &lt;el-sub-menu v-if="subItem.children &amp;&amp; subItem.children.length &gt; 0" :index="subItem.path"&gt;</span><br><span class="line">            &lt;template #title&gt;</span><br><span class="line">                &lt;el-icon&gt;</span><br><span class="line">                    &lt;component :is="subItem.icon"&gt;&lt;/component&gt;</span><br><span class="line">                &lt;/el-icon&gt;</span><br><span class="line">                &lt;span&gt;{{ subItem.title }}&lt;/span&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;SubItem :menuList="subItem.children" /&gt;</span><br><span class="line">        &lt;/el-sub-menu&gt;</span><br><span class="line">        &lt;el-menu-item v-else :index="subItem.path"&gt;</span><br><span class="line">            &lt;el-icon&gt;</span><br><span class="line">                &lt;component :is="subItem.icon"&gt;&lt;/component&gt;</span><br><span class="line">            &lt;/el-icon&gt;</span><br><span class="line">            &lt;template v-if="!subItem.isLink" #title&gt;</span><br><span class="line">                &lt;span&gt;{{ subItem.title }}&lt;/span&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-else #title&gt;</span><br><span class="line">                &lt;a class="menu-href" :href="subItem.isLink" target="_blank"&gt;{{ subItem.title }}&lt;/a&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;script setup lang="ts"&gt;</span><br><span class="line">defineProps&lt;{ menuList: Menu.MenuOptions[] }&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="header里的侧边栏折叠开发"><a href="#header里的侧边栏折叠开发" class="headerlink" title="header里的侧边栏折叠开发"></a>header里的侧边栏折叠开发</h2><p>监控屏幕宽度或点击叠判断是否折叠</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//菜单是否折叠</span><br><span class="line">const isCollapse = computed((): boolean =&gt; menuStore.isCollapse);</span><br><span class="line">//菜单数据</span><br><span class="line">const menuList = computed((): Menu.MenuOptions[] =&gt; menuStore.menuList);</span><br><span class="line">// 监听窗口大小变化，合并 aside</span><br><span class="line">const screenWidth = ref&lt;number&gt;(0);</span><br><span class="line">const listeningWindow = () =&gt; {</span><br><span class="line">    window.onresize = () =&gt; {</span><br><span class="line">        return (() =&gt; {</span><br><span class="line">            screenWidth.value = document.body.clientWidth;</span><br><span class="line">            if (isCollapse.value === false &amp;&amp; screenWidth.value &lt; 1200) menuStore.setCollapse();</span><br><span class="line">            if (isCollapse.value === true &amp;&amp; screenWidth.value &gt; 1200) menuStore.setCollapse();</span><br><span class="line">        })();</span><br><span class="line">    };</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<h1 id="5-vue-router-利用-route-的-matched-属性实现面包屑效果"><a href="#5-vue-router-利用-route-的-matched-属性实现面包屑效果" class="headerlink" title="5.vue-router 利用 $route 的 matched 属性实现面包屑效果"></a>5.vue-router 利用 $route 的 matched 属性实现面包屑效果</h1><p><strong>matched 顾名思义 就是 匹配，假如我们目前的路由是/a/aa-01，那么此时 this.$route.matched匹配到的会是一个数组，包含 ‘/‘，’/a’，’/a/aa-01’，这三个path的路由信息。然后我们可以直接利用路由信息渲染我们的面包屑导航。</strong></p>
<p>布局需要使用到el-breadcrumb ，和transition-group</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-breadcrumb :separator-icon="ArrowRight"&gt;</span><br><span class="line">        &lt;transition-group name="breadcrumb" mode="out-in"&gt;</span><br><span class="line">            &lt;el-breadcrumb-item :to="{ path: HOME_URL }" key="/home"&gt;首页&lt;/el-breadcrumb-item&gt;</span><br><span class="line">            &lt;el-breadcrumb-item v-for="item in matched" :key="item.path" :to="{ path: item.path }"&gt;</span><br><span class="line">                {{ item.meta.title }}</span><br><span class="line">            &lt;/el-breadcrumb-item&gt;</span><br><span class="line">        &lt;/transition-group&gt;</span><br><span class="line">    &lt;/el-breadcrumb&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang="ts"&gt;</span><br><span class="line">import { computed } from "vue";</span><br><span class="line">import { useRoute } from "vue-router";</span><br><span class="line">import { ArrowRight } from "@element-plus/icons-vue";</span><br><span class="line">import { HOME_URL } from "@/config/config";</span><br><span class="line">const route = useRoute();</span><br><span class="line"></span><br><span class="line">const matched = computed(() =&gt; route.matched.filter(item =&gt;item.meta &amp;&amp; item.meta.title &amp;&amp; item.meta.title !== "首页"));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>TransitionGroup# 是一个内置组件，用于对 v-for 列表中的元素或组件的插入、移除和顺序改变添加动画效果。这样每次选择侧边栏的路由时，面包屑导航这边就感觉比较平滑的展示</p>
<h1 id="6-后台管理系统顶部使用el-tag或el-tab实现浏览路由历史实现-（标签栏管理）"><a href="#6-后台管理系统顶部使用el-tag或el-tab实现浏览路由历史实现-（标签栏管理）" class="headerlink" title="6.后台管理系统顶部使用el-tag或el-tab实现浏览路由历史实现 （标签栏管理）"></a>6.后台管理系统顶部使用el-tag或el-tab实现浏览路由历史实现 （标签栏管理）</h1><p>1.默认有首页，不能关闭</p>
<p>主要就是在tabs.ts的state的tabsMenuList写死,剩下的路由历史就是往这里面tabsMenuList添加数据，剩下的就在actions里面处理了，完成增加，移除，选择，路由历史的操作具体在下面</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">state: (): TabsState =&gt; ({</span><br><span class="line">    tabsMenuValue: HOME_URL,</span><br><span class="line">    tabsMenuList: [{ title: "首页", path: HOME_URL, icon: "home-filled", close: false }]</span><br><span class="line">}),</span><br></pre></td></tr></tbody></table></figure>

<p>2.点击侧边栏上路由菜单，判断有无存在，没有就添加同时定位到上面(也就是设置tabsMenuValue)，有就定位到上面</p>
<p>在actions里写</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// Add Tabs</span><br><span class="line">        async addTabs(tabItem: TabsOptions) {</span><br><span class="line">            // not add tabs black list</span><br><span class="line">            if (TABS_BLACK_LIST.includes(tabItem.path)) return;</span><br><span class="line">            const tabInfo: TabsOptions = {</span><br><span class="line">                title: tabItem.title,</span><br><span class="line">                path: tabItem.path,</span><br><span class="line">                close: tabItem.close</span><br><span class="line">            };</span><br><span class="line">            if (this.tabsMenuList.every(item =&gt; item.path !== tabItem.path)) {</span><br><span class="line">                this.tabsMenuList.push(tabInfo);</span><br><span class="line">            }</span><br><span class="line">            this.setTabsMenuValue(tabItem.path);</span><br><span class="line">        },</span><br></pre></td></tr></tbody></table></figure>

<p>3.关闭当前页，自动跳到上一个tag页面</p>
<p>在actions里写</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// Remove Tabs</span><br><span class="line">    async removeTabs(tabPath: string) {</span><br><span class="line">        let tabsMenuValue = this.tabsMenuValue;</span><br><span class="line">        const tabsMenuList = this.tabsMenuList;</span><br><span class="line">        if (tabsMenuValue === tabPath) {</span><br><span class="line">            tabsMenuList.forEach((item, index) =&gt; {</span><br><span class="line">                if (item.path !== tabPath) return;</span><br><span class="line">                const nextTab = tabsMenuList[index + 1] || tabsMenuList[index - 1];</span><br><span class="line">                if (!nextTab) return;</span><br><span class="line">                tabsMenuValue = nextTab.path;</span><br><span class="line">                router.push(nextTab.path);</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">        this.tabsMenuValue = tabsMenuValue;</span><br><span class="line">        this.tabsMenuList = tabsMenuList.filter(item =&gt; item.path !== tabPath);</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure>

<p>4.选中标签 跳转到标签对应的路由</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// Change Tabs</span><br><span class="line">    async changeTabs(tabItem: TabPaneProps) {</span><br><span class="line">        this.tabsMenuList.forEach(item =&gt; {</span><br><span class="line">            if (item.title === tabItem.label) router.push(item.path);</span><br><span class="line">        });</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div class="tabs-box"&gt;</span><br><span class="line">    &lt;div class="tabs-menu"&gt;</span><br><span class="line">        &lt;el-tabs v-model="tabsMenuValue" type="card" @tab-click="tabClick" @tab-remove="removeTab"&gt;</span><br><span class="line">            &lt;el-tab-pane</span><br><span class="line">                v-for="item in tabsMenuList"</span><br><span class="line">                :key="item.path"</span><br><span class="line">                :path="item.path"</span><br><span class="line">                :label="item.title"</span><br><span class="line">                :name="item.path"</span><br><span class="line">                :closable="item.close"</span><br><span class="line">            &gt;</span><br><span class="line">                &lt;template #label&gt;</span><br><span class="line">                    &lt;el-icon class="tabs-icon" v-if="item.icon"&gt;</span><br><span class="line">                        &lt;component :is="item.icon"&gt;&lt;/component&gt;</span><br><span class="line">                    &lt;/el-icon&gt;</span><br><span class="line">                    {{ item.title }}</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/el-tab-pane&gt;</span><br><span class="line">        &lt;/el-tabs&gt;</span><br><span class="line">        //&lt;MoreButton /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>页面上具体使用的el-tabs实现</p>
<p>总结：</p>
<p>在store-&gt;modules-&gt;tabs.ts</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import { defineStore } from "pinia";</span><br><span class="line">import { TabPaneProps } from "element-plus";</span><br><span class="line">import { TabsState } from "../interface";</span><br><span class="line">import { HOME_URL, TABS_BLACK_LIST } from "@/config/config";</span><br><span class="line">import piniaPersistConfig from "@/config/piniaPersist";</span><br><span class="line">import router from "@/router/index";</span><br><span class="line"></span><br><span class="line">// TabsStore</span><br><span class="line">export const TabsStore = defineStore({</span><br><span class="line">    id: "TabsState",</span><br><span class="line">    state: (): TabsState =&gt; ({</span><br><span class="line">        tabsMenuValue: HOME_URL,</span><br><span class="line">        tabsMenuList: [{ title: "首页", path: HOME_URL, icon: "home-filled", close: false }]</span><br><span class="line">    }),</span><br><span class="line">    getters: {},</span><br><span class="line">    actions: {</span><br><span class="line">        // Add Tabs</span><br><span class="line">        async addTabs(tabItem: TabsOptions) {</span><br><span class="line">            // not add tabs black list</span><br><span class="line">            if (TABS_BLACK_LIST.includes(tabItem.path)) return;</span><br><span class="line">            const tabInfo: TabsOptions = {</span><br><span class="line">                title: tabItem.title,</span><br><span class="line">                path: tabItem.path,</span><br><span class="line">                close: tabItem.close</span><br><span class="line">            };</span><br><span class="line">            if (this.tabsMenuList.every(item =&gt; item.path !== tabItem.path)) {</span><br><span class="line">                this.tabsMenuList.push(tabInfo);</span><br><span class="line">            }</span><br><span class="line">            this.setTabsMenuValue(tabItem.path);</span><br><span class="line">        },</span><br><span class="line">        // Remove Tabs</span><br><span class="line">        async removeTabs(tabPath: string) {</span><br><span class="line">            let tabsMenuValue = this.tabsMenuValue;</span><br><span class="line">            const tabsMenuList = this.tabsMenuList;</span><br><span class="line">            if (tabsMenuValue === tabPath) {</span><br><span class="line">                tabsMenuList.forEach((item, index) =&gt; {</span><br><span class="line">                    if (item.path !== tabPath) return;</span><br><span class="line">                    const nextTab = tabsMenuList[index + 1] || tabsMenuList[index - 1];</span><br><span class="line">                    if (!nextTab) return;</span><br><span class="line">                    tabsMenuValue = nextTab.path;</span><br><span class="line">                    router.push(nextTab.path);</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">            this.tabsMenuValue = tabsMenuValue;</span><br><span class="line">            this.tabsMenuList = tabsMenuList.filter(item =&gt; item.path !== tabPath);</span><br><span class="line">        },</span><br><span class="line">        // Change Tabs</span><br><span class="line">        async changeTabs(tabItem: TabPaneProps) {</span><br><span class="line">            this.tabsMenuList.forEach(item =&gt; {</span><br><span class="line">                if (item.title === tabItem.label) router.push(item.path);</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line">        // Set TabsMenuValue</span><br><span class="line">        async setTabsMenuValue(tabsMenuValue: string) {</span><br><span class="line">            this.tabsMenuValue = tabsMenuValue;</span><br><span class="line">        },</span><br><span class="line">        // Set TabsMenuList</span><br><span class="line">        async setTabsMenuList(tabsMenuList: TabsOptions[]) {</span><br><span class="line">            this.tabsMenuList = tabsMenuList;</span><br><span class="line">        },</span><br><span class="line">        // Close MultipleTab</span><br><span class="line">        async closeMultipleTab(tabsMenuValue?: string) {</span><br><span class="line">            this.tabsMenuList = this.tabsMenuList.filter(item =&gt; {</span><br><span class="line">                return item.path === tabsMenuValue || item.path === HOME_URL;</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line">        // Go Home</span><br><span class="line">        async goHome() {</span><br><span class="line">            router.push(HOME_URL);</span><br><span class="line">            this.tabsMenuValue = HOME_URL;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    persist: piniaPersistConfig("TabsState")</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<h1 id="最终效果图："><a href="#最终效果图：" class="headerlink" title="最终效果图："></a>最终效果图：</h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db741d21a0a24e188a55a28b00466f4d~tplv-k3u1fbpfcp-watermark.image" alt="46972a97567f3ff7c445d12b442ef7b1.png"></p>
<h1 id="gitHub地址："><a href="#gitHub地址：" class="headerlink" title="gitHub地址："></a>gitHub地址：</h1><p><a href="https://github.com/DarknessZY/zhangyao-management/tree/master">vue3学习完成的后管模板</a></p>
</body></html>]]></content>
      <categories>
        <category>项目搭建</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vue3</tag>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>日期小组件的封装</title>
    <url>/2022/10/12/%E7%BB%84%E4%BB%B6/%E6%97%A5%E6%9C%9F%E5%B0%8F%E7%BB%84%E4%BB%B6(vue2)/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="一、日期小组件"><a href="#一、日期小组件" class="headerlink" title="一、日期小组件"></a>一、日期小组件</h1><p>公司有一个微信小程序项目用的是uni-app+uview2,uview2上的那个日期组件并不是产品想要样子，那就只好自己动手查阅资料了，看看别人的日历组件怎么搞的，再根据这些，写写样式，改改逻辑，完成产品需要的喽。不和你多bb，直接上效果图和代码，主要也是自己做个笔记，指不定哪天又用上，到时候c+v就行了，哈哈！</p>
<h2 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1.效果图"></a>1.效果图</h2><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c64a3ea7f6cf4209a321d38af9e11d09~tplv-k3u1fbpfcp-watermark.image?" alt="d8a086257743cc6dee6907df3bcfc63.png"></p>

<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><p>我一般是这样建文件：components=&gt;term-picker=&gt;term-picker.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view :class="{'pickerMask':visable}" @click="maskClick" @touchmove.stop.prevent="returnHandle"&gt;</span><br><span class="line">		&lt;view class="picker-box" :class="{'picker-show':visable}"&gt;</span><br><span class="line">      &lt;view class="selectDate"&gt;</span><br><span class="line">        &lt;view class="selectDateTxt"&gt;</span><br><span class="line">          &lt;text&gt;选择日期&lt;/text&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">      &lt;view class="lineshow"&gt;</span><br><span class="line">        &lt;view class="line"&gt;&lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">			&lt;view class="operate-box" @touchmove.stop.prevent="returnHandle" @tap.stop="returnHandle"&gt;</span><br><span class="line"></span><br><span class="line">				&lt;view class="time-box"&gt;</span><br><span class="line">					&lt;view @click="touchSelect(0)" class="time-item" :style="{color:touchIndex?'#000000':themeColor}"&gt;</span><br><span class="line">						&lt;text&gt;{{startText}}&lt;/text&gt;</span><br><span class="line">						&lt;text&gt;{{resultDate[0]}}&lt;/text&gt;</span><br><span class="line">					&lt;/view&gt;</span><br><span class="line">					&lt;text&gt;至&lt;/text&gt;</span><br><span class="line">					&lt;view @click="touchSelect(1)" class="time-item" :style="{color:touchIndex?themeColor:'#000000'}"&gt;</span><br><span class="line">						&lt;text&gt;{{endText}}&lt;/text&gt;</span><br><span class="line">						&lt;text&gt;{{resultDate[1]}}&lt;/text&gt;</span><br><span class="line">					&lt;/view&gt;</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">			&lt;/view&gt;</span><br><span class="line">      &lt;view class="lineshow"&gt;</span><br><span class="line">        &lt;view class="line"&gt;&lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">			&lt;picker-view :value="pickerValue" @change="pickerChange" class="picker-view" :indicator-style="indicatorStyle" @tap.stop="returnHandle"&gt;</span><br><span class="line">        &lt;picker-view-column style="flex: 0 0 30.5%"&gt;</span><br><span class="line">				    &lt;view class="picker-item" v-for="(item, index) in years" :key="index"&gt;{{item}}年&lt;/view&gt;</span><br><span class="line">				&lt;/picker-view-column&gt;</span><br><span class="line">				&lt;picker-view-column style="flex: 0 0 30.5%"&gt;</span><br><span class="line">				    &lt;view class="picker-item" v-for="(item, index) in months" :key="index"&gt;{{ item }}月&lt;/view&gt;</span><br><span class="line">				&lt;/picker-view-column&gt;</span><br><span class="line">				&lt;picker-view-column v-if="days.length &gt; 0" style="flex: 0 0 30.5%"&gt;</span><br><span class="line">				    &lt;view class="picker-item" v-for="(item, index) in days" :key="index"&gt;{{ item }}日&lt;/view&gt;</span><br><span class="line">				&lt;/picker-view-column &gt;</span><br><span class="line">			&lt;/picker-view&gt;</span><br><span class="line">      &lt;view class="button"&gt;</span><br><span class="line">        &lt;view  class="buttonClose" @click="pickerClose"&gt;</span><br><span class="line">          &lt;view class="buttonClosetxt"&gt;</span><br><span class="line">            取消</span><br><span class="line">          &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;view  class="buttonConfirm" @click="pickerConfirm"&gt;</span><br><span class="line">          &lt;view class="buttonConfirmtxt"&gt;</span><br><span class="line">            确认</span><br><span class="line">          &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'termPicker',</span><br><span class="line">  props: {</span><br><span class="line">    visable: {</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    },</span><br><span class="line">    defaultDate: {</span><br><span class="line">      type: Array,</span><br><span class="line">      default: () =&gt; []</span><br><span class="line">    },</span><br><span class="line">    minYear: {</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 2020,</span><br><span class="line">    },</span><br><span class="line">    timeLimit: {</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    },</span><br><span class="line">    deferYear: {</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 0,</span><br><span class="line">    },</span><br><span class="line">    themeColor: {</span><br><span class="line">      type: String,</span><br><span class="line">      default: '#10BE9D'</span><br><span class="line">    },</span><br><span class="line">    startText: {</span><br><span class="line">      type: String,</span><br><span class="line">      default: '开始时间'</span><br><span class="line">    },</span><br><span class="line">    endText: {</span><br><span class="line">      type: String,</span><br><span class="line">      default: '结束时间'</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    const date = new Date()</span><br><span class="line">    const years = []</span><br><span class="line">    const year = date.getFullYear()</span><br><span class="line">    const months = []</span><br><span class="line">    const month = date.getMonth() + 1</span><br><span class="line">    const day = date.getDate()</span><br><span class="line">    const maxYear = this.timeLimit ? year : year + this.deferYear</span><br><span class="line">    for (let i = this.minYear;i &lt;= maxYear;i++) {</span><br><span class="line">      years.push(i)</span><br><span class="line">    }</span><br><span class="line">    for (let i = 1;i &lt;= 12;i++) {</span><br><span class="line">      months.push(i)</span><br><span class="line">    }</span><br><span class="line">    return {</span><br><span class="line">      indicatorStyle: 'height: 100rpx;',</span><br><span class="line">      touchIndex: 0,</span><br><span class="line">      year,</span><br><span class="line">      month,</span><br><span class="line">      day,</span><br><span class="line">      years,</span><br><span class="line">      months,</span><br><span class="line">      days: [],</span><br><span class="line">      pickerValue: [],</span><br><span class="line">      resultDate: []</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.setDate()</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    returnHandle() {},</span><br><span class="line">    setDate() {</span><br><span class="line">      if (this.defaultDate.length) {</span><br><span class="line">        if (this.defaultDate.length &gt; 0) {</span><br><span class="line">          const date = this.defaultDate[0]</span><br><span class="line">          this.resultDate = this.defaultDate</span><br><span class="line">          this.setPicker(date)</span><br><span class="line">        } else {</span><br><span class="line">          const month = this.month &lt; 10 ? '0' + this.month : this.month</span><br><span class="line">          const day = this.day &lt; 10 ? '0' + this.day : this.day</span><br><span class="line">          const nowTime = this.year + '-' + month + '-' + day</span><br><span class="line">          this.resultDate = [nowTime, nowTime]</span><br><span class="line">          this.setPicker(nowTime)</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    setPicker(date) {</span><br><span class="line">      if (date) {</span><br><span class="line">        const splitVal = date.split('-')</span><br><span class="line">        const year = this.years.indexOf(Number(splitVal[0]))</span><br><span class="line">        const month = Number(splitVal[1]) - 1</span><br><span class="line">        const day = Number(splitVal[2]) - 1</span><br><span class="line">        this.pickerChange({</span><br><span class="line">          detail: {</span><br><span class="line">            value: [year, month, day]</span><br><span class="line">          }</span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    touchSelect(val) {</span><br><span class="line">      const date = this.resultDate[val]</span><br><span class="line">      this.touchIndex = val</span><br><span class="line">      this.setPicker(date)</span><br><span class="line">    },</span><br><span class="line">    getDateTime(date) {</span><br><span class="line">      const year = this.years[date[0]]</span><br><span class="line">      let month = this.months[date[1]]</span><br><span class="line">      let day = this.days[date[2]]</span><br><span class="line">      if (month &lt; 10) {</span><br><span class="line">        month = '0' + month</span><br><span class="line">      }</span><br><span class="line">      if (day &lt; 10) {</span><br><span class="line">        day = '0' + day</span><br><span class="line">      }</span><br><span class="line">      this.resultDate[this.touchIndex] = year + '-' + month + '-' + day</span><br><span class="line">    },</span><br><span class="line">    pickerChange(e) {</span><br><span class="line">      const currents = e.detail.value</span><br><span class="line">      if (currents[1] + 1 === 2) {</span><br><span class="line">        this.days = []</span><br><span class="line">        if (</span><br><span class="line">          ((currents[0] + this.minYear) % 4 === 0 &amp;&amp;</span><br><span class="line">            (currents[0] + this.minYear) % 100 !== 0) ||</span><br><span class="line">          (currents[0] + this.minYear) % 400 === 0</span><br><span class="line">        ) {</span><br><span class="line">          for (let i = 1;i &lt; 30;i++) {</span><br><span class="line">            this.days.push(i)</span><br><span class="line">          }</span><br><span class="line">        } else {</span><br><span class="line">          for (let i = 1;i &lt; 29;i++) {</span><br><span class="line">            this.days.push(i)</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      } else if ([4, 6, 9, 11].some((item) =&gt; currents[1] + 1 === item)) {</span><br><span class="line">        this.days = []</span><br><span class="line">        for (let i = 1;i &lt; 31;i++) {</span><br><span class="line">          this.days.push(i)</span><br><span class="line">        }</span><br><span class="line">      } else if (</span><br><span class="line">        [1, 3, 5, 7, 8, 10, 12].some((item) =&gt; currents[1] + 1 === item)</span><br><span class="line">      ) {</span><br><span class="line">        this.days = []</span><br><span class="line">        for (let i = 1;i &lt; 32;i++) {</span><br><span class="line">          this.days.push(i)</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      this.pickerValue = currents</span><br><span class="line">      this.getDateTime(currents)</span><br><span class="line">    },</span><br><span class="line">    maskClick() {</span><br><span class="line">      this.$emit('update:visable', false)</span><br><span class="line">    },</span><br><span class="line">    pickerClose() {</span><br><span class="line">      console.log('我是取消')</span><br><span class="line">      this.maskClick()</span><br><span class="line">    },</span><br><span class="line">    pickerConfirm() {</span><br><span class="line">      const { resultDate, timeLimit } = this</span><br><span class="line">      const startTime = new Date(resultDate[0]).getTime()</span><br><span class="line">      const endTime = new Date(resultDate[1]).getTime()</span><br><span class="line">      const nowTime = timeLimit ? new Date().getTime() : endTime</span><br><span class="line">      if (startTime &lt;= endTime) {</span><br><span class="line">        if (endTime &lt;= nowTime) {</span><br><span class="line">          this.$emit('confirm', resultDate)</span><br><span class="line">          this.maskClick()</span><br><span class="line">        } else {</span><br><span class="line">          uni.showToast({</span><br><span class="line">            title: '时间不能超过今天',</span><br><span class="line">            icon: 'none'</span><br><span class="line">          })</span><br><span class="line">        }</span><br><span class="line">      } else {</span><br><span class="line">        uni.showToast({</span><br><span class="line">          title: '时间范围不正确！',</span><br><span class="line">          icon: 'none'</span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line">.pickerMask {</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 998;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  background: rgba(0, 0, 0, 0.6);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.picker-box {</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  transition: all 0.3s ease;</span><br><span class="line">  transform: translateY(100%);</span><br><span class="line">  z-index: 998;</span><br><span class="line"></span><br><span class="line">  .selectDate {</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 60rpx;</span><br><span class="line">    padding: 30rpx 30rpx;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line"></span><br><span class="line">    .selectDateTxt {</span><br><span class="line">      width: 112rpx;</span><br><span class="line">      height: 40rpx;</span><br><span class="line">      font-size: 28rpx;</span><br><span class="line">      font-family: 'PingFangSC-Medium', 'PingFang SC';</span><br><span class="line">      font-weight: 500;</span><br><span class="line">      color: #212034;</span><br><span class="line">      line-height: 40rpx;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  .lineshow {</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    background-color: #fff;</span><br><span class="line"></span><br><span class="line">    .line {</span><br><span class="line">      width: 690rpx;</span><br><span class="line">      border: 1rpx solid #f1eff3;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  .operate-box {</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    padding: 18rpx 30rpx;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 30rpx;</span><br><span class="line"></span><br><span class="line">    .time-box {</span><br><span class="line">      width: 100%;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      justify-content: space-around;</span><br><span class="line"></span><br><span class="line">      .time-item {</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  .button {</span><br><span class="line">    width: 100%;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    height: 157rpx;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line"></span><br><span class="line">    .buttonClose {</span><br><span class="line">      width: 330rpx;</span><br><span class="line">      height: 80rpx;</span><br><span class="line">      border-radius: 40rpx;</span><br><span class="line">      border: 1rpx solid #5368ef;</span><br><span class="line">      transform: rotateZ(360deg);</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      justify-content: center;</span><br><span class="line"></span><br><span class="line">      .buttonClosetxt {</span><br><span class="line">        width: 60rpx;</span><br><span class="line">        height: 42rpx;</span><br><span class="line">        font-size: 30rpx;</span><br><span class="line">        font-family: 'PingFangSC-Medium', 'PingFang SC';</span><br><span class="line">        font-weight: 400;</span><br><span class="line">        color: #5368ef;</span><br><span class="line">        line-height: 42rpx;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    .buttonConfirm {</span><br><span class="line">      width: 330rpx;</span><br><span class="line">      height: 80rpx;</span><br><span class="line">      background: linear-gradient(159deg, #7486fc 0%, #5368ef 100%);</span><br><span class="line">      border-radius: 35px;</span><br><span class="line">      margin-left: 30rpx;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      justify-content: center;</span><br><span class="line"></span><br><span class="line">      .buttonConfirmtxt {</span><br><span class="line">        width: 60rpx;</span><br><span class="line">        height: 42rpx;</span><br><span class="line">        font-size: 30rpx;</span><br><span class="line">        font-family: 'PingFangSC-Medium', 'PingFang SC';</span><br><span class="line">        font-weight: 400;</span><br><span class="line">        color: #fff;</span><br><span class="line">        line-height: 42rpx;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.picker-show {</span><br><span class="line">  transform: translateY(0);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.picker-view {</span><br><span class="line">  width: 750rpx;</span><br><span class="line">  height: 450rpx;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  padding-left: 5.5%;</span><br><span class="line"></span><br><span class="line">  .picker-item {</span><br><span class="line">    height: 42rpx;</span><br><span class="line">    font-family: 'PingFangSC-Medium', 'PingFang SC';</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    font-size: 30rpx;</span><br><span class="line">    color: #20253b ;</span><br><span class="line">    line-height: 42rpx;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    text-align: center;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><p>在需要这个用到的组件那块导入</p>
<blockquote>
<p>import termPicker from ‘@/components/term-picker/term-picker.vue’</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 日期选择 --&gt;</span><br><span class="line">  &lt;term-picker</span><br><span class="line">	visable.sync="showDateSelect"</span><br><span class="line">	:defaultDate="defaultDate"</span><br><span class="line">	:minYear="1990"</span><br><span class="line">    :timeLimit="true"</span><br><span class="line">    :deferYear="0"</span><br><span class="line">    themeColor="#5368ef"</span><br><span class="line">    @confirm="confirm"&gt;</span><br><span class="line">  &lt;/term-picker&gt;</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure>

<h4 id="Props-参数说明"><a href="#Props-参数说明" class="headerlink" title="Props 参数说明"></a>Props 参数说明</h4><table>
<thead>
<tr>
<th align="center">参数名</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">visable</td>
<td align="center">Boolean</td>
<td align="center">false</td>
<td align="center">日期选择控件的显示/隐藏，注意使用<code>.sync</code>修饰符(true: 显示; false: 隐藏)</td>
</tr>
<tr>
<td align="center">defaultDate</td>
<td align="center">Array</td>
<td align="center">[]</td>
<td align="center">默认预设值(比如:<code>['2021-06-01', '2021-07-01']</code>)</td>
</tr>
<tr>
<td align="center">minYear</td>
<td align="center">Number</td>
<td align="center">1990</td>
<td align="center">最小年份</td>
</tr>
<tr>
<td align="center">timeLimit</td>
<td align="center">Boolean</td>
<td align="center">false</td>
<td align="center">日期区间限制(true: 限制结束日期<code>&lt;=</code>当前日期; false: 不限制)</td>
</tr>
<tr>
<td align="center">deferYear</td>
<td align="center">Number</td>
<td align="center">0</td>
<td align="center">年份选项顺延数，仅当<code>timeLimit</code>为<code>false</code>时生效(举个栗子: <code>deferYear = 1</code>, 则年份选项的最大值为: <code>当前年份 + deferYear</code>)</td>
</tr>
<tr>
<td align="center">themeColor</td>
<td align="center">String</td>
<td align="center">#10BE9D</td>
<td align="center">选择框操作栏部分字体颜色</td>
</tr>
<tr>
<td align="center">startText</td>
<td align="center">String</td>
<td align="center">开始时间</td>
<td align="center">日期范围起始处文本</td>
</tr>
<tr>
<td align="center">endText</td>
<td align="center">String</td>
<td align="center">结束时间</td>
<td align="center">日期范围结束处文本</td>
</tr>
</tbody></table>
<h4 id="Events-事件说明"><a href="#Events-事件说明" class="headerlink" title="Events 事件说明"></a>Events 事件说明</h4><table>
<thead>
<tr>
<th align="center">事件名</th>
<th align="center">说明</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@confirm</td>
<td align="center">点击确定按钮，返回当前选择的值</td>
<td align="center"><code>Array</code>数组类型</td>
</tr>
</tbody></table>
</body></html>]]></content>
      <categories>
        <category>组件</category>
      </categories>
      <tags>
        <tag>组件封装</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(五)——使用valine评论系统</title>
    <url>/2022/10/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%BA%94)%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="一、hexo框架的主题使用valine"><a href="#一、hexo框架的主题使用valine" class="headerlink" title="一、hexo框架的主题使用valine"></a>一、hexo框架的主题使用valine</h1><h2 id="1-注册-Leancloud-账号"><a href="#1-注册-Leancloud-账号" class="headerlink" title="1. 注册 Leancloud 账号"></a><strong>1. 注册 Leancloud 账号</strong></h2><p>在leancloud官网注册一个账号，海外同学推荐使用leancloud国际版，国内同学可以使用华东或华北节点。</p>
<h1 id="2-创建应用获取appid和appkey"><a href="#2-创建应用获取appid和appkey" class="headerlink" title="2.创建应用获取appid和appkey"></a>2.创建应用获取appid和appkey</h1><p>注册完成后进入控制台-&gt;创建应用-&gt;创建开发版应用。创建完开发版应用如下：点击最右边小齿轮也就是设置，找到<code>应用凭证</code>，获取appid和appkey</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88cbb84d544c466fa8b242d80c6e0670~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>
<h2 id="3-配置valine"><a href="#3-配置valine" class="headerlink" title="3.配置valine"></a>3.配置valine</h2><p>最后去自己主题下的_config.yml文件下(注意不是根目录下的，是你克隆的主题的_config.yml)，配置一下valine，目前hexo官网给的许多主题都是可以用valine的，直接配置就行</p>
<p>以ayer主题为例，具体配置含义如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 启用Valine必须先创建leancloud应用， 获取 id|key 填入即可</span><br><span class="line">leancloud:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id:# 将应用key的App ID设置在这里</span><br><span class="line">  appkey: # 将应用key的App Key设置在这里</span><br><span class="line">valine:</span><br><span class="line">  enable: true #是否启用valine</span><br><span class="line">  notify: false# 邮箱通知 , https://github.com/xCss/Valine/wiki，默认为false</span><br><span class="line">  verify: false# 验证码 默认为false</span><br><span class="line">  placeholder: Just go go ^_^ # 初始化评论显示，根据自己修改，这里默认，</span><br><span class="line">  avatar: monsterid # 头像风格，默认为mm，可进入网址：https://valine.js.org/visitor.html查看头像设置，这里有许多头像风格，进行设置</span><br><span class="line">  guest_info: nick,mail,link # 自定义评论标题</span><br><span class="line">  pageSize: 10 # 分页大小，10页就自动分页</span><br><span class="line">  visitor: true # 是否允许游客评论 ，进入官网查看设置：https://valine.js.org/visitor.html</span><br></pre></td></tr></tbody></table></figure>

<h1 id="二、valine评论数据管理"><a href="#二、valine评论数据管理" class="headerlink" title="二、valine评论数据管理"></a>二、valine评论数据管理</h1><p>去LeanCloud的控制台找到数据存储=&gt;结构化数据=&gt;Comment,在这里你可以对评论的数据进行管理</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f28620488c6540d6b80756e2ac125719~tplv-k3u1fbpfcp-watermark.image" alt="1673512632892.png"></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>valine</tag>
      </tags>
  </entry>
  <entry>
    <title>vite 搭建vue3项目（一）</title>
    <url>/2022/10/08/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/vite%20%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">
</head><body># 一、创建项目

<h2 id="1-直接创建项目"><a href="#1-直接创建项目" class="headerlink" title="1.直接创建项目"></a>1.直接创建项目</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">使用 NPM:</span><br><span class="line">$ npm create vite@latest</span><br><span class="line">使用 Yarn:</span><br><span class="line">$ yarn create vite</span><br><span class="line">使用 PNPM:</span><br><span class="line">$ pnpm create vite</span><br><span class="line">然后按照提示操作即可！(选择vue，vue-ts)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-使用模板创建项目"><a href="#2-使用模板创建项目" class="headerlink" title="2.使用模板创建项目"></a>2.使用模板创建项目</h2><p>通过附加的命令行选项直接指定项目名称和你想要使用的模板例如，要构建一个 Vite + Vue 项目，运行:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">使用 npm 6.x：</span><br><span class="line">npm create vite@latest my-vue-app --template vue</span><br><span class="line">使用 npm 7+, extra double-dash is needed:</span><br><span class="line">npm create vite@latest my-vue-app -- --template vue</span><br><span class="line">使用 yarn：</span><br><span class="line">yarn create vite my-vue-app --template vue</span><br><span class="line">使用 pnpm：</span><br><span class="line">pnpm create vite my-vue-app --template vue</span><br></pre></td></tr></tbody></table></figure>

<p>然后npm i 或者 yarn install    运行yarn dev 看看浏览器运行成了没，第一步就大功告成了</p>
<h1 id="二、vite配置别名和环境变量的配置"><a href="#二、vite配置别名和环境变量的配置" class="headerlink" title="二、vite配置别名和环境变量的配置"></a>二、vite配置别名和环境变量的配置</h1><h2 id="1-配置别名"><a href="#1-配置别名" class="headerlink" title="1.配置别名"></a>1.配置别名</h2><p>使用编辑器VScode打开刚刚搭建好的项目 进入配置文件 vite.config.ts</p>
<p>配置别名后的vite.config.ts：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineConfig } <span class="keyword">from</span> <span class="string">'vite'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'@vitejs/plugin-vue'</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">dir: string</span>) =&gt; path.<span class="title function_">join</span>(__dirname, dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">	<span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">	<span class="attr">resolve</span>: {</span><br><span class="line">		<span class="attr">alias</span>: {</span><br><span class="line">			<span class="string">'@'</span>: <span class="title function_">resolve</span>(<span class="string">'src'</span>),</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>此时 TS 可能有这个错误提示：找不到模块“path”或其相应的类型声明</p>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install @types/node --save-dev或者yarn add @types/node --save-dev</span><br></pre></td></tr></tbody></table></figure>

<p>还需要在tsconfig.json的paths配置</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"baseUrl"</span><span class="punctuation">:</span> <span class="string">"."</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">"paths"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">     <span class="attr">"@/*"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">"src/*"</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">"comps/*"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">"src/components/*"</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">"views/*"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">"src/views/*"</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">"store/*"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">"src/store/*"</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-环境变量的配置"><a href="#2-环境变量的配置" class="headerlink" title="2.环境变量的配置"></a>2.环境变量的配置</h2><p>vite 提供了两种模式：具有开发服务器的开发模式（development）和生产模式（production）</p>
<p>项目根目录新建:.env.development :</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">NODE_ENV=development</span><br><span class="line"></span><br><span class="line">VITE_APP_WEB_URL= 'YOUR WEB URL'</span><br></pre></td></tr></tbody></table></figure>

<p>项目根目录新建:.env.production :</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">NODE_ENV=production</span><br><span class="line"></span><br><span class="line">VITE_APP_WEB_URL= 'YOUR WEB URL'</span><br></pre></td></tr></tbody></table></figure>

<p>组件中使用：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">console.log(import.meta.env.VITE_APP_WEB_URL)</span><br></pre></td></tr></tbody></table></figure>

<p>配置 package.json:</p>
<p>打包区分开发环境和生产环境</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">"build:dev": "vite build --mode development",</span><br><span class="line">"build:pro": "vite build --mode production",</span><br></pre></td></tr></tbody></table></figure>

<h1 id="三、配置跨域代理"><a href="#三、配置跨域代理" class="headerlink" title="三、配置跨域代理"></a>三、配置跨域代理</h1><p>在vite.config.ts中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">    <span class="attr">resolve</span>: {</span><br><span class="line">        <span class="attr">alias</span>: {</span><br><span class="line">            <span class="string">'@'</span>: <span class="title function_">resolve</span>(<span class="string">'src'</span>),</span><br><span class="line">            <span class="attr">comps</span>: <span class="title function_">resolve</span>(<span class="string">'src/components'</span>),</span><br><span class="line">            <span class="attr">apis</span>: <span class="title function_">resolve</span>(<span class="string">'src/apis'</span>),</span><br><span class="line">            <span class="attr">views</span>: <span class="title function_">resolve</span>(<span class="string">'src/views'</span>),</span><br><span class="line">            <span class="attr">utils</span>: <span class="title function_">resolve</span>(<span class="string">'src/utils'</span>),</span><br><span class="line">            <span class="attr">routes</span>: <span class="title function_">resolve</span>(<span class="string">'src/routes'</span>),</span><br><span class="line">            <span class="attr">styles</span>: <span class="title function_">resolve</span>(<span class="string">'src/styles'</span>)</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">server</span>: {</span><br><span class="line">     <span class="comment">// 配置前端服务地址和端口</span></span><br><span class="line">        <span class="comment">//服务器主机名</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="comment">//端口号</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">3088</span>,</span><br><span class="line">        <span class="comment">//设为 true 时若端口已被占用则会直接退出，而不是尝试下一个可用端口</span></span><br><span class="line">        <span class="attr">strictPort</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//服务器启动时自动在浏览器中打开应用程序,当此值为字符串时，会被用作 URL 的路径名</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//自定义代理规则</span></span><br><span class="line">        <span class="attr">proxy</span>: {</span><br><span class="line">            <span class="comment">// 选项写法</span></span><br><span class="line">            <span class="string">'/api'</span>: {</span><br><span class="line">                <span class="attr">target</span>: <span class="string">''</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">''</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>使用跨域代理：</p>
<p>​        用代理, 首先你得有一个标识, 告诉他你这个连接要用代理. 不然的话, 可能你的 html, css, js这些静态资源都跑去代理. 所以我们一般只有接口用代理, 静态文件用本地.‘/api’: {}, 就是告诉node, 我接口只有是’/api’开头的才用代理.所以你的接口就要这么写 /api/xx/xx. 最后代理的路径就是 <a href="http://xxx.xx.com/api/xx/xx.%E5%8F%AF%E6%98%AF%E4%B8%8D%E5%AF%B9%E5%95%8A">http://xxx.xx.com/api/xx/xx.可是不对啊</a>, 我正确的接口路径里面没有/api啊. 所以就需要 pathRewrite,把’/api’去掉, 这样既能有正确标识, 又能在请求接口的时候去掉api.</p>
<h1 id="四、添加-css-预处理器-sass"><a href="#四、添加-css-预处理器-sass" class="headerlink" title="四、添加 css 预处理器 sass"></a>四、添加 css 预处理器 sass</h1><p>安装 ：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install -D sass sass-loader</span><br><span class="line">或者yarn add sass sass-loader</span><br></pre></td></tr></tbody></table></figure>

<p>在 src/assets 下新增 style 文件夹，用于存放全局样式文件</p>
<h1 id="五、约束代码风格"><a href="#五、约束代码风格" class="headerlink" title="五、约束代码风格"></a>五、约束代码风格</h1><p>TypeScirpt 官方决定全面采用 ESLint 作为代码检查的工具，并创建了一个新项目 typescript-eslint，提供了 TypeScript 文件的解析器 @typescript-eslint/parser 和相关的配置选项 @typescript-eslint/eslint-plugin 等</p>
<h2 id="1-Eslint支持"><a href="#1-Eslint支持" class="headerlink" title="1.Eslint支持"></a><strong>1.Eslint支持</strong></h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># eslint 安装</span><br><span class="line">yarn add eslint --dev</span><br><span class="line"># eslint 插件安装</span><br><span class="line">yarn add eslint-plugin-vue --dev</span><br><span class="line"></span><br><span class="line">yarn add @typescript-eslint/eslint-plugin --dev</span><br><span class="line"></span><br><span class="line">yarn add eslint-plugin-prettier --dev</span><br><span class="line"></span><br><span class="line"># typescript parser</span><br><span class="line">yarn add @typescript-eslint/parser --dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">直接：npm i typescript eslint eslint-plugin-vue @typescript-eslint/parser @typescript-eslint/eslint-plugin -D</span><br></pre></td></tr></tbody></table></figure>

<p>注意: 如果 eslint 安装报错:</p>
<p>可以尝试运行以下命令:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yarn config set ignore-engines true</span><br></pre></td></tr></tbody></table></figure>

<p><strong>项目下新建 .eslintrc.js配置 eslint 校验规则:</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 需要安装依赖:  npm i eslint-define-config</span></span><br><span class="line"><span class="keyword">const</span> { defineConfig } = <span class="built_in">require</span>(<span class="string">'eslint-define-config'</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>({</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 指定如何解析语法。*/</span></span><br><span class="line">    <span class="attr">parser</span>: <span class="string">'vue-eslint-parser'</span>,</span><br><span class="line">    <span class="comment">/* 优先级低于parse的语法解析配置 */</span></span><br><span class="line">    <span class="attr">parserOptions</span>: {</span><br><span class="line">        <span class="attr">parser</span>: <span class="string">'@typescript-eslint/parser'</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// https://eslint.bootcss.com/docs/user-guide/configuring#specifying-globals</span></span><br><span class="line">    <span class="attr">globals</span>: {</span><br><span class="line">        <span class="title class_">Nullable</span>: <span class="literal">true</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">extends</span>: [</span><br><span class="line">        <span class="comment">// add more generic rulesets here, such as:</span></span><br><span class="line">        <span class="comment">// 'eslint:recommended',</span></span><br><span class="line">        <span class="comment">// 'plugin:vue/vue3-recommended',</span></span><br><span class="line">        <span class="comment">// 'plugin:vue/recommended' // Use this if you are using Vue.js 2.x.</span></span><br><span class="line"></span><br><span class="line">        <span class="string">'plugin:vue/vue3-recommended'</span>,</span><br><span class="line">        <span class="comment">// 此条内容开启会导致 全局定义的 ts 类型报  no-undef 错误，因为</span></span><br><span class="line">        <span class="comment">// https://cn.eslint.org/docs/rules/</span></span><br><span class="line">        <span class="string">'eslint:recommended'</span>,</span><br><span class="line">        <span class="string">'plugin:@typescript-eslint/recommended'</span>, <span class="comment">// typescript-eslint推荐规则,</span></span><br><span class="line">        <span class="string">'prettier'</span>,</span><br><span class="line">        <span class="string">'plugin:prettier/recommended'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">rules</span>: {</span><br><span class="line">        <span class="comment">// 'no-undef': 'off',</span></span><br><span class="line">        <span class="comment">// 禁止使用 var</span></span><br><span class="line">        <span class="string">'no-var'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="attr">semi</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">// 优先使用 interface 而不是 type</span></span><br><span class="line">        <span class="string">'@typescript-eslint/consistent-type-definitions'</span>: [<span class="string">'error'</span>, <span class="string">'interface'</span>],</span><br><span class="line">        <span class="string">'@typescript-eslint/no-explicit-any'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="string">'@typescript-eslint/explicit-module-boundary-types'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="string">'@typescript-eslint/ban-types'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="string">'@typescript-eslint/no-unused-vars'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="string">'vue/html-indent'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">attribute</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">baseIndent</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">closeBracket</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">alignAttributesVertically</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">ignores</span>: [],</span><br><span class="line">            },</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 关闭此规则 使用 prettier 的格式化规则， 感觉prettier 更加合理，</span></span><br><span class="line">        <span class="comment">// 而且一起使用会有冲突</span></span><br><span class="line">        <span class="string">'vue/max-attributes-per-line'</span>: [<span class="string">'off'</span>],</span><br><span class="line">        <span class="comment">// 强制使用驼峰命名</span></span><br><span class="line">        <span class="string">'vue/component-name-in-template-casing'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            <span class="string">'PascalCase'</span>,</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">registeredComponentsOnly</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">ignores</span>: [],</span><br><span class="line">            },</span><br><span class="line">        ],</span><br><span class="line">    },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p><strong>项目下新建 .eslintignore</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># eslint 忽略检查 (根据项目需要自行添加)</span><br><span class="line">node_modules</span><br><span class="line">dist</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-prettier支持"><a href="#2-prettier支持" class="headerlink" title="2.prettier支持"></a>2.prettier支持</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装 prettier</span><br><span class="line">yarn add prettier --dev</span><br></pre></td></tr></tbody></table></figure>

<p>解决 eslint 和 prettier 冲突</p>
<p>解决 ESLint 中的样式规范和 prettier 中样式规范的冲突，以 prettier 的样式规范为准，使 ESLint 中的样式规范自动失效</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装插件 eslint-config-prettier</span><br><span class="line">yarn add eslint-config-prettier --dev</span><br></pre></td></tr></tbody></table></figure>

<p><strong>项目下新建 .prettier.js</strong></p>
<p>配置 prettier 格式化规则:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">module.exports = {</span><br><span class="line">  tabWidth: 2,</span><br><span class="line">  jsxSingleQuote: true,</span><br><span class="line">  jsxBracketSameLine: true,</span><br><span class="line">  printWidth: 100,</span><br><span class="line">  singleQuote: true,</span><br><span class="line">  semi: false,</span><br><span class="line">  overrides: [</span><br><span class="line">    {</span><br><span class="line">      files: '*.json',</span><br><span class="line">      options: {</span><br><span class="line">        printWidth: 200,</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  ],</span><br><span class="line">  arrowParens: 'always',</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>项目下新建 .prettierignore</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 忽略格式化文件 (根据项目需要自行添加)</span><br><span class="line">node_modules</span><br><span class="line">dist</span><br></pre></td></tr></tbody></table></figure>

<p>package.json 配置:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "script": {</span><br><span class="line">    "lint": "eslint src --fix --ext .ts,.tsx,.vue,.js,.jsx",</span><br><span class="line">    "prettier": "prettier --write ."</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>上面配置完成后,可以运行以下<code>命令</code>测试下代码检查个<code>格式化</code>效果:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># eslint 检查</span><br><span class="line">yarn lint</span><br><span class="line"># prettier 自动格式化</span><br><span class="line">yarn prettier</span><br></pre></td></tr></tbody></table></figure>

<h1 id="六、安装路由"><a href="#六、安装路由" class="headerlink" title="六、安装路由"></a>六、安装路由</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装路由</span><br><span class="line">yarn add vue-router@4</span><br></pre></td></tr></tbody></table></figure>

<p>在 src 文件下新增 router 文件夹 =&gt; index.ts 文件,内容如下:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span> } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteRecordRaw</span>[] = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Login'</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'@/pages/login/Login.vue'</span>), <span class="comment">// 注意这里要带上 文件后缀.vue</span></span><br><span class="line">  },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure>

<p>修改入口文件 mian.ts :</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure>

<h1 id="七、axios统一请求封装"><a href="#七、axios统一请求封装" class="headerlink" title="七、axios统一请求封装"></a>七、axios统一请求封装</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装 axios</span><br><span class="line">yarn add axios</span><br><span class="line"># 安装 nprogress 用于请求 loading</span><br><span class="line"># 也可以根据项目需求自定义其它 loading</span><br><span class="line">yarn add nprogress</span><br><span class="line"># 类型声明，或者添加一个包含 `declare module 'nprogress'</span><br><span class="line">yarn add @types/nprogress --dev</span><br></pre></td></tr></tbody></table></figure>

<p>新增 service 文件夹，service 下新增 http.ts 文件以及 moudles 文件夹(存放各模块接口)和interface(公共ts)文件夹:</p>
<p>http.ts : 用于axios封装**</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//http.ts</span></span><br><span class="line"><span class="keyword">import</span> axios, { <span class="title class_">AxiosRequestConfig</span> } <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">'nprogress'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求头和请求路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">'/api'</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">'Content-Type'</span>] = <span class="string">'application/json;charset=UTF-8'</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  (config): <span class="title class_">AxiosRequestConfig</span>&lt;any&gt; =&gt; {</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">'token'</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) {</span><br><span class="line">      <span class="comment">//@ts-ignore</span></span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">token</span> = token</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  },</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> error</span><br><span class="line">  }</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 响应拦截</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">111</span>) {</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">'token'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="comment">// token过期操作</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">ResType</span>&lt;T&gt; {</span><br><span class="line">  <span class="attr">code</span>: number</span><br><span class="line">  data?: T</span><br><span class="line">  <span class="attr">msg</span>: string</span><br><span class="line">  err?: string</span><br><span class="line">}</span><br><span class="line">interface <span class="title class_">Http</span> {</span><br><span class="line">  get&lt;T&gt;(<span class="attr">url</span>: string, params?: unknown): <span class="title class_">Promise</span>&lt;<span class="title class_">ResType</span>&lt;T&gt;&gt;</span><br><span class="line">  post&lt;T&gt;(<span class="attr">url</span>: string, params?: unknown): <span class="title class_">Promise</span>&lt;<span class="title class_">ResType</span>&lt;T&gt;&gt;</span><br><span class="line">  upload&lt;T&gt;(<span class="attr">url</span>: string, <span class="attr">params</span>: unknown): <span class="title class_">Promise</span>&lt;<span class="title class_">ResType</span>&lt;T&gt;&gt;</span><br><span class="line">  <span class="title function_">download</span>(<span class="attr">url</span>: string): <span class="keyword">void</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">http</span>: <span class="title class_">Http</span> = {</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">url, params</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">get</span>(url, { params })</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">post</span>(<span class="params">url, params</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">post</span>(url, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">upload</span>(<span class="params">url, file</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">post</span>(url, file, {</span><br><span class="line">          <span class="attr">headers</span>: { <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span> },</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">download</span>(<span class="params">url</span>) {</span><br><span class="line">    <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'iframe'</span>)</span><br><span class="line">    iframe.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'none'</span></span><br><span class="line">    iframe.<span class="property">src</span> = url</span><br><span class="line">    iframe.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(iframe)</span><br><span class="line">    }</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe)</span><br><span class="line">  },</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br></pre></td></tr></tbody></table></figure>

<p>例如：moudles 下新增login文件夹，用于存放登录模块的请求接口,login 文件夹下分别新增 login.ts types.ts :</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'@/service/http'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> T <span class="keyword">from</span> <span class="string">'./types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">loginApi</span>: T.<span class="property">ILoginApi</span> = {</span><br><span class="line">    <span class="title function_">login</span>(<span class="params">params</span>){</span><br><span class="line">        <span class="keyword">return</span> http.<span class="title function_">post</span>(<span class="string">'/login'</span>, params)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> loginApi</span><br></pre></td></tr></tbody></table></figure>

<p>types.ts:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">ILoginParams</span> {</span><br><span class="line">    <span class="attr">userName</span>: string</span><br><span class="line">    <span class="attr">passWord</span>: string | number</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">ILoginApi</span> {</span><br><span class="line">    <span class="attr">login</span>: <span class="function">(<span class="params">params: ILoginParams</span>)=&gt;</span> <span class="title class_">Promise</span>&lt;any&gt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="八、状态管理-pinia"><a href="#八、状态管理-pinia" class="headerlink" title="八、状态管理 pinia"></a>八、状态管理 pinia</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">yarn add pinia@next</span><br></pre></td></tr></tbody></table></figure>

<p>在 <code>src</code> 文件夹下新增 <code>store</code> 文件夹,接在在 store 中新增 main.ts</p>
<p>main.ts 中增加</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"># 引入</span><br><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">"pinia"</span></span><br><span class="line"># 创建根存储库并将其传递给应用程序</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br></pre></td></tr></tbody></table></figure>

<h1 id="九、添加element-plus"><a href="#九、添加element-plus" class="headerlink" title="九、添加element-plus"></a>九、添加element-plus</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#安装 element-plus </span><br><span class="line">yarn add element-plus</span><br></pre></td></tr></tbody></table></figure>

<h2 id="1-element-plus按需引入"><a href="#1-element-plus按需引入" class="headerlink" title="1.element-plus按需引入"></a>1.element-plus按需引入</h2><p>需要用到两个插件unplugin-vue-components、unplugin-auto-import这两个插件。 </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm i unplugin-vue-components unplugin-auto-import -D</span><br></pre></td></tr></tbody></table></figure>

<p>另外这里要注意的是，由于使用了 unplugin-vue-components unplugin-auto-import 这两个插件，按需加载其实是不需要 import 组件，但如果使用Api创建组件，例如elmesage,elnotification这些，可以看到不 import 的话会提示错误，如果 import 又会导致样式的丢失,需要下载一个插件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yarn add unplugin-element-plus -D</span><br><span class="line">#或者 </span><br><span class="line">npm i unplugin-element-plus -D </span><br></pre></td></tr></tbody></table></figure>

<p>配置vite.config.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineConfig } <span class="keyword">from</span> <span class="string">"vite"</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">"@vitejs/plugin-vue"</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">"path"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">'unplugin-auto-import/vite'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">'unplugin-vue-components/vite'</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">ElementPlusResolver</span> } <span class="keyword">from</span> <span class="string">'unplugin-vue-components/resolvers'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">'unplugin-element-plus/vite'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">dir: string</span>) =&gt; path.<span class="title function_">join</span>(__dirname, dir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>({</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    }),</span><br><span class="line">    <span class="title class_">Components</span>({</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    }),</span><br><span class="line">    <span class="title class_">ElementPlus</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//配置别名</span></span><br><span class="line">  <span class="attr">resolve</span>: {</span><br><span class="line">    <span class="attr">alias</span>: {</span><br><span class="line">      <span class="string">"@"</span>: <span class="title function_">resolve</span>(<span class="string">"src"</span>),</span><br><span class="line">      <span class="attr">comps</span>: <span class="title function_">resolve</span>(<span class="string">"src/components"</span>),</span><br><span class="line">      <span class="attr">service</span>: <span class="title function_">resolve</span>(<span class="string">"src/service"</span>),</span><br><span class="line">      <span class="attr">views</span>: <span class="title function_">resolve</span>(<span class="string">"src/views"</span>),</span><br><span class="line">      <span class="attr">route</span>: <span class="title function_">resolve</span>(<span class="string">"src/route"</span>),</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line"> <span class="comment">// css:{</span></span><br><span class="line">    <span class="comment">//preprocessorOptions:{</span></span><br><span class="line">      <span class="comment">//scss:{</span></span><br><span class="line">      <span class="comment">//  additionalData:'@import "@/assets/style/main.scss";'</span></span><br><span class="line">     <span class="comment">// }</span></span><br><span class="line">    <span class="comment">//}</span></span><br><span class="line"> <span class="comment">// },</span></span><br><span class="line">  <span class="comment">//配置跨域代理</span></span><br><span class="line">  <span class="attr">server</span>: {</span><br><span class="line">    <span class="comment">// 配置前端服务地址和端口</span></span><br><span class="line">    <span class="comment">//服务器主机名</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="comment">//端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3088</span>,</span><br><span class="line">    <span class="comment">//设为 true 时若端口已被占用则会直接退出，而不是尝试下一个可用端口</span></span><br><span class="line">    <span class="attr">strictPort</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//服务器启动时自动在浏览器中打开应用程序,当此值为字符串时，会被用作 URL 的路径名</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//自定义代理规则</span></span><br><span class="line">    <span class="attr">proxy</span>: {</span><br><span class="line">      <span class="string">"/api"</span>: {</span><br><span class="line">        <span class="attr">target</span>: <span class="string">"http://localhost:3000"</span>, <span class="comment">//要代理的本地api地址，也可以换成线上测试地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//跨域</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">""</span>),</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-添加element-plus图标"><a href="#2-添加element-plus图标" class="headerlink" title="2.添加element-plus图标"></a>2.添加element-plus图标</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># NPM</span><br><span class="line">$ npm install @element-plus/icons-vue</span><br><span class="line"># Yarn</span><br><span class="line">$ yarn add @element-plus/icons-vue</span><br></pre></td></tr></tbody></table></figure>

<p>然后在main.ts中全局注册并使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">ElementPlusIconsVue</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">	app.<span class="title function_">component</span>(key, <span class="title class_">ElementPlusIconsVue</span>[key <span class="keyword">as</span> keyof <span class="keyword">typeof</span> <span class="title class_">ElementPlusIconsVue</span>]);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h1 id="十、svg图标插件使用"><a href="#十、svg图标插件使用" class="headerlink" title="十、svg图标插件使用"></a>十、svg图标插件使用</h1><h2 id="1-安装svg图标插件"><a href="#1-安装svg图标插件" class="headerlink" title="1.安装svg图标插件"></a>1.安装svg图标插件</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#安装插件vue-svg-icon</span><br><span class="line">npm install vue-svg-icon --save-dev</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-注册全局组件svgIcon"><a href="#2-注册全局组件svgIcon" class="headerlink" title="2. 注册全局组件svgIcon"></a>2. 注册全局组件svgIcon</h2><p>在main.ts中全局注册并使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span></span><br><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">"pinia"</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">'./components/SvgIcon/index.vue'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"element-plus/dist/index.css"</span></span><br><span class="line"><span class="comment">//样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/index.scss'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 注册element Icons组件</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">ElementPlusIconsVue</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">	app.<span class="title function_">component</span>(key, <span class="title class_">ElementPlusIconsVue</span>[key <span class="keyword">as</span> keyof <span class="keyword">typeof</span> <span class="title class_">ElementPlusIconsVue</span>]);</span><br><span class="line">});</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>()).<span class="title function_">component</span>(<span class="string">'svg-icon'</span>, <span class="title class_">SvgIcon</span>).<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-下载存放svg图标"><a href="#3-下载存放svg图标" class="headerlink" title="3.下载存放svg图标"></a>3.下载存放svg图标</h2><p>在src下新建assets=&gt;icons=&gt;svg文件夹，用来存放svg图标，所有下载的SVG图标放入其中</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20221008180639420.png" alt="image-20221008180639420"></p>
<h2 id="4-使用svg图标"><a href="#4-使用svg图标" class="headerlink" title="4. 使用svg图标"></a>4. 使用svg图标</h2><p>以bug.svg图标为例，修改scale的值调整图标的大小。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;svgIcon name="del" :scale="1" /&gt;</span><br></pre></td></tr></tbody></table></figure>

<h1 id="十一、untils文件夹"><a href="#十一、untils文件夹" class="headerlink" title="十一、untils文件夹"></a>十一、untils文件夹</h1><p>在根目录下新建一个untils文件夹，这个文件夹下的内容主要是导出常用的一些公共方法等等:</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20221008171843967.png" alt="image-20221008171843967"></p>
<p>untils=&gt;util.ts</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//常用的工具方法</span></span><br><span class="line"><span class="keyword">import</span> { isArray } <span class="keyword">from</span> <span class="string">"@/utils/is"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 获取localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} key Storage名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localGet</span>(<span class="params">key: string</span>) {</span><br><span class="line">	<span class="keyword">const</span> value = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">	<span class="keyword">try</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(key) <span class="keyword">as</span> string);</span><br><span class="line">	} <span class="keyword">catch</span> (error) {</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 存储localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} key Storage名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Any</span>} value Storage值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">void</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localSet</span>(<span class="params">key: string, value: any</span>) {</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 清除localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} key Storage名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">void</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localRemove</span>(<span class="params">key: string</span>) {</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 清除所有localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">void</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localClear</span>(<span class="params"></span>) {</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 对象数组深克隆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Object</span>} obj 源对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">object</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> deepCopy&lt;T&gt;(<span class="attr">obj</span>: any): T {</span><br><span class="line">	<span class="keyword">let</span> <span class="attr">newObj</span>: any;</span><br><span class="line">	<span class="keyword">try</span> {</span><br><span class="line">		newObj = obj.<span class="property">push</span> ? [] : {};</span><br><span class="line">	} <span class="keyword">catch</span> (error) {</span><br><span class="line">		newObj = {};</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> obj) {</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> obj[attr] === <span class="string">"object"</span>) {</span><br><span class="line">			newObj[attr] = <span class="title function_">deepCopy</span>(obj[attr]);</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			newObj[attr] = obj[attr];</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> newObj;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 判断数据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Any</span>} val 需要判断类型的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isType</span>(<span class="params">val: any</span>) {</span><br><span class="line">	<span class="keyword">if</span> (val === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">"object"</span>) <span class="keyword">return</span> <span class="keyword">typeof</span> val;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(val).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>).<span class="title function_">toLocaleLowerCase</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 生成随机数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Number</span>} min 最小值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Number</span>} max 最大值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">number</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">randomNum</span>(<span class="params">min: number, max: number</span>): number {</span><br><span class="line">	<span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (min - max) + max);</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 递归查询当前路由所对应的路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} menuList 菜单列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} path 当前地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">array</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> getTabPane&lt;T, U&gt;(<span class="attr">menuList</span>: any[], <span class="attr">path</span>: U): T {</span><br><span class="line">	<span class="keyword">let</span> <span class="attr">result</span>: any;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> menuList || []) {</span><br><span class="line">		<span class="keyword">if</span> (item.<span class="property">path</span> === path) result = item;</span><br><span class="line">		<span class="keyword">const</span> res = <span class="title function_">getTabPane</span>(item.<span class="property">children</span>, path);</span><br><span class="line">		<span class="keyword">if</span> (res) result = res;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 使用递归处理路由菜单，生成一维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} menuList 所有菜单列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} newArr 菜单的一维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">array</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleRouter</span>(<span class="params">routerList: Menu.MenuOptions[], newArr: string[] = []</span>) {</span><br><span class="line">	routerList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item: Menu.MenuOptions</span>) =&gt;</span> {</span><br><span class="line">		<span class="keyword">typeof</span> item === <span class="string">"object"</span> &amp;&amp; item.<span class="property">path</span> &amp;&amp; newArr.<span class="title function_">push</span>(item.<span class="property">path</span>);</span><br><span class="line">		item.<span class="property">children</span> &amp;&amp; item.<span class="property">children</span>.<span class="property">length</span> &amp;&amp; <span class="title function_">handleRouter</span>(item.<span class="property">children</span>, newArr);</span><br><span class="line">	});</span><br><span class="line">	<span class="keyword">return</span> newArr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 扁平化数组对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} arr 数组对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">array</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getFlatArr</span>(<span class="params">arr: any</span>) {</span><br><span class="line">	<span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre: any, current: any</span>) =&gt;</span> {</span><br><span class="line">		<span class="keyword">let</span> flatArr = [...pre, current];</span><br><span class="line">		<span class="keyword">if</span> (current.<span class="property">children</span>) flatArr = [...flatArr, ...<span class="title function_">getFlatArr</span>(current.<span class="property">children</span>)];</span><br><span class="line">		<span class="keyword">return</span> flatArr;</span><br><span class="line">	}, []);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 格式化表格单元格默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Number</span>} row 行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Number</span>} col 列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} callValue 当前单元格值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defaultFormat</span>(<span class="params">row: number, col: number, callValue: any</span>) {</span><br><span class="line">	<span class="comment">// 如果当前值为数组,使用 / 拼接（根据需求自定义）</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_">isArray</span>(callValue)) <span class="keyword">return</span> callValue.<span class="property">length</span> ? callValue.<span class="title function_">join</span>(<span class="string">" / "</span>) : <span class="string">"--"</span>;</span><br><span class="line">	<span class="keyword">return</span> callValue ?? <span class="string">"--"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 处理无数据情况</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} callValue 需要处理的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatValue</span>(<span class="params">callValue: any</span>) {</span><br><span class="line">	<span class="comment">// 如果当前值为数组,使用 / 拼接（根据需求自定义）</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_">isArray</span>(callValue)) <span class="keyword">return</span> callValue.<span class="property">length</span> ? callValue.<span class="title function_">join</span>(<span class="string">" / "</span>) : <span class="string">"--"</span>;</span><br><span class="line">	<span class="keyword">return</span> callValue ?? <span class="string">"--"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 根据枚举列表查询当需要的数据（如果指定了 label 和 value 的 key值，会自动识别格式化）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} callValue 当前单元格值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} enumData 枚举列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} type 过滤类型（目前只有 tag）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">filterEnum</span>(<span class="params">callValue: any, enumData: any, searchProps?: { [key: string]: any }, type?: string</span>): string {</span><br><span class="line">	<span class="keyword">const</span> value = searchProps?.<span class="property">value</span> ?? <span class="string">"value"</span>;</span><br><span class="line">	<span class="keyword">const</span> label = searchProps?.<span class="property">label</span> ?? <span class="string">"label"</span>;</span><br><span class="line">	<span class="keyword">let</span> <span class="attr">filterData</span>: any = {};</span><br><span class="line">	<span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(enumData)) filterData = enumData.<span class="title function_">find</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> item[value] === callValue);</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">"tag"</span>) <span class="keyword">return</span> filterData?.<span class="property">tagType</span> ? filterData.<span class="property">tagType</span> : <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">return</span> filterData ? filterData[label] : <span class="string">"--"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>is文件夹下的index.ts  常用的判断方式，is=&gt;index.ts</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 判断值是否未某个类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">is</span>(<span class="params">val: unknown, type: string</span>) {</span><br><span class="line">	<span class="keyword">return</span> toString.<span class="title function_">call</span>(val) === <span class="string">`[object <span class="subst">${type}</span>]`</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  是否为函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> isFunction&lt;T = <span class="title class_">Function</span>&gt;(<span class="attr">val</span>: unknown): val is T {</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">is</span>(val, <span class="string">"Function"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 是否已定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isDef = &lt;T = unknown&gt;(val?: T): val is T =&gt; {</span><br><span class="line">	return typeof val !== "undefined";</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">export const isUnDef = &lt;T = unknown&gt;(val?: T): val is T =&gt; {</span><br><span class="line">	return !isDef(val);</span><br><span class="line">};</span><br><span class="line">/**</span><br><span class="line"> * @description: 是否为对象</span><br><span class="line"> */</span><br><span class="line">export const isObject = (val: any): val is Record&lt;any, any&gt; =&gt; {</span><br><span class="line">	return val !== null &amp;&amp; is(val, "Object");</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为时间</span><br><span class="line"> */</span><br><span class="line">export function isDate(val: unknown): val is Date {</span><br><span class="line">	return is(val, "Date");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为数值</span><br><span class="line"> */</span><br><span class="line">export function isNumber(val: unknown): val is number {</span><br><span class="line">	return is(val, "Number");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为AsyncFunction</span><br><span class="line"> */</span><br><span class="line">export function isAsyncFunction&lt;T = any&gt;(val: unknown): val is Promise&lt;T&gt; {</span><br><span class="line">	return is(val, "AsyncFunction");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为promise</span><br><span class="line"> */</span><br><span class="line">export function isPromise&lt;T = any&gt;(val: unknown): val is Promise&lt;T&gt; {</span><br><span class="line">	return is(val, "Promise") &amp;&amp; isObject(val) &amp;&amp; isFunction(val.then) &amp;&amp; isFunction(val.catch);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为字符串</span><br><span class="line"> */</span><br><span class="line">export function isString(val: unknown): val is string {</span><br><span class="line">	return is(val, "String");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为boolean类型</span><br><span class="line"> */</span><br><span class="line">export function isBoolean(val: unknown): val is boolean {</span><br><span class="line">	return is(val, "Boolean");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为数组</span><br><span class="line"> */</span><br><span class="line">export function isArray(val: any): val is Array&lt;any&gt; {</span><br><span class="line">	return val &amp;&amp; Array.isArray(val);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 是否客户端</span><br><span class="line"> */</span><br><span class="line">export const isClient = () =&gt; {</span><br><span class="line">	return typeof window !== "undefined";</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 是否为浏览器</span><br><span class="line"> */</span><br><span class="line">export const isWindow = (val: any): val is Window =&gt; {</span><br><span class="line">	return typeof window !== "undefined" &amp;&amp; is(val, "Window");</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">export const isElement = (val: unknown): val is Element =&gt; {</span><br><span class="line">	return isObject(val) &amp;&amp; !!val.tagName;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">export const isServer = typeof window === "undefined";</span><br><span class="line"></span><br><span class="line">// 是否为图片节点</span><br><span class="line">export function isImageDom(o: Element) {</span><br><span class="line">	return o &amp;&amp; ["IMAGE", "IMG"].includes(o.tagName);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">export function isNull(val: unknown): val is null {</span><br><span class="line">	return val === null;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">export function isNullAndUnDef(val: unknown): val is null | undefined {</span><br><span class="line">	return isUnDef(val) &amp;&amp; isNull(val);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">export function isNullOrUnDef(val: unknown): val is null | undefined {</span><br><span class="line">	return isUnDef(val) || isNull(val);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="十二、typings-gt-global-d-ts放全局变量-命名空间"><a href="#十二、typings-gt-global-d-ts放全局变量-命名空间" class="headerlink" title="十二、typings->global.d.ts放全局变量,命名空间"></a>十二、typings-&gt;global.d.ts放全局变量,命名空间</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// * Menu</span><br><span class="line">declare namespace Menu {</span><br><span class="line">	interface MenuOptions {</span><br><span class="line">		path: string;</span><br><span class="line">		title: string;</span><br><span class="line">		icon?: string;</span><br><span class="line">		isLink?: string;</span><br><span class="line">		close?: boolean;</span><br><span class="line">		children?: MenuOptions[];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">declare type TabsOptions = Menu.MenuOptions &amp; {};</span><br><span class="line"></span><br><span class="line">// * Vite</span><br><span class="line">declare type Recordable&lt;T = any&gt; = Record&lt;string, T&gt;;</span><br><span class="line"></span><br><span class="line">declare interface ViteEnv {</span><br><span class="line">	VITE_API_URL: string;</span><br><span class="line">	VITE_PORT: number;</span><br><span class="line">	VITE_OPEN: boolean;</span><br><span class="line">	VITE_GLOB_APP_TITLE: string;</span><br><span class="line">	VITE_DROP_CONSOLE: boolean;</span><br><span class="line">	VITE_PROXY_URL: string;</span><br><span class="line">	VITE_BUILD_GZIP: boolean;</span><br><span class="line">	VITE_REPORT: boolean;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="十三、vue3-0使用tsx语法"><a href="#十三、vue3-0使用tsx语法" class="headerlink" title="十三、vue3.0使用tsx语法"></a>十三、vue3.0使用tsx语法</h1><p>1.下载</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yarn add @vitejs/plugin-vue-jsx -D</span><br></pre></td></tr></tbody></table></figure>

<p>2.引入</p>
<p>在vite.config.ts中</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import { defineConfig } from 'vite'</span><br><span class="line">import vue from '@vitejs/plugin-vue'</span><br><span class="line">import vueJsx from '@vitejs/plugin-vue-jsx';</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig({</span><br><span class="line">  plugins: [vue(),vueJsx()]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>3.tsconfig.json 配置文件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">"jsx": "preserve",</span><br><span class="line">"jsxFactory": "h",</span><br><span class="line">"jsxFragmentFactory": "Fragment",</span><br></pre></td></tr></tbody></table></figure>



<p><font color="#478fd2">参考文章：</font></p>
<p><a href="https://juejin.cn/post/7036745610954801166#heading-21">Vite2 + Vue3 + TypeScript + Pinia 搭建一套企业级的开发脚手架</a></p>
<p><a href="https://juejin.cn/user/3456520289517608/posts">Vue3 + Ts + ElementPlus + Vite2 从零搭建后台管理系统</a></p>
<p><a href="https://github.com/someGenki/vue-lite-admin">禾几元老哥的github源码</a></p>
</body></html>]]></content>
      <categories>
        <category>项目搭建</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vue3</tag>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础</title>
    <url>/2022/09/30/git%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="一、git基础"><a href="#一、git基础" class="headerlink" title="一、git基础"></a>一、git基础</h1><h2 id="重新下载git后"><a href="#重新下载git后" class="headerlink" title="重新下载git后"></a>重新下载git后</h2><p><strong>1.先配钥匙（钥匙的作用是把你电脑上面的git和github或gitab连接）</strong></p>
<p>$ ssh-keygen -t rsa -C “<a href="mailto:your_email@youremail.com">your_email@youremail.com</a>“ //注意啊孩子，双引号里面是你的邮箱(如果在公司你应该有自己的企业邮箱)。填你常用的就行。还有enter代表执行。</p>
<p>添加公钥到 Github(gitee等) 中</p>
<p>登录 github 账号，选中并打开 setting，选择 SSH and GPG keys，选择 New SSH key，在 Title 中填入题目，在 Key 中填入id_rsa.pub 文件中的公钥。</p>
<p>可用如下命令验证上述配置是否成功：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ssh -T [git@github.com](mailto:git@github.com) </span><br></pre></td></tr></tbody></table></figure>

<p><strong>2.配置user.name   user.email</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 配置用户名 </span><br><span class="line">git config --global user.name "xxx"                       </span><br><span class="line"># 配置邮件</span><br><span class="line">git config --global user.email "[xxx@xxx.com](mailto:xxx@xxx.com)"              </span><br></pre></td></tr></tbody></table></figure>

<p><strong>3.建本地仓库</strong></p>
<p>新建一个文件夹，用vscode打开该文件夹，git init，该命令执行完后会在当前目录生成一个 .git 目录</p>
<p><strong>4.添加远程地址（将本地仓库与远程仓库关联起来）</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git remote add origin [git@github.com](mailto:git@github.com)/你的github用户名/仓库名.git</span><br></pre></td></tr></tbody></table></figure>

<p><strong>5.新建一个txt文本，里面写点东西。我的命名为read</strong></p>
<p><strong>6.add和commit</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git add read.txt $ git commit -m "这是你commit的原因，写了方便你我他"</span><br></pre></td></tr></tbody></table></figure>

<p><strong>7.push推送到你的github</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure>

<p><strong>另外注意事项：</strong></p>
<p> 生成秘钥</p>
<p>  在windows下查看[c盘-&gt;用户-&gt;用户名-&gt;.ssh]下是否有id_rsa、id_rsa.pub文件</p>
<p>，如果没有需要手动生成</p>
<p>  打开git bash，在控制台中输入以下命令： $ ssh-keygen -t rsa -C “自己邮箱”。</p>
<hr>
<h2 id="创建分支流程"><a href="#创建分支流程" class="headerlink" title="创建分支流程"></a>创建分支流程</h2><p><strong>1.先切换到主分支，然后创建本地新分支</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git branch  &lt;BranchName&gt;（master）</span><br></pre></td></tr></tbody></table></figure>

<p><strong>2.显示所有本地分支（创建完看看本地有没有该分支）</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></figure>

<p><strong>3.切换分支(既然都创建了，肯定要用这个分支，切换到该分支)</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout &lt;BranchName&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>4.建立远程分支</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git push --set-upstream origin + 刚刚创建的分支名 </span><br></pre></td></tr></tbody></table></figure>

<h2 id="删除分支流程"><a href="#删除分支流程" class="headerlink" title="删除分支流程"></a>删除分支流程</h2><p><strong>1.切换分支(先切换到其他分支上)</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout  &lt;BranchName2&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>2.删除本地分支( 需要切换到别的分支上去删除)  命令行：</strong> </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git branch -d  &lt;BranchName&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>3.删除远程分支（没建立远程分支就不要没必要） 命令行</strong>：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git push origin --delete  &lt;BranchName&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Git-把master的内容更新到自己分支上"><a href="#Git-把master的内容更新到自己分支上" class="headerlink" title="Git 把master的内容更新到自己分支上"></a>Git 把master的内容更新到自己分支上</h2><p><strong>1.如果分支(将此分支暂命名为feature)有修改，则先提交修改的内容，如果没有，直接跳到下一步</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m “这是你commit的原因，写了方便你我他”</span><br></pre></td></tr></tbody></table></figure>

<p><strong>2.切换到master分支下</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></tbody></table></figure>

<p><strong>3.将远程的master代码pull拉取到本地</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></tbody></table></figure>

<p><strong>4.切换到自己分支下</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout  &lt;BranchName&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>5.合并master到自己分支</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git merge master</span><br></pre></td></tr></tbody></table></figure>

<p>如果在合并的过程中，例如提示Test.java文件出现冲突了，手动修改一下这个文件，修改成自己想要内容；如果没有出现冲突，vs code上下载git history插件 ，可以对比冲突，保留自己想要的代码，没有就直接跳到7步<br><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20221018105811855.png" alt="冲突解决"><br>上方的Accept Current Change等四种选择按钮，根据情况选择保留Current Change或者Incoming Change;颜色提示很明显，&lt;&lt;&lt;&lt;&lt;&lt; HEAD以下绿色部分是current change,同理蓝色部分是incoming.<br>both是全部保留</p>
<p><strong>6.添加修改的文件，将新添加的文件提交上去</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git add Test.java</span><br><span class="line"></span><br><span class="line">git commit -m “这是你commit的原因，写了方便你我他”</span><br></pre></td></tr></tbody></table></figure>

<p><strong>7.将本地分支的代码push到远程仓库对应的分支上</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git push origin  </span><br></pre></td></tr></tbody></table></figure>

<h1 id="测试通过后可以上线了将自己分支代码合并到master"><a href="#测试通过后可以上线了将自己分支代码合并到master" class="headerlink" title="测试通过后可以上线了将自己分支代码合并到master"></a>测试通过后可以上线了将自己分支代码合并到master</h1><p>1.需要先在，Git 把master的内容更新到自己分支上（在上面）</p>
<p>2.切换到master主分支 git checkout master</p>
<p>3.git pull一下</p>
<p>4.合并到master </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git merge （自己分支名字）</span><br></pre></td></tr></tbody></table></figure>

<p>5.在vscode 源代码管理工具或者sourecetree上对比一下自己提交的代码</p>
<p>5.git push 上传推送代码</p>
<h2 id="git-stash的使用"><a href="#git-stash的使用" class="headerlink" title="git stash的使用"></a>git stash的使用</h2><p>应用场景：某一天你正在 feature 分支开发新需求，突然产品经理跑过来说线上有bug，必须马上修复。而此时你的功能开发到一半，于是你急忙想切到 master 分支，然后你就会看到以下报错：</p>
<p>因为当前有文件更改了，需要提交commit保持工作区干净才能切分支</p>
<p>使用git stash代码就被存起来了</p>
<p>当你修复完线上问题，切回 feature 分支，想恢复代码也只需要：git stash apply</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">相关的命令</span><br><span class="line"># 保存当前未commit的代码</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"># 保存当前未commit的代码并添加备注</span><br><span class="line">git stash save "备注的内容"</span><br><span class="line"></span><br><span class="line"># 列出stash的所有记录</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"># 删除stash的所有记录</span><br><span class="line">git stash clear</span><br><span class="line"></span><br><span class="line"># 应用最近一次的stash</span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"># 应用最近一次的stash，随后删除该记录</span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"># 删除最近的一次stash</span><br><span class="line">git stash drop</span><br></pre></td></tr></tbody></table></figure>

<h2 id="git-reset-–soft的使用"><a href="#git-reset-–soft的使用" class="headerlink" title="git reset –soft的使用"></a>git reset –soft的使用</h2><p>应用场景1：有时候手滑不小心把不该提交的内容 commit 了，这时想改回来，只能再 commit 一次，又多一条“黑历史”。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 恢复最近一次 commit</span><br><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></tbody></table></figure>

<p>reset –soft 相当于后悔药，给你重新改过的机会。对于上面的场景，就可以再次修改重新提交，保持干净的 commit 记录</p>
<h1 id="二、电脑同时配置github与公司内部使用的gitlab"><a href="#二、电脑同时配置github与公司内部使用的gitlab" class="headerlink" title="二、电脑同时配置github与公司内部使用的gitlab"></a>二、电脑同时配置github与公司内部使用的gitlab</h1><p>下载git</p>
<p>生成对应的gitlab和github的公秘钥 ssh-keygen -t rsa -C “你的gitlab邮箱” -f ~/.ssh/id_rsa_gitlab ssh-keygen -t rsa -C “注册 github 账户的邮箱”</p>
<p>这样你会在.ssh文件夹(.ssh在哪具体百度去)，找到四个文件</p>
<p>这四个文件分别对应gitlab和github的公私钥，分别将gitlab和github的公钥配置到github和你公司的gitlab的ssh上</p>
<p>在.ssh目录下创建一个config文件，写入以下内容</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User zhangyao</span><br><span class="line">IdentityFile ~/.ssh/github_rsa </span><br><span class="line"></span><br><span class="line">Host hcgit.hengchang6.com</span><br><span class="line">HostName gitlab.com</span><br><span class="line">User zhangyao</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></tbody></table></figure>

<p>测试连接是否成功</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ssh -T git@gitlab</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"># Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"># 出现上边这句，表示链接成功</span><br></pre></td></tr></tbody></table></figure>

<p><font color="#478fd2">参考文章：</font><a href="https://blog.csdn.net/jueji1998/article/details/103815585">电脑同时配置github与公司内部使用的gitlab</a></p>
<h1 id="本地已有项目如何上传到github上"><a href="#本地已有项目如何上传到github上" class="headerlink" title="本地已有项目如何上传到github上"></a>本地已有项目如何上传到github上</h1><p>不和你多bb了,自己看：<a href="https://blog.csdn.net/weixin_44370837/article/details/121565864">本地已有项目如何上传到github上_前端学狗的博客-CSDN博客</a></p>
<h1 id="git-冲突相关"><a href="#git-冲突相关" class="headerlink" title="git 冲突相关"></a>git 冲突相关</h1><p><strong>#预防发生冲突的方法：在每次push前git pull一下，保证本地代码都是最新的。</strong></p>
<p><strong>#冲突解决方法：</strong></p>
<p>第一种冲突：在Git push的时候提示冲突了。</p>
<p>这种解决方法可以使用    git stash</p>
<p>保存本地代码，然后拉取最新的远程分支代码</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git fetch --all   //只是下载远程内容，不做任何合并  </span><br><span class="line">git reset --hard origin/master    //把HEAD指向刚下载的最新版本</span><br><span class="line">再使用git stash apply应用最近存储，重新push即可。</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>前端随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>前端路由随笔</title>
    <url>/2022/09/29/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、什么是路由？"><a href="#一、什么是路由？" class="headerlink" title="一、什么是路由？"></a>一、什么是路由？</h1><p>路由的概念起源于服务端，在以前前后端不分离的时候，由后端来控制路由，当接收到客户端发来的   <code>HTTP</code> 请求，就会根据所请求的相应 <code>URL</code>，来找到相应的映射函数，然后执行该函数，并将函数的返回值发送给客户端。对于最简单的静态资源服务器，可以认为，所有 <code>URL</code> 的映射函数就是一个文件读取操作。对于动态资源，映射函数可能是一个数据库读取操作，也可能是进行一些数据的处理等等。然后根据这些读取的数据，在服务器端就使用相应的模板来对页面进行渲染后，再返回渲染完毕的页面。它的好处与缺点非常明显，如下：</p>
<ul>
<li><p>好处：安全性好，<code>SEO</code> 好；</p>
</li>
<li><p>缺点：加大服务器的压力，不利于用户体验，代码冗合不好维护；</p>
</li>
</ul>
<p>也正是由于后端路由还存在着自己的不足，前端路由才有了自己的发展空间。对于前端路由来说，路由的映射函数通常是进行一些 <code>DOM</code> 的显示和隐藏操作。这样，当访问不同的路径的时候，会显示不同的页面组件。前端路由主要有以下两种实现方案：</p>
<ul>
<li><code>Hash</code></li>
<li><code>History</code><h1 id="二、前端路由Hash模式"><a href="#二、前端路由Hash模式" class="headerlink" title="二、前端路由Hash模式"></a>二、前端路由Hash模式</h1></li>
</ul>
<p>一个URL是由很多部分组成，包括协议、域名、路径、query、hash等，早期的前端路由的实现就是基于location.hash来实现的。其实现原理也很简单，location.hash的值就是URL中#后面的内容。例如：<a href="https://www.wdnmd.com/#666,%E5%AE%83%E7%9A%84location.hash='#666'">https://www.WDNMD.com#666,它的location.hash='#666'</a></p>
<h2 id="Hash模式的特性："><a href="#Hash模式的特性：" class="headerlink" title="Hash模式的特性："></a>Hash模式的特性：</h2><ol>
<li><p>URL中hash值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash部分不会被发送。</p>
</li>
<li><p>hash值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash的切换。</p>
</li>
<li><p>我们可以使用hashchange事件来监听hash的变化。(a标签和对loaction.hash进行赋值等等)</p>
<p>通过上面的了解，我们大概知道这些</p>
<ul>
<li><p>hash模式所有的工作都是在前端完成的，不需要后端服务的配合</p>
</li>
<li><p>hash模式的实现方式就是通过监听URL中hash部分的变化，从而做出对应的渲染逻辑</p>
</li>
<li><p>hash模式下，URL中会带有#，看起来不太美观</p>
<p>因此Hash模式还是有些小小的不足，History API也就出现了</p>
</li>
</ul>
</li>
</ol>
<h1 id="三、前端路由History-API模式"><a href="#三、前端路由History-API模式" class="headerlink" title="三、前端路由History API模式"></a>三、前端路由History API模式</h1><p>history路由模式的实现，是要归功于HTML5提供的一个history全局对象，可以将它理解为其中包含了关于我们访问网页（历史会话）的一些信息。window.history 属性指向 History 对象，它表示当前窗口的浏览历史。当发生改变时，只会改变页面的路径，不会刷新页面。 History 对象保存了当前窗口访问过的所有页面网址。通过 history.length 可以得出当前窗口一共访问过几个网址。 由于安全原因，浏览器不允许脚本读取这些地址，但是允许在地址之间导航。 浏览器工具栏的“前进”和“后退”按钮，其实就是对 History 对象进行操作。</p>
<p>同时它还暴露了一些有用的方法，比如：</p>
<ul>
<li>window.history.go 可以跳转到浏览器会话历史中的指定的某一个记录页</li>
<li>window.history.forward 指向浏览器会话历史中的下一页，跟浏览器的前进按钮相同</li>
<li>window.history.back 返回浏览器会话历史中的上一页，跟浏览器的回退按钮功能相同</li>
<li>window.history.pushState 可以将给定的数据压入到浏览器会话历史栈中</li>
<li>window.history.replaceState 将当前的会话页面的url替换成指定的数据</li>
</ul>
<p>而history路由的实现，主要就是依靠于pushState与replaceState实现的</p>
<p><font color="#478fd2">参考文章：</font></p>
<p><a href="https://juejin.cn/post/6844903906024095751">什么是路由？</a></p>
<p><a href="https://icode.best/i/13730847328933">vue路由模式及 history 模式下服务端配置</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(四)——关于我页面搭建</title>
    <url>/2022/09/28/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E5%9B%9B)%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E6%88%91%E9%A1%B5%E9%9D%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="关于我页面搭建"><a href="#关于我页面搭建" class="headerlink" title="关于我页面搭建"></a>关于我页面搭建</h1><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>都是开始整关于自己页面了，肯定需要把与自己相关的展示出来，例如你的github，gitee，掘金，csdn等等。当然，这里建议把Hexo和你使用的相关主题的链接也展示一下，毕竟，使用了别人开源的东西，多少要表示一下，哈哈。下面我的具体操作：</p>
<blockquote>
<p>在根目录下的source新建about文件夹，about=&gt;index.md,写入如下图的内容，其中type: ‘friends’ 和layout: ‘friends’是ayer主题原作者封装好的友情链接布局及操作，当然在此之前需要在themes=&gt;ayer=&gt;_config.yml的侧边栏菜单配置menu下配置   关于我: /about</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220928181752870.png"></p>
<p>链接相关配置也是在themes=&gt;ayer=&gt;_config.yml下配置，找到friends_link，图片地址和github链接填自己的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 友情链接</span><br><span class="line">friends_link:</span><br><span class="line">  DarknessZY:</span><br><span class="line">    url: https://github.com/DarknessZY</span><br><span class="line">    img: /images/github.png</span><br><span class="line">  耀耀切克闹灬:</span><br><span class="line">    url: https://juejin.cn/user/1781681116679854/columns</span><br><span class="line">    img: /images/juejin.png</span><br><span class="line">  Hexo官网:</span><br><span class="line">    url: https://hexo.io</span><br><span class="line">    img: /images/hexo.png</span><br><span class="line">  Ayer主题: #网站名称</span><br><span class="line">    #网站地址</span><br><span class="line">    url: https://github.com/Shen-Yu/hexo-theme-ayer</span><br><span class="line">    #网站图片(可忽略不写)</span><br><span class="line">    img: /images/ayer.png</span><br></pre></td></tr></tbody></table></figure>

<p>然后执行hexo命令，页面上就显示出来了：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0677d7cf6a9e471986f05d8becb63497~tplv-k3u1fbpfcp-watermark.image" alt="1673512329931.png"></p>
<h2 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h2><p>这块不能想之前那样直接写markdown就行了，需要自己写页面了，例如我的就是：找到ayer主题下的原作者写的友情链接的封装，themes=&gt;ayer=&gt;layout=&gt;_partial=&gt;friends.ejs,当然我的页面随便画画的，自己看着舒服就行了，最下面两个img标签，放的是收款码，有钱的捧个钱场，具体代码和效果如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;section class="outer"&gt;</span><br><span class="line">    &lt;% if(theme.friends_link &amp;&amp; theme.friends_link.length != 0){ %&gt;</span><br><span class="line">    &lt;h1 class="page-type-title"&gt;关于俺！&lt;/h1&gt;</span><br><span class="line">     &lt;!-- 打赏 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p style="font-size: 25px;font-weight: bolder;color: #dee1e6;"&gt;秋梨膏!请我杯喝茶怎么样!&lt;/p&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id="reword-out"&gt;</span><br><span class="line">        &lt;div id="reward-btn"&gt;</span><br><span class="line">          &lt;%= __('post.reward') %&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 介绍 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p style="font-size: 25px;font-weight: bolder;color: #dee1e6;"&gt; 一位正在北漂的菜鸡程序员&lt;/p&gt; </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span style="color: red;"&gt;&nbsp;姓名：张耀&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt; </span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span style="color: blue;"&gt; QQ：2498652509&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;有志同道合的小伙伴们可以加我qq，验证消息填'博客'+'你的姓名'，我就会通过！</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span style="color:greenyellow;"&gt;现居地：北京朝阳&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;  </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span style="color:orange;"&gt;家乡：湖北汉川&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;小县城一个，装满了故事，我有故事，你有酒吗？</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">        &lt;/div&gt;  </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 链接 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p style="font-size: 25px;font-weight: bolder;color: #dee1e6;"&gt; 点击进去看看吧!&lt;/p&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul id="friends_link"&gt;</span><br><span class="line">        &lt;% for (var i in theme.friends_link){ %&gt;</span><br><span class="line">        &lt;li class="friends_li"&gt;</span><br><span class="line">            &lt;a href="&lt;%- url_for(theme.friends_link[i].url) %&gt;" target="_blank" class="search-title"</span><br><span class="line">                &lt;% if (theme.friends_link[i].description){ %&gt;title="&lt;%= theme.friends_link[i].description %&gt;" &lt;% } %&gt;&gt;</span><br><span class="line">                &lt;% if (theme.friends_link[i].img){ %&gt;</span><br><span class="line">                &lt;img src="&lt;%- url_for(theme.friends_link[i].img) %&gt;"&gt;</span><br><span class="line">                &lt;% } else { %&gt;</span><br><span class="line">                &lt;i class="ri-user-fill"&gt;&lt;/i&gt;</span><br><span class="line">                &lt;% } %&gt;</span><br><span class="line">                &lt;%= i %&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;% } %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;%}%&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></tbody></table></figure>
<p> 具体页面如下：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/105de2b32abf4e6cb882ace37923faa7~tplv-k3u1fbpfcp-watermark.image" alt="1673512358047.png"></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo框架</tag>
      </tags>
  </entry>
  <entry>
    <title>前端兼容性问题</title>
    <url>/2022/09/26/border%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、CSS样式兼容"><a href="#一、CSS样式兼容" class="headerlink" title="一、CSS样式兼容"></a>一、CSS样式兼容</h1><h2 id="1-border移动端兼容"><a href="#1-border移动端兼容" class="headerlink" title="1.border移动端兼容"></a>1.border移动端兼容</h2><p>box-shadow， border等不明原因被遮挡的问题；小于1px的边框在部分机型显示不全 或 完全渲染不出来的问题，这个是在工作中UI走查，查出来的，刚开始我还不知道为什么，还是经验太浅了，哈哈！</p>
<h3 id="方案一-transform-rotateZ-360deg"><a href="#方案一-transform-rotateZ-360deg" class="headerlink" title="方案一 transform rotateZ(360deg)"></a>方案一 transform rotateZ(360deg)</h3><p>此方法也能解决 box-shadow， border等不明原因被遮挡的问题</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">border: 0.5px solid #000;</span><br><span class="line">border-radius: 0.5px;</span><br><span class="line"></span><br><span class="line">// 解决ios边框显示一半的问题</span><br><span class="line">transform: rotateZ(360deg);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="方案二-和UI沟通，尽量避免使用0-5px的边，线（推荐）"><a href="#方案二-和UI沟通，尽量避免使用0-5px的边，线（推荐）" class="headerlink" title="方案二 和UI沟通，尽量避免使用0.5px的边，线（推荐）"></a>方案二 和UI沟通，尽量避免使用0.5px的边，线（推荐）</h3><p>0.5px的边线在移动端渲染还有一些未知的问题，建议尽量不要使用0.5px的边线</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// iphone XS 把0.5px的dashed 虚线  渲染成了 border-bottom 0.5px dotted #C4C4C9</span><br><span class="line">border-bottom: 0.5px dashed #C4C4C9;</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>前端兼容性问题</category>
      </categories>
      <tags>
        <tag>前端兼容</tag>
      </tags>
  </entry>
  <entry>
    <title>npm随笔</title>
    <url>/2022/09/26/npm%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、npm-安装中的-i、-g、–save、–save-dev、-D、-S的区别"><a href="#一、npm-安装中的-i、-g、–save、–save-dev、-D、-S的区别" class="headerlink" title="一、npm 安装中的 i、-g、–save、–save-dev、-D、-S的区别"></a>一、npm 安装中的 i、-g、–save、–save-dev、-D、-S的区别</h1><h2 id="基本说明："><a href="#基本说明：" class="headerlink" title="基本说明："></a>基本说明：</h2><ul>
<li><strong><code>i</code></strong> 是 <strong><code>install</code></strong> 的简写</li>
<li><strong><code>-g</code></strong> 是全局安装，不带 <strong><code>-g</code></strong> 会安装在个人文件夹</li>
<li><strong><code>-S</code></strong> 是 <strong><code>--save</code></strong> 的简写，安装包信息会写入 <strong><code>dependencies</code></strong> 中</li>
<li><strong><code>-D</code></strong> 是 <strong><code>--save-dev</code></strong> 的简写，安装包写入 <strong><code>devDependencies</code></strong> 中</li>
</ul>
<h2 id="dependencies-与-devDependencies："><a href="#dependencies-与-devDependencies：" class="headerlink" title="dependencies 与 devDependencies："></a>dependencies 与 devDependencies：</h2><ul>
<li><p><strong><code>dependencies</code></strong> 生产阶段的依赖,也就是项目运行时的依赖</p>
</li>
<li><p><strong><code>devDependencies</code></strong> 开发阶段的依赖，就是我们在开发过程中需要的依赖，只在开发阶段起作用的</p>
<p>例如：你写 ES6 代码，需要 babel 转换成 es5 ，转换完成后，我们只需要转换后的代码，上线的时候，直接把转换后的代码部署到生产环境，不需要 bebal 了，生产环境不需要。这就可以安装到 devDependencies ，再比如说代码提示工具，也可以安装到 devDependencies，如果你用了 <code>Element-UI</code>，由于发布到生产后还是依赖 <code>Element-UI</code>，这就可以安装到 <strong><code>dependencies</code></strong></p>
</li>
</ul>
<h1 id="二、全局安装和本地安装"><a href="#二、全局安装和本地安装" class="headerlink" title="二、全局安装和本地安装"></a>二、全局安装和本地安装</h1><h2 id="全局安装："><a href="#全局安装：" class="headerlink" title="全局安装："></a>全局安装：</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install &lt;pageName&gt; -g//（这里-g是-global的简写）</span><br></pre></td></tr></tbody></table></figure>

<p>通过上面的命令行（带-g修饰符）安装某个包，就叫全局安装。通常全局包安装在node目录下的node_modules文件夹。可以通过执行下面几条命令查看node、npm的安装目录和全局包的安装目录。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">which node   // 查看node的安装目录</span><br><span class="line">which npm   // 查看npm的安装目录</span><br><span class="line">npm root -g // 查看全局包的安装目录</span><br><span class="line">npm list -g --depth 0 //查看全局安装过的</span><br></pre></td></tr></tbody></table></figure>

<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装:"></a>本地安装:</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install &lt;pageName&gt; (后面可以加几种修饰符，主要有两种--save-dev和--save)</span><br></pre></td></tr></tbody></table></figure>

<p>通过上面的命令行安装某个包，就叫本地安装。包安装在你当前项目文件夹下的node_modules文件夹中。</p>
<h3 id="全局安装的作用"><a href="#全局安装的作用" class="headerlink" title="全局安装的作用:"></a>全局安装的作用:</h3><p>全局安装的包可提供直接执行的命令(例：gulp -h可以查看gulp定义了什么命令)。 比如gulp全局安装后，可以在命令行上直接执行gulp -v、gulp -h等（原理：全局安装的gulp会将其package.json中的bin命令注入到了全局环境，使得你可以全局执行：gulp xxx命令，这另一个话题了，不深入）。倘若只在本地安装了gulp，未在全局安装gulp，直接执行这些命令会报错。你想要执行相应的命令则可能需要例如：node ./node_modules/gulp/bin/gulp.js -v(查看版本) 这样用一大串命令来执行。因此全局安装就发挥到他的好处了，一个gulp -v就搞定</p>
<p>当然，不是每个包都必须要全局安装的，一般在项目中需要用到该包定义的命令才需要全局安装。比如gulp <taskname>执行gulp任务…等，所以是否需要全局安装取决于我们如何使用这个包。全局安装的就像全局变量有点粗糙，但在某些情况下也是必要的，全局包很重要，但如果不需要，最好避免使用。</taskname></p>
<h2 id="可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？"><a href="#可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？" class="headerlink" title="可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？"></a>可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？</h2><ol>
<li>如果只是全局安装了而没本地安装，就得require(‘<pagepath>‘) 例：引入一个全局的包可能就是requirt(‘/usr/local/….’)通过全局包的路径引入，这样显然十分的不灵活。如果安装了本地包，那么就<strong>可以直接require(‘<pagename>‘)引入使用。</pagename></strong></pagepath></li>
<li>一个包通常会在不同的项目上会重复用到，如果只全局安装，那么当某个项目需要该包更新版本时，更新后可能就会影响到其他同样引用该包的项目，因此本地安装可以更灵活地在不同的项目使用不同版本的包，并避免全局包污染的问题。</li>
</ol>
<p>一个经验法则：要用到该包的命令执行任务的就需要全局安装，要通过require引入使用的就需要本地安装（ 但实际开发过程中，我们也不怎么需要考虑某个包是全局安装还是本地安装，因为这一点在该包的官网上一般会明确指出，以上是为了理解全局安装和本地安装）。</p>
<p>参考：<a href="https://segmentfault.com/a/1190000017787636?utm_source=tag-newest">node.js - npm(你怕吗) 全局安装与本地安装、开发依赖和生产依赖_个人文章 - SegmentFault 思否</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(三)——博客在多台终端同步管理</title>
    <url>/2022/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%B8%89)%E2%80%94%E2%80%94%E5%8D%9A%E5%AE%A2%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>我们利用 Hexo 框架在本地搭建了一个精美的博客，可是只能本地访问，要想发布到互联网上，还需要将它部署在网站上。博客的功能只要能阅读文章就够了，因此可以考虑将其部署在提供静态网页托管服务的网站上，许多平台都提供了静态网页托管服务，其中最方便的当然是 GitHub Pages，只需要注册一个账号就可以使用。GitHub Pages的服务器毕竟在国外，如果觉得访问太慢，也可以选择国内功能相似的 Gitee Pages。本篇文章介绍怎样利用 GitHub 提供的免费静态网页托管服务 GitHub Pages 建站。后面我应该还是会选择部署在服务</p>
</blockquote>
<h2 id="一、GitHub-Pages"><a href="#一、GitHub-Pages" class="headerlink" title="一、GitHub Pages"></a>一、GitHub Pages</h2><p>GitHub 是世界上最流行的软件源代码托管服务平台，为什么要提供网页托管服务呢？</p>
<p>这是因为一个项目的主页如果只有源码，对新接触的人很不友好，不知从何处下手。虽然已经有了 readme.md 文件，但毕竟不如一个直观的网页来的直接。于是 GitHub 就设计了 Pages 功能，允许用户设计一个图文并茂的网页作为项目首页。</p>
<p>虽然 GitHub Pages 的初衷是提供自定义的项目首页，但是它的玩法不止这一个。因此许多博主都用这个功能来搭建自己的博客，因为它实在是太太方便了。</p>
<p>去GitHub Pages 官网&nbsp;<a href="https://pages.github.com/">pages.github</a>&nbsp;，拉到最后，可以看到官方也推荐使用 GitHub Pages 搭建博客，并且提供了示例教程。</p>
<h2 id="二、GitHub-Pages-准备"><a href="#二、GitHub-Pages-准备" class="headerlink" title="二、GitHub Pages 准备"></a>二、GitHub Pages 准备</h2><p>前提是你拥有一个gitHub账号</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55c5bbc9dd884b1d93177eb4027589dd~tplv-k3u1fbpfcp-watermark.image" alt="1673508844010.png"><br>由于每个 GitHub 账户只能建立一个 GitHub Pages 页面，所以 Repository name 必须填<code>&lt;你的用户名&gt;.github.io</code>，否则就会建立一个普通仓库，GitHub Pages 功能不会生效。比如用户名是<code>jacksparrow</code>，Repository name 这里就填<code>jacksparrow.github.io</code>，不知道用户名是哪个，可以点击页面右上角头像，看到第一行“Signed in as&nbsp;<code>xxx</code>”字样，&nbsp;<code>xxx</code>即为这里的用户名。</p>
<p>Description 填写仓库描述，比如&nbsp;<code>jacksparrow's blog</code>等，可不填。</p>
<p>注意勾选&nbsp;<code>Public</code>&nbsp;，否则 GitHub Pages 功能不会生效。建议勾选&nbsp;<code>Add a README file</code>，会自动生成一个&nbsp;<code>readme.md</code>文件。</p>
<p>最后点击<code>Create repository</code>创建仓库。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eac6665e8b8940889f29256f59320b31~tplv-k3u1fbpfcp-watermark.image" alt="1673509175671.png"><br>我们可以通过输入网址<code>https://&lt;你的用户名&gt;.github.io</code>，来访问到这个仓库里面的内容。</p>
<h2 id="三、GitHub-Pages-发布"><a href="#三、GitHub-Pages-发布" class="headerlink" title="三、GitHub Pages 发布"></a>三、GitHub Pages 发布</h2><p>我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。当然，对于 Hexo 来说，提交部署只需要几条命令。</p>
<h2 id="四、Hexo-Git-Github博客在多台终端同步管理"><a href="#四、Hexo-Git-Github博客在多台终端同步管理" class="headerlink" title="四、Hexo+Git+Github博客在多台终端同步管理"></a>四、<a href="https://so.csdn.net/so/search?q=Hexo&amp;spm=1001.2101.3001.7020">Hexo</a>+Git+Github博客在多台终端同步管理</h2><p>此方法利用Git管理Hexo产生的文件，实现在不同的电脑上同步（<a href="https://so.csdn.net/so/search?q=Github&amp;spm=1001.2101.3001.7020">Github</a>）所需的文件，也可以正常的在不同的Hexo环境里进行相应操作，只要在做完之后同步到Github的仓库里即可。下面具体来说说：</p>
<p>网上基本上都是这个思路：</p>
<h3 id="Github-分支管理Hexo环境目录"><a href="#Github-分支管理Hexo环境目录" class="headerlink" title="Github 分支管理Hexo环境目录"></a>Github 分支管理Hexo环境目录</h3><p>主要是通过维护两条git分支来实现，第一个分支是 Gihub 上默认的 master 分支，用于存放发布的博文的静态页面；另外再新建一个分支，比如命名为 Hexo ，通过此分支存放主题、原始的博客文件等等，这些文件才是不同电脑需要同步的文件；当每次修改主题或者新增博文后，先将修改的主题文件（在themes文件夹下）或者新增博客（在source文件夹下），同步到远程的 Hexo 分支，然后在通过 hexo g -d命令发布博文，也就是将新增的博文的静态页面同步到 master 分支。这样通过不同的分支管理不同的文件，实现了多台电脑同步更新博文的功能。！</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">├── .<span class="property">gitignore</span></span><br><span class="line">├── .<span class="property">deploy_git</span></span><br><span class="line">|   ├── ...</span><br><span class="line">|   ├── ...</span><br><span class="line">|   └── ...</span><br><span class="line">├── node_modules</span><br><span class="line">├── public</span><br><span class="line">├── package-lock.<span class="property">json</span></span><br><span class="line">├── db.<span class="property">json</span></span><br><span class="line">├── _config.<span class="property">yml</span></span><br><span class="line">├── package.<span class="property">json</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>其中 .deploy_git、public 两个文件夹下存放的是博客文章的静态页面，通过对比 Github 上博客仓库的master分支可以看到master分支下面的文件结构和 .deploy_git 文件夹下的文件是一致的，这个应该可以判断通过 hexo g -d 发布到 Github 的内容就是 .deploy_git 文件夹下面的文件。其余的文件夹和文件即是Hexo的主题文件、原始的博客文件等，刚在上文提到的Hexo分支，存的即时这些文件</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>在PC b，</p>
<h4 id="初始化分支"><a href="#初始化分支" class="headerlink" title="初始化分支"></a>初始化分支</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git clone 仓库地址（自己的仓库地址）</span><br></pre></td></tr></tbody></table></figure>

<p>将仓库文件拉取到本地，生成的文件名为 username.github.io；进入username.github.io文件夹，除了 <em>.git</em> 文件夹以外，其他文件全部删除；同时添加.gitnore</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line"># 添加git忽略</span><br></pre></td></tr></tbody></table></figure>

<p>提交本次修改</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m “提交说明”</span><br><span class="line">git push origin Hexo</span><br></pre></td></tr></tbody></table></figure>

<h4 id="同步分支（PC2上面操作）"><a href="#同步分支（PC2上面操作）" class="headerlink" title="同步分支（PC2上面操作）"></a>同步分支（PC2上面操作）</h4><p>git pull拉取远程hexo分支的代码</p>
<p>但是暂时不要提交，先安装hexo环境去</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装 hexo 框架</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 安装 hexo 依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>

<p>然后再执行</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure>

<p>这时你文件夹下多出了db.json，node_modules，public，还会多一个.deploy_git（hexo打包后上传到master主分支的静态博客文件夹）因为我用了yarn，所以会有yarn.lock，这个无关紧要，这时git提交上去就行，最后的文件目录如这样</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2747fbb084084f968bb07799807a7058~tplv-k3u1fbpfcp-watermark.image" alt="1673511752083.png"></p>
<p><strong>文章内更新点东西，加一句话什么的，再去执行hexo的命令</strong></p>
<p>过会再去打开https://你的用户名.github.io，更新了就代表没问题了</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/steven_zdg988/article/details/111240905">Hexo+Git+Github博客在多台终端同步管理_HackerEric的博客-CSDN博客</a></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>同步管理</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(二)——hexo主题搭建</title>
    <url>/2022/09/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%BA%8C)%E2%80%94%E2%80%94hexo%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">


</head><body><h1 id="一、更换-Hexo-博客主题"><a href="#一、更换-Hexo-博客主题" class="headerlink" title="一、更换 Hexo 博客主题"></a>一、更换 Hexo 博客主题</h1><h2 id="1-如何找主题"><a href="#1-如何找主题" class="headerlink" title="1. 如何找主题"></a>1. 如何找主题</h2><p>默认主题非常简洁，适合大佬使用，像我等菜鸟，自己不会做却又想使用花里胡哨的主题，就要学会找主题了。</p>
<p>下面是我寻找主题的三个方法。</p>
<ul>
<li><p><strong>官方网站</strong></p>
<p>Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。</p>
<p>在 Hexo 官网点击“主题”，或者直接进入 Hexo 主题页：<a href="https://hexo.io/themes/">themes</a></p>
<p>通过上方的搜索框可以根据标签搜索。</p>
</li>
</ul>
<h2 id="2-github开源Hexo-博客主题"><a href="#2-github开源Hexo-博客主题" class="headerlink" title="2.github开源Hexo 博客主题"></a>2.github开源Hexo 博客主题</h2><p>大多数流行的主题都在 GitHub 托管开源了，我们可以直接去 GitHub 下载。</p>
<p>在 Github 官网搜索<code>hexo-theme</code>，选择<code>All GitHub</code>，或者直接进入搜索页：<a href="https://github.com/search?q=hexo-theme">search?q=hexo-theme</a></p>
<p>市面上使用比较多的主题：</p>
<ul>
<li><strong>Next</strong></li>
</ul>
<p>Demo 示例：<a href="https://theme-next.js.org/">NexT</a> | <a href="https://dandyxu.me/">Dandy</a> | <a href="https://raincal.com/">Raincal</a></p>
<p>GitHub 主页：<a href="https://github.com/iissnan/hexo-theme-next">hexo-theme-next</a></p>
<p>这个是 Hexo 最流行的主题，GitHub 上 15.5k stars，在 Hexo 主题中排行第一。</p>
<ul>
<li><strong>matery</strong></li>
</ul>
<p>Demo 示例：<a href="http://blinkfox.com/">闪烁之狐</a></p>
<p>GitHub 主页：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p>
<p>本菜鸟使用的主题就是以简约为主：</p>
<ul>
<li><strong>ayer</strong></li>
</ul>
<p>Demo 示例：<a href="https://shen-yu.gitee.io/">岛</a></p>
<p>GitHub 主页：<a href="https://github.com/Shen-Yu/hexo-theme-ayer">hexo-theme-ayer</a></p>
<h2 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3.更换主题"></a>3.更换主题</h2><p>以 <strong>ayer</strong> 主题为例。</p>
<p>在 vs code中根目录下，右键新建终端，执行下面命令：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-theme-ayer -S</span><br><span class="line">#如果hexo &lt; 5.0</span><br><span class="line"># 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git</span><br><span class="line">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></tbody></table></figure>
<p>此时打开博客根目录下的 themes 文件夹可以看到多了个 ayer 文件夹。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14089c4ea9a040c9b675ad91230683c8~tplv-k3u1fbpfcp-watermark.image" alt="1673503194683.png"></p>
<p>然后用记事本打开博客根目录下的 _config.yml (<code>D:\MyBlog_config.yml</code>)，找到<code>theme</code>标签，默认值是<code>landscape</code>主题，把它改为要更换的主题名字<code>ayer</code>，然后执行启动命令。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"># 清理 &amp;&amp; 生成 &amp;&amp; 启动</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b169bc466154832b63b76d2170de1b6~tplv-k3u1fbpfcp-watermark.image" alt="1673503295276.png"></p>
<p>这1时再到浏览器打开网址<code>http://localhost:3000</code>，可以看到我们的博客已经换上一款非常精美的主题。</p>
<h1 id="二-本地写博客"><a href="#二-本地写博客" class="headerlink" title="二.本地写博客"></a>二.本地写博客</h1><p><strong>利用Markdown语法的软件写博客，本地试运行：</strong></p>
<p>这里推荐使用Typora或uTools的Markdown笔记功能，具体怎么使用这两款软件， 就和掘金写文章差不多，官方都有说明。其中Typora现在开始收费了，但可以去下载老版本，老版本是免费的，具体操作可以按：</p>
<p><a href="http://www.itmind.net/16468.html">Typora免费版</a></p>
<p>根据这个网址上面来操作，下载老版本的Typora，但具体还能用多久就不知道了，有钱的小伙伴可以直接去官网下载正版，本人老穷b了。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a1d6ef57b314c3dae17ac224cc8b66d~tplv-k3u1fbpfcp-watermark.image" alt="5CBFAEB737CB3B14DDC82E5F0B6A357B.gif"></p>
<p>把写好的文章复制到根目录下的source=&gt;_posts</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2782defc88e84650bb394e8ff971f37d~tplv-k3u1fbpfcp-watermark.image" alt="1673503721548.png"><br>然后执行命令：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></tbody></table></figure>
<p>本地看时就发现文章已经有了:</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03993c78db734feba5d08a0baf347424~tplv-k3u1fbpfcp-watermark.image" alt="1673503821935.png"></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo框架</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(一)——本地搭建hexo框架</title>
    <url>/2022/09/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%B8%80)%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<html><head><meta name="referrer" content="no-referrer">

</head><body><h1 id="一、hexo框架"><a href="#一、hexo框架" class="headerlink" title="一、hexo框架"></a>一、hexo框架</h1><h2 id="1-什么是-Hexo？"><a href="#1-什么是-Hexo？" class="headerlink" title="1.什么是 Hexo？"></a>1.什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="2-安装前提"><a href="#2-安装前提" class="headerlink" title="2.安装前提"></a>2.安装前提</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a> 步骤。</p>
<p>如果您的电脑中尚未安装所需要的程序，请自行百度按指示完成安装。</p>
<h2 id="3-安装-Hexo"><a href="#3-安装-Hexo" class="headerlink" title="3.安装 Hexo"></a>3.安装 Hexo</h2><h3 id="（1）本地安装-hexo"><a href="#（1）本地安装-hexo" class="headerlink" title="（1）本地安装 hexo"></a>（1）本地安装 hexo</h3><p>首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。取名 MyBlog。</p>
<p>使用VS code 打开该文件夹，右键打开终端</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装 hexo 框架</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 初始化文件夹</span><br><span class="line">hexo init</span><br><span class="line"># 安装 hexo 依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>

<p>命令很好理解，第一行安装 hexo 模块，<code>-g</code>表示安装全局模块；第二行是 hexo 初始化，会用 <code>git clone</code>命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。</p>
<h3 id="（2）可能遇到的问题"><a href="#（2）可能遇到的问题" class="headerlink" title="（2）可能遇到的问题"></a>（2）可能遇到的问题</h3><ul>
<li><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></li>
</ul>
<p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是<code>https://registry.npmjs.org/</code>。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 查看 npm 源</span><br><span class="line">npm config get registry</span><br><span class="line"># 临时修改 npm 源安装 hexo (仅本条命令有效)</span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class="line"># 或者永久修改 npm 源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>

<p>如果是公司内网使用代理访问外网 (比如<code>ping registry.npmjs.org</code> <code>ping registry.npm.taobao.org</code>都不通)，可以尝试给 npm 配置代理解决，再重新执行安装命令。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 设置代理</span><br><span class="line">npm config set proxy http://serverip:port</span><br><span class="line">npm confit set https-proxy http:/serverip:port</span><br><span class="line"># 设置带用户名密码的代理</span><br><span class="line">npm config set proxy http://username:password@serverip:port</span><br><span class="line">npm confit set https-proxy http://username:password@serverip:port</span><br><span class="line"># 取消代理</span><br><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><strong><code>hexo init</code>命令执行卡住，或者报错连接不上</strong></li>
</ul>
<p>同上设置代理</p>
<h2 id="4-运行本地博客"><a href="#4-运行本地博客" class="headerlink" title="4.运行本地博客"></a>4.运行本地博客</h2><p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。</p>
<p>在vs code 的终端中运行命令</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 生成静态网站</span><br><span class="line">hexo g</span><br><span class="line"># 启动服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure>

<p>点击运行成功后的出来的地址</p>
<p>自此一个简单的本地博客诞生了</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19b093769be04ecf8581612935219aa3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo框架</tag>
      </tags>
  </entry>
  <entry>
    <title>TS基础</title>
    <url>/2022/09/22/Typescript/</url>
    <content><![CDATA[<html><head></head><body><h3 id="一、基础类型"><a href="#一、基础类型" class="headerlink" title="一、基础类型"></a>一、基础类型</h3><p>1.布尔类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let bool: boolean;</span><br><span class="line">bool = false;</span><br><span class="line">bool = 123; // Error：不能将类型“number”分配给类型“boolean”。</span><br></pre></td></tr></tbody></table></figure>

<p>2.数值类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let num：number = 123</span><br></pre></td></tr></tbody></table></figure>

<p>3.字符串类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let str: string;</span><br><span class="line">str = 'bac';</span><br><span class="line">str = `数值是${num}`;</span><br></pre></td></tr></tbody></table></figure>

<p>4.数组类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let arr1: number[];</span><br><span class="line">arr1 = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">let arr2: Array&lt;number&gt;;</span><br><span class="line">arr2 = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">let arr3: (string | number)[];</span><br><span class="line">arr3 = [1, '2', 3];</span><br></pre></td></tr></tbody></table></figure>

<p>5.元组类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let tuple: [string, number, boolean];</span><br><span class="line">tuple = ['a', 1, false]; // 必须按照上面的顺序和类型</span><br><span class="line">tuple = ['a', false, false]; // Error：不能将类型“boolean”分配给类型“number”。</span><br><span class="line">tuple = ['a', 1, false, 12]; // Error：不能将类型“[string, number, false, number]”分配给类型“[string, number, boolean]”。</span><br></pre></td></tr></tbody></table></figure>

<p>6.枚举类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">enum Roles {</span><br><span class="line">  SUPER_ADMIN, // 0</span><br><span class="line">  ADMIN, // 1</span><br><span class="line">  USER // 2</span><br><span class="line">}</span><br><span class="line">console.log(Roles.SUPER_ADMIN); // 0</span><br><span class="line">console.log(Roles[Roles.SUPER_ADMIN]); // SUPER_ADMIN</span><br></pre></td></tr></tbody></table></figure>

<p>7.any类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let value: any;</span><br><span class="line">value = 'abc'</span><br><span class="line">value =2</span><br><span class="line">value = [1,2,3]</span><br><span class="line">let arr: any[] = [1,'a']</span><br></pre></td></tr></tbody></table></figure>

<p>8.void类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const consoleText = (text: string): void =&gt; { // 不返回内容</span><br><span class="line">  console.log(text);</span><br><span class="line">};</span><br><span class="line">let v: void;</span><br><span class="line">v = undefined;</span><br><span class="line">v = null; // tsconfig的strict需要关掉</span><br></pre></td></tr></tbody></table></figure>

<p>9.null和undefined</p>
<p>null 和 undefined 是其他类型的子类型</p>
<p>10.never类型</p>
<p>表示永远不存在的类型，抛错or死循环，返回值就是 never 类型。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const errorFunc = (message: string): never =&gt; {</span><br><span class="line">  throw new Error(message);</span><br><span class="line">};</span><br><span class="line">const infiniteFunc = (): never =&gt; {</span><br><span class="line">  while(true) {}</span><br><span class="line">};</span><br><span class="line">// let neverVariable: never</span><br><span class="line">let neverVariable = (() =&gt; {</span><br><span class="line">  while(true) {}</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure>

<p>11.对象类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">function getObject(obj: object): void {</span><br><span class="line">  console.log(obj);</span><br><span class="line">}</span><br><span class="line">getObject({ name: 'dylan' });</span><br><span class="line">getObject(123); // Error：类型“number”的参数不能赋给类型“object”的参数。</span><br></pre></td></tr></tbody></table></figure>

<p>12.类型断言</p>
<p>值 as 类型</p>
<p>或 &lt;类型&gt;值</p>
<h3 id="二、Symbol"><a href="#二、Symbol" class="headerlink" title="二、Symbol"></a>二、Symbol</h3><p>Symbol值是独一无二的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const s1 = Symbol(); // Symbol()</span><br><span class="line">const s2 = Symbol(); // Symbol()</span><br><span class="line">s1 === s2; // false</span><br></pre></td></tr></tbody></table></figure>

<p>目前来说工作上遇到的少</p>
<h3 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h3><p>我们可以使用接口来进行限制，使数据更加清晰直观</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">interface NameInfo {</span><br><span class="line">  firstName?: string;//?代表可选参数，没?不传这个值会报错</span><br><span class="line">  readonly lastName: string; //只读属性，不能更改NameInfo.lastName的值</span><br><span class="line">}</span><br><span class="line">const getFullName = ({ firstName, lastName }: NameInfo): string =&gt; {</span><br><span class="line">  return `${firstName} ${lastName}`;</span><br><span class="line">};</span><br><span class="line">getFullName({</span><br><span class="line">  firstName: 'haha',</span><br><span class="line">  lastName: 'Lv'</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>多传入参数时使用类型断言或者索引签名</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">interface Vegetable {</span><br><span class="line">  color?: string;</span><br><span class="line">  type: string;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">const getVegetables = ({ color, type }: Vegetable) =&gt; {</span><br><span class="line">  return `A ${color ? (color + ' ') : ''}${type}`;</span><br><span class="line">};</span><br><span class="line">getVegetables({ type: 'tomato', size: 2 }); // Error：类型“{ type: string; size: number; }”的参数不能赋给类型“Vegetable”的参数。</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//类型断言</span><br><span class="line">getVegetables({ type: 'tomato', size: 2 } as Vegetable);</span><br><span class="line"></span><br><span class="line">//索引签名</span><br><span class="line">interface Vegetable {</span><br><span class="line">  color?: string;</span><br><span class="line">  type: string;</span><br><span class="line">  [prop: string]: any; // 索引签名</span><br><span class="line">}</span><br><span class="line">getVegetables({ type: 'tomato', size: 2 });</span><br></pre></td></tr></tbody></table></figure>

<p>定义函数结构</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// 等同于类型别名：type AddFunc = (num1: number, num2: number) =&gt; number;</span><br><span class="line">interface AddFunc {</span><br><span class="line">  (num1: number, num2: number): number</span><br><span class="line">}</span><br><span class="line">const add: AddFunc = (n1, n2) =&gt; n1 + n2;</span><br></pre></td></tr></tbody></table></figure>

<p>索引类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">interface RoleDic {</span><br><span class="line">  [id: number]: string;//id这个索引只能为数值类型</span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure>

<p>接口的继承</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">interface Vegetables {</span><br><span class="line">  color: string;</span><br><span class="line">}</span><br><span class="line">interface Tomato extends Vegetables {</span><br><span class="line">  radius: number;</span><br><span class="line">}</span><br><span class="line">const tomato: Tomato = {</span><br><span class="line">  radius: 1,</span><br><span class="line">  color: 'red'</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<h3 id="四、泛型-T"><a href="#四、泛型-T" class="headerlink" title="四、泛型 T"></a>四、泛型 T</h3><p>为什么要用泛型？ 可以在函数调用时自由化传入的值和返回的值</p>
<p>使用范型约束函数类型：与之前不同的地方在于多了 T 这个泛型参数，可以理解为这个函数：传入了 T（某个类型）作为 value 的类型，返回由 T组成的数组</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//&lt;T&gt; 表示声明一个表示类型的变量，Value: T 表示声明参数是 T 类型的，后面的 : T 表示返回值也是 T 类型的</span><br><span class="line">const getArray = &lt;T&gt;(value: T, times: number = 5): T[] =&gt; {</span><br><span class="line">  return new Array(times).fill(value)</span><br><span class="line">} //如果使用any[]参数也可以任意传，但是也丢失了类型检测的功能</span><br><span class="line"></span><br><span class="line">//第一个T为string，那么value: T也该为string</span><br><span class="line">getArray&lt;string&gt;('abc').map(item =&gt; item.length); // [3, 3, 3, 3, 3]</span><br></pre></td></tr></tbody></table></figure>

<p>使用两个范型变量</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// 参数1是T类型，参数2是U类型，返回类型是元组类型 T,U组成的数组</span><br><span class="line">const getArray = &lt;T, U&gt;(param1: T, param2: U, times: number): [T, U][] =&gt; {</span><br><span class="line">  return new Array(times).fill([param1, param2]);</span><br><span class="line">};</span><br><span class="line">// 也可以明确泛型调用，不明确的话，TS会自动推导泛型类型：getArray&lt;number, string&gt;(1, 'a', 3);</span><br><span class="line">getArray(1, 'a', 3); // [[1, 'a'], [1, 'a'], [1, 'a']]</span><br></pre></td></tr></tbody></table></figure>

<br>

<h3 id="五、交叉类型"><a href="#五、交叉类型" class="headerlink" title="五、交叉类型"></a>五、交叉类型</h3><p>交叉类型就是取多个类型的并集，使用 &amp; 符号定义。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const mergeFunc = &lt;T, U&gt;(arg1: T, arr2: U): T &amp; U =&gt; {</span><br><span class="line">  let res = {} as T &amp; U; // 使用类型断言来告诉TS这里是（T和U）的交叉类型</span><br><span class="line">  res = Object.assign(arg1, arr2);</span><br><span class="line">  return res;</span><br><span class="line">};</span><br><span class="line">mergeFunc({ a: 'a' }, { b: 'b' });</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>Web前端学习</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
