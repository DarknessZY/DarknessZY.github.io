<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TS基础</title>
    <url>/2022/09/22/Typescript/</url>
    <content><![CDATA[<h3 id="一、基础类型"><a href="#一、基础类型" class="headerlink" title="一、基础类型"></a>一、基础类型</h3><p>1.布尔类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let bool: boolean;</span><br><span class="line">bool = false;</span><br><span class="line">bool = 123; // Error：不能将类型“number”分配给类型“boolean”。</span><br></pre></td></tr></table></figure>

<p>2.数值类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let num：number = 123</span><br></pre></td></tr></table></figure>

<p>3.字符串类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: string;</span><br><span class="line">str = &#x27;bac&#x27;;</span><br><span class="line">str = `数值是$&#123;num&#125;`;</span><br></pre></td></tr></table></figure>

<p>4.数组类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr1: number[];</span><br><span class="line">arr1 = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">let arr2: Array&lt;number&gt;;</span><br><span class="line">arr2 = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">let arr3: (string | number)[];</span><br><span class="line">arr3 = [1, &#x27;2&#x27;, 3];</span><br></pre></td></tr></table></figure>

<p>5.元组类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let tuple: [string, number, boolean];</span><br><span class="line">tuple = [&#x27;a&#x27;, 1, false]; // 必须按照上面的顺序和类型</span><br><span class="line">tuple = [&#x27;a&#x27;, false, false]; // Error：不能将类型“boolean”分配给类型“number”。</span><br><span class="line">tuple = [&#x27;a&#x27;, 1, false, 12]; // Error：不能将类型“[string, number, false, number]”分配给类型“[string, number, boolean]”。</span><br></pre></td></tr></table></figure>

<p>6.枚举类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum Roles &#123;</span><br><span class="line">  SUPER_ADMIN, // 0</span><br><span class="line">  ADMIN, // 1</span><br><span class="line">  USER // 2</span><br><span class="line">&#125;</span><br><span class="line">console.log(Roles.SUPER_ADMIN); // 0</span><br><span class="line">console.log(Roles[Roles.SUPER_ADMIN]); // SUPER_ADMIN</span><br></pre></td></tr></table></figure>

<p>7.any类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let value: any;</span><br><span class="line">value = &#x27;abc&#x27;</span><br><span class="line">value =2</span><br><span class="line">value = [1,2,3]</span><br><span class="line">let arr: any[] = [1,&#x27;a&#x27;]</span><br></pre></td></tr></table></figure>

<p>8.void类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const consoleText = (text: string): void =&gt; &#123; // 不返回内容</span><br><span class="line">  console.log(text);</span><br><span class="line">&#125;;</span><br><span class="line">let v: void;</span><br><span class="line">v = undefined;</span><br><span class="line">v = null; // tsconfig的strict需要关掉</span><br></pre></td></tr></table></figure>

<p>9.null和undefined</p>
<p>null 和 undefined 是其他类型的子类型</p>
<p>10.never类型</p>
<p>表示永远不存在的类型，抛错or死循环，返回值就是 never 类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const errorFunc = (message: string): never =&gt; &#123;</span><br><span class="line">  throw new Error(message);</span><br><span class="line">&#125;;</span><br><span class="line">const infiniteFunc = (): never =&gt; &#123;</span><br><span class="line">  while(true) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">// let neverVariable: never</span><br><span class="line">let neverVariable = (() =&gt; &#123;</span><br><span class="line">  while(true) &#123;&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>11.对象类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getObject(obj: object): void &#123;</span><br><span class="line">  console.log(obj);</span><br><span class="line">&#125;</span><br><span class="line">getObject(&#123; name: &#x27;dylan&#x27; &#125;);</span><br><span class="line">getObject(123); // Error：类型“number”的参数不能赋给类型“object”的参数。</span><br></pre></td></tr></table></figure>

<p>12.类型断言</p>
<p>值 as 类型</p>
<p>或 &lt;类型&gt;值</p>
<h3 id="二、Symbol"><a href="#二、Symbol" class="headerlink" title="二、Symbol"></a>二、Symbol</h3><p>Symbol值是独一无二的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const s1 = Symbol(); // Symbol()</span><br><span class="line">const s2 = Symbol(); // Symbol()</span><br><span class="line">s1 === s2; // false</span><br></pre></td></tr></table></figure>

<p>目前来说工作上遇到的少</p>
<h3 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h3><p>我们可以使用接口来进行限制，使数据更加清晰直观</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface NameInfo &#123;</span><br><span class="line">  firstName?: string;//?代表可选参数，没?不传这个值会报错</span><br><span class="line">  readonly lastName: string; //只读属性，不能更改NameInfo.lastName的值</span><br><span class="line">&#125;</span><br><span class="line">const getFullName = (&#123; firstName, lastName &#125;: NameInfo): string =&gt; &#123;</span><br><span class="line">  return `$&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line">&#125;;</span><br><span class="line">getFullName(&#123;</span><br><span class="line">  firstName: &#x27;haha&#x27;,</span><br><span class="line">  lastName: &#x27;Lv&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>多传入参数时使用类型断言或者索引签名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Vegetable &#123;</span><br><span class="line">  color?: string;</span><br><span class="line">  type: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const getVegetables = (&#123; color, type &#125;: Vegetable) =&gt; &#123;</span><br><span class="line">  return `A $&#123;color ? (color + &#x27; &#x27;) : &#x27;&#x27;&#125;$&#123;type&#125;`;</span><br><span class="line">&#125;;</span><br><span class="line">getVegetables(&#123; type: &#x27;tomato&#x27;, size: 2 &#125;); // Error：类型“&#123; type: string; size: number; &#125;”的参数不能赋给类型“Vegetable”的参数。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//类型断言</span><br><span class="line">getVegetables(&#123; type: &#x27;tomato&#x27;, size: 2 &#125; as Vegetable);</span><br><span class="line"></span><br><span class="line">//索引签名</span><br><span class="line">interface Vegetable &#123;</span><br><span class="line">  color?: string;</span><br><span class="line">  type: string;</span><br><span class="line">  [prop: string]: any; // 索引签名</span><br><span class="line">&#125;</span><br><span class="line">getVegetables(&#123; type: &#x27;tomato&#x27;, size: 2 &#125;);</span><br></pre></td></tr></table></figure>

<p>定义函数结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 等同于类型别名：type AddFunc = (num1: number, num2: number) =&gt; number;</span><br><span class="line">interface AddFunc &#123;</span><br><span class="line">  (num1: number, num2: number): number</span><br><span class="line">&#125;</span><br><span class="line">const add: AddFunc = (n1, n2) =&gt; n1 + n2;</span><br></pre></td></tr></table></figure>

<p>索引类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface RoleDic &#123;</span><br><span class="line">  [id: number]: string;//id这个索引只能为数值类型</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>接口的继承</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Vegetables &#123;</span><br><span class="line">  color: string;</span><br><span class="line">&#125;</span><br><span class="line">interface Tomato extends Vegetables &#123;</span><br><span class="line">  radius: number;</span><br><span class="line">&#125;</span><br><span class="line">const tomato: Tomato = &#123;</span><br><span class="line">  radius: 1,</span><br><span class="line">  color: &#x27;red&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="四、泛型-T"><a href="#四、泛型-T" class="headerlink" title="四、泛型 T"></a>四、泛型 T</h3><p>为什么要用泛型？ 可以在函数调用时自由化传入的值和返回的值</p>
<p>使用范型约束函数类型：与之前不同的地方在于多了 T 这个泛型参数，可以理解为这个函数：传入了 T（某个类型）作为 value 的类型，返回由 T组成的数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//&lt;T&gt; 表示声明一个表示类型的变量，Value: T 表示声明参数是 T 类型的，后面的 : T 表示返回值也是 T 类型的</span><br><span class="line">const getArray = &lt;T&gt;(value: T, times: number = 5): T[] =&gt; &#123;</span><br><span class="line">  return new Array(times).fill(value)</span><br><span class="line">&#125; //如果使用any[]参数也可以任意传，但是也丢失了类型检测的功能</span><br><span class="line"></span><br><span class="line">//第一个T为string，那么value: T也该为string</span><br><span class="line">getArray&lt;string&gt;(&#x27;abc&#x27;).map(item =&gt; item.length); // [3, 3, 3, 3, 3]</span><br></pre></td></tr></table></figure>

<p>使用两个范型变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 参数1是T类型，参数2是U类型，返回类型是元组类型 T,U组成的数组</span><br><span class="line">const getArray = &lt;T, U&gt;(param1: T, param2: U, times: number): [T, U][] =&gt; &#123;</span><br><span class="line">  return new Array(times).fill([param1, param2]);</span><br><span class="line">&#125;;</span><br><span class="line">// 也可以明确泛型调用，不明确的话，TS会自动推导泛型类型：getArray&lt;number, string&gt;(1, &#x27;a&#x27;, 3);</span><br><span class="line">getArray(1, &#x27;a&#x27;, 3); // [[1, &#x27;a&#x27;], [1, &#x27;a&#x27;], [1, &#x27;a&#x27;]]</span><br></pre></td></tr></table></figure>

<br/>

<h3 id="五、交叉类型"><a href="#五、交叉类型" class="headerlink" title="五、交叉类型"></a>五、交叉类型</h3><p>交叉类型就是取多个类型的并集，使用 &amp; 符号定义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const mergeFunc = &lt;T, U&gt;(arg1: T, arr2: U): T &amp; U =&gt; &#123;</span><br><span class="line">  let res = &#123;&#125; as T &amp; U; // 使用类型断言来告诉TS这里是（T和U）的交叉类型</span><br><span class="line">  res = Object.assign(arg1, arr2);</span><br><span class="line">  return res;</span><br><span class="line">&#125;;</span><br><span class="line">mergeFunc(&#123; a: &#x27;a&#x27; &#125;, &#123; b: &#x27;b&#x27; &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web前端学习</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(一)——本地搭建hexo框架</title>
    <url>/2022/09/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%B8%80)%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="一、hexo框架"><a href="#一、hexo框架" class="headerlink" title="一、hexo框架"></a>一、hexo框架</h1><h2 id="1-什么是-Hexo？"><a href="#1-什么是-Hexo？" class="headerlink" title="1.什么是 Hexo？"></a>1.什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="2-安装前提"><a href="#2-安装前提" class="headerlink" title="2.安装前提"></a>2.安装前提</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a> 步骤。</p>
<p>如果您的电脑中尚未安装所需要的程序，请自行百度按指示完成安装。</p>
<h2 id="3-安装-Hexo"><a href="#3-安装-Hexo" class="headerlink" title="3.安装 Hexo"></a>3.安装 Hexo</h2><h3 id="（1）本地安装-hexo"><a href="#（1）本地安装-hexo" class="headerlink" title="（1）本地安装 hexo"></a>（1）本地安装 hexo</h3><p>首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。取名 MyBlog。</p>
<p>使用VS code 打开该文件夹，右键打开终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装 hexo 框架</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 初始化文件夹</span><br><span class="line">hexo init</span><br><span class="line"># 安装 hexo 依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>命令很好理解，第一行安装 hexo 模块，<code>-g</code>表示安装全局模块；第二行是 hexo 初始化，会用 <code>git clone</code>命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。</p>
<h3 id="（2）可能遇到的问题"><a href="#（2）可能遇到的问题" class="headerlink" title="（2）可能遇到的问题"></a>（2）可能遇到的问题</h3><ul>
<li><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></li>
</ul>
<p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是<code>https://registry.npmjs.org/</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看 npm 源</span><br><span class="line">npm config get registry</span><br><span class="line"># 临时修改 npm 源安装 hexo (仅本条命令有效)</span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class="line"># 或者永久修改 npm 源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>如果是公司内网使用代理访问外网 (比如<code>ping registry.npmjs.org</code> <code>ping registry.npm.taobao.org</code>都不通)，可以尝试给 npm 配置代理解决，再重新执行安装命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置代理</span><br><span class="line">npm config set proxy http://serverip:port</span><br><span class="line">npm confit set https-proxy http:/serverip:port</span><br><span class="line"># 设置带用户名密码的代理</span><br><span class="line">npm config set proxy http://username:password@serverip:port</span><br><span class="line">npm confit set https-proxy http://username:password@serverip:port</span><br><span class="line"># 取消代理</span><br><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>hexo init</code>命令执行卡住，或者报错连接不上</strong></li>
</ul>
<p>同上设置代理</p>
<h2 id="4-运行本地博客"><a href="#4-运行本地博客" class="headerlink" title="4.运行本地博客"></a>4.运行本地博客</h2><p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。</p>
<p>在vs code 的终端中运行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成静态网站</span><br><span class="line">hexo g</span><br><span class="line"># 启动服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>点击运行成功后的出来的地址</p>
<p>自此一个简单的本地博客诞生了</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20201220204625063.png" alt="本地博客效果"></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo框架</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>前端兼容性问题</title>
    <url>/2022/09/26/border%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<h1 id="一、CSS样式兼容"><a href="#一、CSS样式兼容" class="headerlink" title="一、CSS样式兼容"></a>一、CSS样式兼容</h1><h2 id="1-border移动端兼容"><a href="#1-border移动端兼容" class="headerlink" title="1.border移动端兼容"></a>1.border移动端兼容</h2><p>box-shadow， border等不明原因被遮挡的问题；小于1px的边框在部分机型显示不全 或 完全渲染不出来的问题，这个是在工作中UI走查，查出来的，刚开始我还不知道为什么，还是经验太浅了，哈哈！</p>
<h3 id="方案一-transform-rotateZ-360deg"><a href="#方案一-transform-rotateZ-360deg" class="headerlink" title="方案一 transform rotateZ(360deg)"></a>方案一 transform rotateZ(360deg)</h3><p>此方法也能解决 box-shadow， border等不明原因被遮挡的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">border: 0.5px solid #000;</span><br><span class="line">border-radius: 0.5px;</span><br><span class="line"></span><br><span class="line">// 解决ios边框显示一半的问题</span><br><span class="line">transform: rotateZ(360deg);</span><br></pre></td></tr></table></figure>

<h3 id="方案二-和UI沟通，尽量避免使用0-5px的边，线（推荐）"><a href="#方案二-和UI沟通，尽量避免使用0-5px的边，线（推荐）" class="headerlink" title="方案二 和UI沟通，尽量避免使用0.5px的边，线（推荐）"></a>方案二 和UI沟通，尽量避免使用0.5px的边，线（推荐）</h3><p>0.5px的边线在移动端渲染还有一些未知的问题，建议尽量不要使用0.5px的边线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// iphone XS 把0.5px的dashed 虚线  渲染成了 border-bottom 0.5px dotted #C4C4C9</span><br><span class="line">border-bottom: 0.5px dashed #C4C4C9;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端兼容性问题</category>
      </categories>
      <tags>
        <tag>前端兼容</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础</title>
    <url>/2022/09/30/git%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="一、git基础"><a href="#一、git基础" class="headerlink" title="一、git基础"></a>一、git基础</h1><h2 id="重新下载git后"><a href="#重新下载git后" class="headerlink" title="重新下载git后"></a>重新下载git后</h2><p><strong>1.先配钥匙（钥匙的作用是把你电脑上面的git和github或gitab连接）</strong></p>
<p>$ ssh-keygen -t rsa -C “<a href="mailto:your_email@youremail.com">your_email@youremail.com</a>“ //注意啊孩子，双引号里面是你的邮箱(如果在公司你应该有自己的企业邮箱)。填你常用的就行。还有enter代表执行。</p>
<p>添加公钥到 Github(gitee等) 中</p>
<p>登录 github 账号，选中并打开 setting，选择 SSH and GPG keys，选择 New SSH key，在 Title 中填入题目，在 Key 中填入id_rsa.pub 文件中的公钥。</p>
<p>可用如下命令验证上述配置是否成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T [git@github.com](mailto:git@github.com) </span><br></pre></td></tr></table></figure>

<p><strong>2.配置user.name   user.email</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置用户名 </span><br><span class="line">git config --global user.name &quot;xxx&quot;                       </span><br><span class="line"># 配置邮件</span><br><span class="line">git config --global user.email &quot;[xxx@xxx.com](mailto:xxx@xxx.com)&quot;              </span><br></pre></td></tr></table></figure>

<p><strong>3.建本地仓库</strong></p>
<p>新建一个文件夹，用vscode打开该文件夹，git init，该命令执行完后会在当前目录生成一个 .git 目录</p>
<p><strong>4.添加远程地址（将本地仓库与远程仓库关联起来）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin [git@github.com](mailto:git@github.com)/你的github用户名/仓库名.git</span><br></pre></td></tr></table></figure>

<p><strong>5.新建一个txt文本，里面写点东西。我的命名为read</strong></p>
<p><strong>6.add和commit</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add read.txt $ git commit -m &quot;这是你commit的原因，写了方便你我他&quot;</span><br></pre></td></tr></table></figure>

<p><strong>7.push推送到你的github</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p><strong>另外注意事项：</strong></p>
<p> 生成秘钥</p>
<p>  在windows下查看[c盘-&gt;用户-&gt;用户名-&gt;.ssh]下是否有id_rsa、id_rsa.pub文件</p>
<p>，如果没有需要手动生成</p>
<p>  打开git bash，在控制台中输入以下命令： $ ssh-keygen -t rsa -C “自己邮箱”。</p>
<hr>
<h2 id="创建分支流程"><a href="#创建分支流程" class="headerlink" title="创建分支流程"></a>创建分支流程</h2><p><strong>1.先切换到主分支，然后创建本地新分支</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch  &lt;BranchName&gt;（master）</span><br></pre></td></tr></table></figure>

<p><strong>2.显示所有本地分支（创建完看看本地有没有该分支）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p><strong>3.切换分支(既然都创建了，肯定要用这个分支，切换到该分支)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>

<p><strong>4.建立远程分支</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin + 刚刚创建的分支名 </span><br></pre></td></tr></table></figure>

<h2 id="删除分支流程"><a href="#删除分支流程" class="headerlink" title="删除分支流程"></a>删除分支流程</h2><p><strong>1.切换分支(先切换到其他分支上)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout  &lt;BranchName2&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2.删除本地分支( 需要切换到别的分支上去删除)  命令行：</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d  &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3.删除远程分支（没建立远程分支就不要没必要） 命令行</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --delete  &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Git-把master的内容更新到自己分支上"><a href="#Git-把master的内容更新到自己分支上" class="headerlink" title="Git 把master的内容更新到自己分支上"></a>Git 把master的内容更新到自己分支上</h2><p><strong>1.如果分支(将此分支暂命名为feature)有修改，则先提交修改的内容，如果没有，直接跳到下一步</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m “这是你commit的原因，写了方便你我他”</span><br></pre></td></tr></table></figure>

<p><strong>2.切换到master分支下</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<p><strong>3.将远程的master代码pull拉取到本地</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p><strong>4.切换到自己分支下</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout  &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>

<p><strong>5.合并master到自己分支</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge master</span><br></pre></td></tr></table></figure>

<p>如果在合并的过程中，例如提示Test.java文件出现冲突了，手动修改一下这个文件，修改成自己想要内容；如果没有出现冲突，vs code上下载git history插件 ，可以对比冲突，保留自己想要的代码，没有就直接跳到7步</p>
<p><strong>6.添加修改的文件，将新添加的文件提交上去</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add Test.java</span><br><span class="line"></span><br><span class="line">git commit -m “这是你commit的原因，写了方便你我他”</span><br></pre></td></tr></table></figure>

<p><strong>7.将本地分支的代码push到远程仓库对应的分支上</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin  </span><br></pre></td></tr></table></figure>

<h1 id="测试通过后可以上线了将自己分支代码合并到master"><a href="#测试通过后可以上线了将自己分支代码合并到master" class="headerlink" title="测试通过后可以上线了将自己分支代码合并到master"></a>测试通过后可以上线了将自己分支代码合并到master</h1><p>1.需要先在，Git 把master的内容更新到自己分支上（在上面）</p>
<p>2.切换到master主分支 git checkout master</p>
<p>3.git pull一下</p>
<p>4.合并到master </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge （自己分支名字）</span><br></pre></td></tr></table></figure>

<p>5.在vscode 源代码管理工具或者sourecetree上对比一下自己提交的代码</p>
<p>5.git push 上传推送代码</p>
<h2 id="git-stash的使用"><a href="#git-stash的使用" class="headerlink" title="git stash的使用"></a>git stash的使用</h2><p>应用场景：某一天你正在 feature 分支开发新需求，突然产品经理跑过来说线上有bug，必须马上修复。而此时你的功能开发到一半，于是你急忙想切到 master 分支，然后你就会看到以下报错：</p>
<p>因为当前有文件更改了，需要提交commit保持工作区干净才能切分支</p>
<p>使用git stash代码就被存起来了</p>
<p>当你修复完线上问题，切回 feature 分支，想恢复代码也只需要：git stash apply</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">相关的命令</span><br><span class="line"># 保存当前未commit的代码</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"># 保存当前未commit的代码并添加备注</span><br><span class="line">git stash save &quot;备注的内容&quot;</span><br><span class="line"></span><br><span class="line"># 列出stash的所有记录</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"># 删除stash的所有记录</span><br><span class="line">git stash clear</span><br><span class="line"></span><br><span class="line"># 应用最近一次的stash</span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"># 应用最近一次的stash，随后删除该记录</span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"># 删除最近的一次stash</span><br><span class="line">git stash drop</span><br></pre></td></tr></table></figure>

<h2 id="git-reset-–soft的使用"><a href="#git-reset-–soft的使用" class="headerlink" title="git reset –soft的使用"></a>git reset –soft的使用</h2><p>应用场景1：有时候手滑不小心把不该提交的内容 commit 了，这时想改回来，只能再 commit 一次，又多一条“黑历史”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复最近一次 commit</span><br><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure>

<p>reset –soft 相当于后悔药，给你重新改过的机会。对于上面的场景，就可以再次修改重新提交，保持干净的 commit 记录</p>
<h1 id="二、电脑同时配置github与公司内部使用的gitlab"><a href="#二、电脑同时配置github与公司内部使用的gitlab" class="headerlink" title="二、电脑同时配置github与公司内部使用的gitlab"></a>二、电脑同时配置github与公司内部使用的gitlab</h1><p>下载git</p>
<p>生成对应的gitlab和github的公秘钥 ssh-keygen -t rsa -C “你的gitlab邮箱” -f ~/.ssh/id_rsa_gitlab ssh-keygen -t rsa -C “注册 github 账户的邮箱”</p>
<p>这样你会在.ssh文件夹(.ssh在哪具体百度去)，找到四个文件</p>
<p>这四个文件分别对应gitlab和github的公私钥，分别将gitlab和github的公钥配置到github和你公司的gitlab的ssh上</p>
<p>在.ssh目录下创建一个config文件，写入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User zhangyao</span><br><span class="line">IdentityFile ~/.ssh/github_rsa </span><br><span class="line"></span><br><span class="line">Host hcgit.hengchang6.com</span><br><span class="line">HostName gitlab.com</span><br><span class="line">User zhangyao</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>测试连接是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitlab</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"># Hi XXX! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"># 出现上边这句，表示链接成功</span><br></pre></td></tr></table></figure>

<p><font color='#478fd2'>参考文章：</font><a href="https://blog.csdn.net/jueji1998/article/details/103815585">电脑同时配置github与公司内部使用的gitlab</a></p>
<h1 id="本地已有项目如何上传到github上"><a href="#本地已有项目如何上传到github上" class="headerlink" title="本地已有项目如何上传到github上"></a>本地已有项目如何上传到github上</h1><p>不和你多bb了,自己看：<a href="https://blog.csdn.net/weixin_44370837/article/details/121565864">本地已有项目如何上传到github上_前端学狗的博客-CSDN博客</a></p>
<h1 id="git-冲突相关"><a href="#git-冲突相关" class="headerlink" title="git 冲突相关"></a>git 冲突相关</h1><p><strong>#预防发生冲突的方法：在每次push前git pull一下，保证本地代码都是最新的。</strong></p>
<p><strong>#冲突解决方法：</strong></p>
<p>第一种冲突：在Git push的时候提示冲突了。</p>
<p>这种解决方法可以使用    git stash</p>
<p>保存本地代码，然后拉取最新的远程分支代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch --all   //只是下载远程内容，不做任何合并  </span><br><span class="line">git reset --hard origin/master    //把HEAD指向刚下载的最新版本</span><br><span class="line">再使用git stash apply应用最近存储，重新push即可。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>前端随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(三)——博客在多台终端同步管理</title>
    <url>/2022/09/23/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%B8%89)%E2%80%94%E2%80%94%E5%8D%9A%E5%AE%A2%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、Hexo-Git-Github博客在多台终端同步管理"><a href="#一、Hexo-Git-Github博客在多台终端同步管理" class="headerlink" title="一、Hexo+Git+Github博客在多台终端同步管理"></a>一、<a href="https://so.csdn.net/so/search?q=Hexo&spm=1001.2101.3001.7020">Hexo</a>+Git+Github博客在多台终端同步管理</h1><p>此方法利用Git管理Hexo产生的文件，实现在不同的电脑上同步（<a href="https://so.csdn.net/so/search?q=Github&spm=1001.2101.3001.7020">Github</a>）所需的文件，也可以正常的在不同的Hexo环境里进行相应操作，只要在做完之后同步到Github的仓库里即可。下面具体来说说：</p>
<p>网上基本上都是这个思路：</p>
<h2 id="Github-分支管理Hexo环境目录"><a href="#Github-分支管理Hexo环境目录" class="headerlink" title="Github 分支管理Hexo环境目录"></a>Github 分支管理Hexo环境目录</h2><p>主要是通过维护两条git分支来实现，第一个分支是 Gihub 上默认的 master 分支，用于存放发布的博文的静态页面；另外再新建一个分支，比如命名为 Hexo ，通过此分支存放主题、原始的博客文件等等，这些文件才是不同电脑需要同步的文件；当每次修改主题或者新增博文后，先将修改的主题文件（在themes文件夹下）或者新增博客（在source文件夹下），同步到远程的 Hexo 分支，然后在通过 hexo g -d命令发布博文，也就是将新增的博文的静态页面同步到 master 分支。这样通过不同的分支管理不同的文件，实现了多台电脑同步更新博文的功能。俺是转载的，去看看原文吧！<br>原文链接：<a href="https://blog.csdn.net/steven_zdg988/article/details/111240905">https://blog.csdn.net/steven_zdg988/article/details/111240905</a></p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>在PC b，我是直接在github上创建的，具体就是如下图。分支名输入Hexo</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16639155572122.png" alt="创建分支"></p>
<h3 id="初始化分支"><a href="#初始化分支" class="headerlink" title="初始化分支"></a>初始化分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone 仓库地址（自己的仓库地址）</span><br></pre></td></tr></table></figure>

<p>将仓库文件拉取到本地，生成的文件名为 username.github.io；进入username.github.io文件夹，除了 <em>.git</em> 文件夹以外，其他文件全部删除；同时添加.gitnore</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line"># 添加git忽略</span><br></pre></td></tr></table></figure>

<p>提交本次修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m “提交说明”</span><br><span class="line">git push origin Hexo</span><br></pre></td></tr></table></figure>

<h3 id="同步代码"><a href="#同步代码" class="headerlink" title="同步代码"></a>同步代码</h3><p>把之前跟着<a href="https://blog.csdn.net/yushuaigee?type=blog">杰克小麻雀</a>大佬做的建的文件copy到username.github.io下，db.json，node_modules，public就不要了</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16639162406638.png" alt="img"></p>
<p>暂时不要提交，安装hexo环境去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装 hexo 框架</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 安装 hexo 依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>然后再执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这时你文件夹下多出了db.json，node_modules，public，还会多一个.deploy_git（hexo插件打包后上传到master主分支的静态博客文件夹）因为我用了yarn，所以会有yarn.lock，这个无关紧要，这时git提交上去就行</p>
<p><strong>文章内更新点东西，加一句话什么的，再去执行hexo的命令</strong></p>
<p>过会再去打开https://你的用户名.github.io，更新了就代表没问题了</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>同步管理</tag>
      </tags>
  </entry>
  <entry>
    <title>npm随笔</title>
    <url>/2022/09/26/npm%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="一、npm-安装中的-i、-g、–save、–save-dev、-D、-S的区别"><a href="#一、npm-安装中的-i、-g、–save、–save-dev、-D、-S的区别" class="headerlink" title="一、npm 安装中的 i、-g、–save、–save-dev、-D、-S的区别"></a>一、npm 安装中的 i、-g、–save、–save-dev、-D、-S的区别</h1><h2 id="基本说明："><a href="#基本说明：" class="headerlink" title="基本说明："></a>基本说明：</h2><ul>
<li><strong><code>i</code></strong> 是 <strong><code>install</code></strong> 的简写</li>
<li><strong><code>-g</code></strong> 是全局安装，不带 <strong><code>-g</code></strong> 会安装在个人文件夹</li>
<li><strong><code>-S</code></strong> 是 <strong><code>--save</code></strong> 的简写，安装包信息会写入 <strong><code>dependencies</code></strong> 中</li>
<li><strong><code>-D</code></strong> 是 <strong><code>--save-dev</code></strong> 的简写，安装包写入 <strong><code>devDependencies</code></strong> 中</li>
</ul>
<h2 id="dependencies-与-devDependencies："><a href="#dependencies-与-devDependencies：" class="headerlink" title="dependencies 与 devDependencies："></a>dependencies 与 devDependencies：</h2><ul>
<li><p><strong><code>dependencies</code></strong> 生产阶段的依赖,也就是项目运行时的依赖</p>
</li>
<li><p><strong><code>devDependencies</code></strong> 开发阶段的依赖，就是我们在开发过程中需要的依赖，只在开发阶段起作用的</p>
<p>例如：你写 ES6 代码，需要 babel 转换成 es5 ，转换完成后，我们只需要转换后的代码，上线的时候，直接把转换后的代码部署到生产环境，不需要 bebal 了，生产环境不需要。这就可以安装到 devDependencies ，再比如说代码提示工具，也可以安装到 devDependencies，如果你用了 <code>Element-UI</code>，由于发布到生产后还是依赖 <code>Element-UI</code>，这就可以安装到 <strong><code>dependencies</code></strong></p>
</li>
</ul>
<h1 id="二、全局安装和本地安装"><a href="#二、全局安装和本地安装" class="headerlink" title="二、全局安装和本地安装"></a>二、全局安装和本地安装</h1><h2 id="全局安装："><a href="#全局安装：" class="headerlink" title="全局安装："></a>全局安装：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install &lt;pageName&gt; -g//（这里-g是-global的简写）</span><br></pre></td></tr></table></figure>

<p>通过上面的命令行（带-g修饰符）安装某个包，就叫全局安装。通常全局包安装在node目录下的node_modules文件夹。可以通过执行下面几条命令查看node、npm的安装目录和全局包的安装目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which node   // 查看node的安装目录</span><br><span class="line">which npm   // 查看npm的安装目录</span><br><span class="line">npm root -g // 查看全局包的安装目录</span><br><span class="line">npm list -g --depth 0 //查看全局安装过的</span><br></pre></td></tr></table></figure>

<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装:"></a>本地安装:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install &lt;pageName&gt; (后面可以加几种修饰符，主要有两种--save-dev和--save)</span><br></pre></td></tr></table></figure>

<p>通过上面的命令行安装某个包，就叫本地安装。包安装在你当前项目文件夹下的node_modules文件夹中。</p>
<h3 id="全局安装的作用"><a href="#全局安装的作用" class="headerlink" title="全局安装的作用:"></a>全局安装的作用:</h3><p>全局安装的包可提供直接执行的命令(例：gulp -h可以查看gulp定义了什么命令)。 比如gulp全局安装后，可以在命令行上直接执行gulp -v、gulp -h等（原理：全局安装的gulp会将其package.json中的bin命令注入到了全局环境，使得你可以全局执行：gulp xxx命令，这另一个话题了，不深入）。倘若只在本地安装了gulp，未在全局安装gulp，直接执行这些命令会报错。你想要执行相应的命令则可能需要例如：node ./node_modules/gulp/bin/gulp.js -v(查看版本) 这样用一大串命令来执行。因此全局安装就发挥到他的好处了，一个gulp -v就搞定</p>
<p>当然，不是每个包都必须要全局安装的，一般在项目中需要用到该包定义的命令才需要全局安装。比如gulp <taskName>执行gulp任务…等，所以是否需要全局安装取决于我们如何使用这个包。全局安装的就像全局变量有点粗糙，但在某些情况下也是必要的，全局包很重要，但如果不需要，最好避免使用。</p>
<h2 id="可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？"><a href="#可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？" class="headerlink" title="可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？"></a>可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？</h2><ol>
<li>如果只是全局安装了而没本地安装，就得require(‘<pagePath>‘) 例：引入一个全局的包可能就是requirt(‘/usr/local/….’)通过全局包的路径引入，这样显然十分的不灵活。如果安装了本地包，那么就<strong>可以直接require(‘<pageName>‘)引入使用。</strong></li>
<li>一个包通常会在不同的项目上会重复用到，如果只全局安装，那么当某个项目需要该包更新版本时，更新后可能就会影响到其他同样引用该包的项目，因此本地安装可以更灵活地在不同的项目使用不同版本的包，并避免全局包污染的问题。</li>
</ol>
<p>一个经验法则：要用到该包的命令执行任务的就需要全局安装，要通过require引入使用的就需要本地安装（ 但实际开发过程中，我们也不怎么需要考虑某个包是全局安装还是本地安装，因为这一点在该包的官网上一般会明确指出，以上是为了理解全局安装和本地安装）。</p>
<p>参考：<a href="https://segmentfault.com/a/1190000017787636?utm_source=tag-newest">node.js - npm(你怕吗) 全局安装与本地安装、开发依赖和生产依赖_个人文章 - SegmentFault 思否</a></p>
]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>npm，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>hello，欢迎来到耀耀切克闹的博客！</title>
    <url>/2022/09/22/hello%EF%BC%8C%E5%8D%9A%E5%AE%A2%EF%BC%81/</url>
    <content><![CDATA[<h1 id="一-为什么要搭建博客？"><a href="#一-为什么要搭建博客？" class="headerlink" title="一.为什么要搭建博客？"></a>一.为什么要搭建博客？</h1><ol>
<li>搭建博客就是为了写博客，整理思路，将学习的知识融会贯通，以教为学。</li>
<li>在这个过程中，你可以认识更多兴趣相投的人。</li>
<li>事件驱动学习，每周持续的博客更新，查看自己是否学习到新东西！</li>
<li>对自己也是一种督促，你拥有一个完全属于自己的博客，会驱动自己分享学习！</li>
</ol>
<h1 id="二-搭建博客方式"><a href="#二-搭建博客方式" class="headerlink" title="二.搭建博客方式"></a>二.搭建博客方式</h1><p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e3d012b007f43c597d5db60b9594379b.png"></p>
<h2 id="1-自己开发"><a href="#1-自己开发" class="headerlink" title="1.自己开发"></a>1.自己开发</h2><p>这是最原始的博客建站方式了，自己写代码（前台 + 后台管理+数据库等等）、自己将项目发布上线、自己来维护网站，啥都自己来干。这就意味着全栈的工作，你需要理解和学习的地方有好多好多，在这过程中需要耗费大量时间，但对自己的提升是不可估量的，并且代码掌握在自己手里，很安想加什么功能都不会受到限制，很灵活。这里推荐 Github 上的开源项目，可以在此上进行二次开发：</p>
<p>Halo博客，一款现代化的开源博客/CMS系统，值得一试。详细部署可以去  <a href="https://docs.halo.run/">https://docs.halo.run</a></p>
<h2 id="2-站点生成器"><a href="#2-站点生成器" class="headerlink" title="2.站点生成器"></a>2.站点生成器</h2><p>博客是一种很典型的网站，所以有大佬将博客的功能（比如文章管理）抽象出来，做成了 站点生成器 ，可以用极少的命令 + 配置文件的方式，自动生成精美的博客网站。本人还是比较菜的，刚毕业，工作了2个月多，前端菜鸡程序员一枚，于是采用了这种方式，也是我极力推荐的一种方式，省时省力，灵活程度虽然比不上完全由自己开发，但适合大多数人的需求。并且，绝大多数的站点生成器都只能生成静态网站，也就是说网站的内容（比如博客文章、文档等）是固定的，不需要从数据库中获取内容，因此有很多优点：</p>
<ul>
<li><p>省钱：把文件扔 GitHub Pages、Gitee Pages 啥的就能免费部署</p>
</li>
<li><p>速度快：省去了数据的动态获取过程，配合 CDN 加载速度飞起</p>
</li>
<li><p>SEO：静态网站更容易被搜索引擎的蜘蛛抓取，稳定排名</p>
</li>
<li><p>易维护：没那么多花里胡哨的功能，比动态网站好维护不少</p>
<p>这里推荐：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e6561ed83d781d08d5298519b34a4752.png"></p>
<p><strong>当然，好像另外还有一种方式就是建站程序，主流就是 WordPress（推荐）或 Typech，跟着官方文档操作就行，不过俺了解甚少。感兴趣的朋友可以去看看，据说也很方便。</strong></p>
</li>
</ul>
<h2 id="3-建站平台和购买"><a href="#3-建站平台和购买" class="headerlink" title="3.建站平台和购买"></a>3.建站平台和购买</h2><p> 简单说吧！就是花钱办事，用金钱换时间。</p>
<p><strong>建站平台：</strong>套个现成的模板、利用界面拖拖拽拽就能搞出来一个网站，平台还会给你提供域名，一键上线。此外，网站的维护也不用咱自己操心了，全交给别人，我们专注于网站的内容就行，百度搜索应该有一大堆。</p>
<p><strong>购买</strong>: 极致的体验，没有最好，只有更好，你就是大爷，可以尽情享受氪金带来的快乐！（手动狗头)</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>为什么要搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(二)——hexo主题搭建</title>
    <url>/2022/09/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%BA%8C)%E2%80%94%E2%80%94hexo%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="一、更换-Hexo-博客主题"><a href="#一、更换-Hexo-博客主题" class="headerlink" title="一、更换 Hexo 博客主题"></a>一、更换 Hexo 博客主题</h1><h2 id="1-如何找主题"><a href="#1-如何找主题" class="headerlink" title="1. 如何找主题"></a>1. 如何找主题</h2><p>默认主题非常简洁，适合大佬使用，像我等菜鸟，自己不会做却又想使用花里胡哨的主题，就要学会找主题了。</p>
<p>下面是我寻找主题的三个方法。</p>
<ul>
<li><p><strong>官方网站</strong></p>
<p>Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。</p>
<p>在 Hexo 官网点击“主题”，或者直接进入 Hexo 主题页：<a href="https://hexo.io/themes/">themes</a></p>
<p>通过上方的搜索框可以根据标签搜索。</p>
</li>
</ul>
<h2 id="2-github开源Hexo-博客主题"><a href="#2-github开源Hexo-博客主题" class="headerlink" title="2.github开源Hexo 博客主题"></a>2.github开源Hexo 博客主题</h2><p>大多数流行的主题都在 GitHub 托管开源了，我们可以直接去 GitHub 下载。</p>
<p>在 Github 官网搜索<code>hexo-theme</code>，选择<code>All GitHub</code>，或者直接进入搜索页：<a href="https://github.com/search?q=hexo-theme">search?q=hexo-theme</a></p>
<p>市面上使用比较多的主题：</p>
<ul>
<li><strong>Next</strong></li>
</ul>
<p>Demo 示例：<a href="https://theme-next.js.org/">NexT</a> | <a href="https://dandyxu.me/">Dandy</a> | <a href="https://raincal.com/">Raincal</a></p>
<p>GitHub 主页：<a href="https://github.com/iissnan/hexo-theme-next">hexo-theme-next</a></p>
<p>这个是 Hexo 最流行的主题，GitHub 上 15.5k stars，在 Hexo 主题中排行第一。</p>
<ul>
<li><strong>matery</strong></li>
</ul>
<p>Demo 示例：<a href="http://blinkfox.com/">闪烁之狐</a></p>
<p>GitHub 主页：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p>
<ul>
<li><strong>butterfly</strong></li>
</ul>
<p>Demo 示例： <a href="https://butterfly.js.org/">Butterfly</a> | <a href="https://jerryc.me/">JerryC</a></p>
<p>GitHub 主页：<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p>
<p>本菜鸟使用的主题就是以简约为主：</p>
<ul>
<li><strong>ayer</strong></li>
</ul>
<p>Demo 示例：<a href="https://shen-yu.gitee.io/">岛</a></p>
<p>GitHub 主页：<a href="https://github.com/Shen-Yu/hexo-theme-ayer">hexo-theme-ayer</a></p>
<h2 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3.更换主题"></a>3.更换主题</h2><p>以 <strong>ayer</strong> 主题为例。</p>
<p>在 vs code中 Mylog根目录下，右键，执行下面命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-theme-ayer -S</span><br><span class="line">#如果hexo &lt; 5.0</span><br><span class="line"># 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git</span><br><span class="line">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>

<p>我在使用 <strong>ayer</strong> 找到了这样一位大佬，后面的操作就是跟着这位大佬的搭建博客进行的了：<a href="https://blog.csdn.net/yushuaigee?type=blog">杰克小麻雀</a></p>
<p>该博主的文章对我后面的搭建有巨大帮助，各位过去看看吧！后面估计很多内容可能会照着大佬来，如有雷同，纯属抄袭（手动狗头）</p>
<h1 id="二-本地写博客"><a href="#二-本地写博客" class="headerlink" title="二.本地写博客"></a>二.本地写博客</h1><p><strong>利用Markdown语法的软件写博客，本地试运行：</strong></p>
<p>这里推荐使用Typora或uTools的Markdown笔记功能，具体怎么使用这两款软件， 官方都有说明。其中Typora现在开始收费了，但可以去下载老版本，老版本是免费的，具体操作可以按：</p>
<p><a href="http://www.itmind.net/16468.html">Typora免费版</a></p>
<p>根据这个网址上面来操作，下载老版本的Typora，但具体还能用多久就不知道了，有钱的小伙伴可以直接去官网下载正版，本人老穷b了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/11DDC475.jpg"></p>
<p>把写好的文章复制到根目录下的source=&gt;_posts</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184421310.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184517354.png"></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo框架</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(四)——关于我页面搭建</title>
    <url>/2022/09/28/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E5%9B%9B)%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E6%88%91%E9%A1%B5%E9%9D%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="关于我页面搭建"><a href="#关于我页面搭建" class="headerlink" title="关于我页面搭建"></a>关于我页面搭建</h1><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>都是开始整关于自己页面了，肯定需要把与自己相关的展示出来，例如你的github，gitee，掘金，csdn等等。当然，这里建议把Hexo和你使用的相关主题的链接也展示一下，毕竟，使用了别人开源的东西，多少要表示一下，哈哈。下面我的具体操作：</p>
<p>在根目录下的source新建about文件夹，about=&gt;index.md,写入如下图的内容，其中type: ‘friends’ 和layout: ‘friends’是ayer主题原作者封装好的友情链接布局及操作，当然在此之前需要在themes=&gt;ayer=&gt;_config.yml的侧边栏菜单配置menu下配置   关于我: /about</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220928181752870.png"></p>
<p>链接相关配置也是在themes=&gt;ayer=&gt;_config.yml下配置，找到friends_link，图片地址和github链接填自己的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 友情链接</span><br><span class="line">friends_link:</span><br><span class="line">  DarknessZY:</span><br><span class="line">    url: https://github.com/DarknessZY</span><br><span class="line">    img: /images/github.png</span><br><span class="line">  耀耀切克闹灬:</span><br><span class="line">    url: https://juejin.cn/user/1781681116679854/columns</span><br><span class="line">    img: /images/juejin.png</span><br><span class="line">  Hexo官网:</span><br><span class="line">    url: https://hexo.io</span><br><span class="line">    img: /images/hexo.png</span><br><span class="line">  Ayer主题: #网站名称</span><br><span class="line">    #网站地址</span><br><span class="line">    url: https://github.com/Shen-Yu/hexo-theme-ayer</span><br><span class="line">    #网站图片(可忽略不写)</span><br><span class="line">    img: /images/ayer.png</span><br></pre></td></tr></table></figure>

<p>然后执行hexo命令，页面上就显示出来了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16643609353351.png" alt="img"></p>
<h2 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h2><p>这块不能想之前那样直接写markdown就行了，需要自己写页面了，例如我的就是：找到ayer主题下的原作者写的友情链接的封装，themes=&gt;ayer=&gt;layout=&gt;_partial=&gt;friends.ejs,当然我的页面随便画画的，自己看着舒服就行了，最下面两个img标签，放的是收款码，有钱的捧个钱场，具体代码和效果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;section class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;% if(theme.friends_link &amp;&amp; theme.friends_link.length != 0)&#123; %&gt;</span><br><span class="line">    &lt;h1 class=&quot;page-type-title&quot;&gt;关于俺！&lt;/h1&gt;</span><br><span class="line">    &lt;ul id=&quot;friends_link&quot;&gt;</span><br><span class="line">        &lt;% for (var i in theme.friends_link)&#123; %&gt;</span><br><span class="line">        &lt;li class=&quot;friends_li&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;&lt;%- url_for(theme.friends_link[i].url) %&gt;&quot; target=&quot;_blank&quot; class=&quot;search-title&quot;</span><br><span class="line">                &lt;% if (theme.friends_link[i].description)&#123; %&gt;title=&quot;&lt;%= theme.friends_link[i].description %&gt;&quot; &lt;% &#125; %&gt;&gt;</span><br><span class="line">                &lt;% if (theme.friends_link[i].img)&#123; %&gt;</span><br><span class="line">                &lt;img src=&quot;&lt;%- url_for(theme.friends_link[i].img) %&gt;&quot;&gt;</span><br><span class="line">                &lt;% &#125; else &#123; %&gt;</span><br><span class="line">                &lt;i class=&quot;ri-user-fill&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;% &#125; %&gt;</span><br><span class="line">                &lt;%= i %&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div style=&quot;margin-top: 25%;&quot;&gt;</span><br><span class="line">        &lt;p style=&quot;font-size: 25px;font-weight: bolder;&quot;&gt; 一位正在北漂的菜鸡程序员&lt;/p&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span style=&quot;color: red;&quot;&gt; 姓名：张耀 &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt; </span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span style=&quot;color: blue;&quot;&gt; QQ：2498652509&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;有志同道合的小伙伴们可以加我qq，验证消息填&#x27;博客&#x27;+&#x27;你的姓名&#x27;，我就会通过！</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span style=&quot;color:greenyellow;&quot;&gt;现居地：北京朝阳&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;  </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span style=&quot;color:orange;&quot;&gt;家乡：湖北汉川&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;小县城一个，装满了故事，我有故事，你有酒吗？</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;div style=&quot;margin-top: 5%;&quot;&gt;</span><br><span class="line">        &lt;p style=&quot;font-size: 25px;font-weight: bolder;&quot;&gt;要是觉得不错，请我喝饮料吧！&lt;/p&gt; </span><br><span class="line">        &lt;div style=&quot;display: flex;justify-content: space-between;align-items: center;&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;reward-img&quot; src=&quot;&lt;%- url_for(theme.alipay) %&gt;&quot;  width=&quot;45%&quot; height=&quot;450px&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;reward-img&quot; src=&quot;&lt;%- url_for(theme.weixin) %&gt;&quot; width=&quot;45%&quot; height=&quot;450px&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220928183612541.png" alt="image-20220928183612541"></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo框架</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>vite 搭建vue3项目（一）</title>
    <url>/2022/10/08/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/vite%20%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h1><h2 id="1-直接创建项目"><a href="#1-直接创建项目" class="headerlink" title="1.直接创建项目"></a>1.直接创建项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 NPM:</span><br><span class="line">$ npm create vite@latest</span><br><span class="line">使用 Yarn:</span><br><span class="line">$ yarn create vite</span><br><span class="line">使用 PNPM:</span><br><span class="line">$ pnpm create vite</span><br><span class="line">然后按照提示操作即可！(选择vue，vue-ts)</span><br></pre></td></tr></table></figure>

<h2 id="2-使用模板创建项目"><a href="#2-使用模板创建项目" class="headerlink" title="2.使用模板创建项目"></a>2.使用模板创建项目</h2><p>通过附加的命令行选项直接指定项目名称和你想要使用的模板例如，要构建一个 Vite + Vue 项目，运行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 npm 6.x：</span><br><span class="line">npm create vite@latest my-vue-app --template vue</span><br><span class="line">使用 npm 7+, extra double-dash is needed:</span><br><span class="line">npm create vite@latest my-vue-app -- --template vue</span><br><span class="line">使用 yarn：</span><br><span class="line">yarn create vite my-vue-app --template vue</span><br><span class="line">使用 pnpm：</span><br><span class="line">pnpm create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure>

<p>然后npm i 或者 yarn install    运行yarn dev 看看浏览器运行成了没，第一步就大功告成了</p>
<h1 id="二、vite配置别名和环境变量的配置"><a href="#二、vite配置别名和环境变量的配置" class="headerlink" title="二、vite配置别名和环境变量的配置"></a>二、vite配置别名和环境变量的配置</h1><h2 id="1-配置别名"><a href="#1-配置别名" class="headerlink" title="1.配置别名"></a>1.配置别名</h2><p>使用编辑器VScode打开刚刚搭建好的项目 进入配置文件 vite.config.ts</p>
<p>配置别名后的vite.config.ts：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">dir: string</span>) =&gt; path.<span class="title function_">join</span>(__dirname, dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">	<span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">	<span class="attr">resolve</span>: &#123;</span><br><span class="line">		<span class="attr">alias</span>: &#123;</span><br><span class="line">			<span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>此时 TS 可能有这个错误提示：找不到模块“path”或其相应的类型声明</p>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @types/node --save-dev或者yarn add @types/node --save-dev</span><br></pre></td></tr></table></figure>

<p>还需要在tsconfig.json的paths配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">&quot;src/*&quot;</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;comps/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">&quot;src/components/*&quot;</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;views/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">&quot;src/views/*&quot;</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;store/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">&quot;src/store/*&quot;</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h2 id="2-环境变量的配置"><a href="#2-环境变量的配置" class="headerlink" title="2.环境变量的配置"></a>2.环境变量的配置</h2><p>vite 提供了两种模式：具有开发服务器的开发模式（development）和生产模式（production）</p>
<p>项目根目录新建:.env.development :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NODE_ENV=development</span><br><span class="line"></span><br><span class="line">VITE_APP_WEB_URL= &#x27;YOUR WEB URL&#x27;</span><br></pre></td></tr></table></figure>

<p>项目根目录新建:.env.production :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NODE_ENV=production</span><br><span class="line"></span><br><span class="line">VITE_APP_WEB_URL= &#x27;YOUR WEB URL&#x27;</span><br></pre></td></tr></table></figure>

<p>组件中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(import.meta.env.VITE_APP_WEB_URL)</span><br></pre></td></tr></table></figure>

<p>配置 package.json:</p>
<p>打包区分开发环境和生产环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;build:dev&quot;: &quot;vite build --mode development&quot;,</span><br><span class="line">&quot;build:pro&quot;: &quot;vite build --mode production&quot;,</span><br></pre></td></tr></table></figure>

<h1 id="三、配置跨域代理"><a href="#三、配置跨域代理" class="headerlink" title="三、配置跨域代理"></a>三、配置跨域代理</h1><p>在vite.config.ts中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">            <span class="attr">comps</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">            <span class="attr">apis</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/apis&#x27;</span>),</span><br><span class="line">            <span class="attr">views</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/views&#x27;</span>),</span><br><span class="line">            <span class="attr">utils</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/utils&#x27;</span>),</span><br><span class="line">            <span class="attr">routes</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/routes&#x27;</span>),</span><br><span class="line">            <span class="attr">styles</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/styles&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">     <span class="comment">// 配置前端服务地址和端口</span></span><br><span class="line">        <span class="comment">//服务器主机名</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">//端口号</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">3088</span>,</span><br><span class="line">        <span class="comment">//设为 true 时若端口已被占用则会直接退出，而不是尝试下一个可用端口</span></span><br><span class="line">        <span class="attr">strictPort</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//服务器启动时自动在浏览器中打开应用程序,当此值为字符串时，会被用作 URL 的路径名</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//自定义代理规则</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// 选项写法</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用跨域代理：</p>
<p>​        用代理, 首先你得有一个标识, 告诉他你这个连接要用代理. 不然的话, 可能你的 html, css, js这些静态资源都跑去代理. 所以我们一般只有接口用代理, 静态文件用本地.‘/api’: {}, 就是告诉node, 我接口只有是’/api’开头的才用代理.所以你的接口就要这么写 /api/xx/xx. 最后代理的路径就是 <a href="http://xxx.xx.com/api/xx/xx.%E5%8F%AF%E6%98%AF%E4%B8%8D%E5%AF%B9%E5%95%8A">http://xxx.xx.com/api/xx/xx.可是不对啊</a>, 我正确的接口路径里面没有/api啊. 所以就需要 pathRewrite,把’/api’去掉, 这样既能有正确标识, 又能在请求接口的时候去掉api.</p>
<h1 id="四、添加-css-预处理器-sass"><a href="#四、添加-css-预处理器-sass" class="headerlink" title="四、添加 css 预处理器 sass"></a>四、添加 css 预处理器 sass</h1><p>安装 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -D sass sass-loader</span><br><span class="line">或者yarn add sass sass-loader</span><br></pre></td></tr></table></figure>

<p>在 src/assets 下新增 style 文件夹，用于存放全局样式文件</p>
<h1 id="五、约束代码风格"><a href="#五、约束代码风格" class="headerlink" title="五、约束代码风格"></a>五、约束代码风格</h1><p>TypeScirpt 官方决定全面采用 ESLint 作为代码检查的工具，并创建了一个新项目 typescript-eslint，提供了 TypeScript 文件的解析器 @typescript-eslint/parser 和相关的配置选项 @typescript-eslint/eslint-plugin 等</p>
<h2 id="1-Eslint支持"><a href="#1-Eslint支持" class="headerlink" title="1.Eslint支持"></a><strong>1.Eslint支持</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># eslint 安装</span><br><span class="line">yarn add eslint --dev</span><br><span class="line"># eslint 插件安装</span><br><span class="line">yarn add eslint-plugin-vue --dev</span><br><span class="line"></span><br><span class="line">yarn add @typescript-eslint/eslint-plugin --dev</span><br><span class="line"></span><br><span class="line">yarn add eslint-plugin-prettier --dev</span><br><span class="line"></span><br><span class="line"># typescript parser</span><br><span class="line">yarn add @typescript-eslint/parser --dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">直接：npm i typescript eslint eslint-plugin-vue @typescript-eslint/parser @typescript-eslint/eslint-plugin -D</span><br></pre></td></tr></table></figure>

<p>注意: 如果 eslint 安装报错:</p>
<p>可以尝试运行以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn config set ignore-engines true</span><br></pre></td></tr></table></figure>

<p><strong>项目下新建 .eslintrc.js配置 eslint 校验规则:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要安装依赖:  npm i eslint-define-config</span></span><br><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;eslint-define-config&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 指定如何解析语法。*/</span></span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;vue-eslint-parser&#x27;</span>,</span><br><span class="line">    <span class="comment">/* 优先级低于parse的语法解析配置 */</span></span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">        <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// https://eslint.bootcss.com/docs/user-guide/configuring#specifying-globals</span></span><br><span class="line">    <span class="attr">globals</span>: &#123;</span><br><span class="line">        <span class="title class_">Nullable</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extends</span>: [</span><br><span class="line">        <span class="comment">// add more generic rulesets here, such as:</span></span><br><span class="line">        <span class="comment">// &#x27;eslint:recommended&#x27;,</span></span><br><span class="line">        <span class="comment">// &#x27;plugin:vue/vue3-recommended&#x27;,</span></span><br><span class="line">        <span class="comment">// &#x27;plugin:vue/recommended&#x27; // Use this if you are using Vue.js 2.x.</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;plugin:vue/vue3-recommended&#x27;</span>,</span><br><span class="line">        <span class="comment">// 此条内容开启会导致 全局定义的 ts 类型报  no-undef 错误，因为</span></span><br><span class="line">        <span class="comment">// https://cn.eslint.org/docs/rules/</span></span><br><span class="line">        <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>, <span class="comment">// typescript-eslint推荐规则,</span></span><br><span class="line">        <span class="string">&#x27;prettier&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="comment">// &#x27;no-undef&#x27;: &#x27;off&#x27;,</span></span><br><span class="line">        <span class="comment">// 禁止使用 var</span></span><br><span class="line">        <span class="string">&#x27;no-var&#x27;</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">semi</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">        <span class="comment">// 优先使用 interface 而不是 type</span></span><br><span class="line">        <span class="string">&#x27;@typescript-eslint/consistent-type-definitions&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;interface&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;@typescript-eslint/no-explicit-any&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@typescript-eslint/explicit-module-boundary-types&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@typescript-eslint/ban-types&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@typescript-eslint/no-unused-vars&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;vue/html-indent&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">attribute</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">baseIndent</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">closeBracket</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">alignAttributesVertically</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">ignores</span>: [],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 关闭此规则 使用 prettier 的格式化规则， 感觉prettier 更加合理，</span></span><br><span class="line">        <span class="comment">// 而且一起使用会有冲突</span></span><br><span class="line">        <span class="string">&#x27;vue/max-attributes-per-line&#x27;</span>: [<span class="string">&#x27;off&#x27;</span>],</span><br><span class="line">        <span class="comment">// 强制使用驼峰命名</span></span><br><span class="line">        <span class="string">&#x27;vue/component-name-in-template-casing&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;PascalCase&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">registeredComponentsOnly</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">ignores</span>: [],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>项目下新建 .eslintignore</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># eslint 忽略检查 (根据项目需要自行添加)</span><br><span class="line">node_modules</span><br><span class="line">dist</span><br></pre></td></tr></table></figure>

<h2 id="2-prettier支持"><a href="#2-prettier支持" class="headerlink" title="2.prettier支持"></a>2.prettier支持</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装 prettier</span><br><span class="line">yarn add prettier --dev</span><br></pre></td></tr></table></figure>

<p>解决 eslint 和 prettier 冲突</p>
<p>解决 ESLint 中的样式规范和 prettier 中样式规范的冲突，以 prettier 的样式规范为准，使 ESLint 中的样式规范自动失效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装插件 eslint-config-prettier</span><br><span class="line">yarn add eslint-config-prettier --dev</span><br></pre></td></tr></table></figure>

<p><strong>项目下新建 .prettier.js</strong></p>
<p>配置 prettier 格式化规则:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  tabWidth: 2,</span><br><span class="line">  jsxSingleQuote: true,</span><br><span class="line">  jsxBracketSameLine: true,</span><br><span class="line">  printWidth: 100,</span><br><span class="line">  singleQuote: true,</span><br><span class="line">  semi: false,</span><br><span class="line">  overrides: [</span><br><span class="line">    &#123;</span><br><span class="line">      files: &#x27;*.json&#x27;,</span><br><span class="line">      options: &#123;</span><br><span class="line">        printWidth: 200,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  arrowParens: &#x27;always&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>项目下新建 .prettierignore</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 忽略格式化文件 (根据项目需要自行添加)</span><br><span class="line">node_modules</span><br><span class="line">dist</span><br></pre></td></tr></table></figure>

<p>package.json 配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;: &#123;</span><br><span class="line">    &quot;lint&quot;: &quot;eslint src --fix --ext .ts,.tsx,.vue,.js,.jsx&quot;,</span><br><span class="line">    &quot;prettier&quot;: &quot;prettier --write .&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面配置完成后,可以运行以下<code>命令</code>测试下代码检查个<code>格式化</code>效果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># eslint 检查</span><br><span class="line">yarn lint</span><br><span class="line"># prettier 自动格式化</span><br><span class="line">yarn prettier</span><br></pre></td></tr></table></figure>

<h1 id="六、安装路由"><a href="#六、安装路由" class="headerlink" title="六、安装路由"></a>六、安装路由</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装路由</span><br><span class="line">yarn add vue-router@4</span><br></pre></td></tr></table></figure>

<p>在 src 文件下新增 router 文件夹 =&gt; index.ts 文件,内容如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteRecordRaw</span>[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/pages/login/Login.vue&#x27;</span>), <span class="comment">// 注意这里要带上 文件后缀.vue</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>修改入口文件 mian.ts :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="七、axios统一请求封装"><a href="#七、axios统一请求封装" class="headerlink" title="七、axios统一请求封装"></a>七、axios统一请求封装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装 axios</span><br><span class="line">yarn add axios</span><br><span class="line"># 安装 nprogress 用于请求 loading</span><br><span class="line"># 也可以根据项目需求自定义其它 loading</span><br><span class="line">yarn add nprogress</span><br><span class="line"># 类型声明，或者添加一个包含 `declare module &#x27;nprogress&#x27;</span><br><span class="line">yarn add @types/nprogress --dev</span><br></pre></td></tr></table></figure>

<p>新增 service 文件夹，service 下新增 http.ts 文件以及 moudles 文件夹(存放各模块接口)和interface(公共ts)文件夹:</p>
<p>http.ts : 用于axios封装**</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//http.ts</span></span><br><span class="line"><span class="keyword">import</span> axios, &#123; <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求头和请求路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;/api&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  (config): <span class="title class_">AxiosRequestConfig</span>&lt;any&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="comment">//@ts-ignore</span></span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">token</span> = token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> error</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 响应拦截</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">111</span>) &#123;</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">// token过期操作</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">ResType</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">code</span>: number</span><br><span class="line">  data?: T</span><br><span class="line">  <span class="attr">msg</span>: string</span><br><span class="line">  err?: string</span><br><span class="line">&#125;</span><br><span class="line">interface <span class="title class_">Http</span> &#123;</span><br><span class="line">  get&lt;T&gt;(<span class="attr">url</span>: string, params?: unknown): <span class="title class_">Promise</span>&lt;<span class="title class_">ResType</span>&lt;T&gt;&gt;</span><br><span class="line">  post&lt;T&gt;(<span class="attr">url</span>: string, params?: unknown): <span class="title class_">Promise</span>&lt;<span class="title class_">ResType</span>&lt;T&gt;&gt;</span><br><span class="line">  upload&lt;T&gt;(<span class="attr">url</span>: string, <span class="attr">params</span>: unknown): <span class="title class_">Promise</span>&lt;<span class="title class_">ResType</span>&lt;T&gt;&gt;</span><br><span class="line">  <span class="title function_">download</span>(<span class="attr">url</span>: string): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">http</span>: <span class="title class_">Http</span> = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">get</span>(url, &#123; params &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">post</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">post</span>(url, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">upload</span>(<span class="params">url, file</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">post</span>(url, file, &#123;</span><br><span class="line">          <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span> &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">download</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line">    iframe.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    iframe.<span class="property">src</span> = url</span><br><span class="line">    iframe.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(iframe)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br></pre></td></tr></table></figure>

<p>例如：moudles 下新增login文件夹，用于存放登录模块的请求接口,login 文件夹下分别新增 login.ts types.ts :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;@/service/http&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> T <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">loginApi</span>: T.<span class="property">ILoginApi</span> = &#123;</span><br><span class="line">    <span class="title function_">login</span>(<span class="params">params</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> http.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, params)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> loginApi</span><br></pre></td></tr></table></figure>

<p>types.ts:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">ILoginParams</span> &#123;</span><br><span class="line">    <span class="attr">userName</span>: string</span><br><span class="line">    <span class="attr">passWord</span>: string | number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">ILoginApi</span> &#123;</span><br><span class="line">    <span class="attr">login</span>: <span class="function">(<span class="params">params: ILoginParams</span>)=&gt;</span> <span class="title class_">Promise</span>&lt;any&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、状态管理-pinia"><a href="#八、状态管理-pinia" class="headerlink" title="八、状态管理 pinia"></a>八、状态管理 pinia</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">yarn add pinia@next</span><br></pre></td></tr></table></figure>

<p>在 <code>src</code> 文件夹下新增 <code>store</code> 文件夹,接在在 store 中新增 main.ts</p>
<p>main.ts 中增加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 引入</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"># 创建根存储库并将其传递给应用程序</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br></pre></td></tr></table></figure>

<h1 id="九、添加element-plus"><a href="#九、添加element-plus" class="headerlink" title="九、添加element-plus"></a>九、添加element-plus</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装 element-plus </span><br><span class="line">yarn add element-plus</span><br></pre></td></tr></table></figure>

<h2 id="1-element-plus按需引入"><a href="#1-element-plus按需引入" class="headerlink" title="1.element-plus按需引入"></a>1.element-plus按需引入</h2><p>需要用到两个插件unplugin-vue-components、unplugin-auto-import这两个插件。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i unplugin-vue-components unplugin-auto-import -D</span><br></pre></td></tr></table></figure>

<p>另外这里要注意的是，由于使用了 unplugin-vue-components unplugin-auto-import 这两个插件，按需加载其实是不需要 import 组件，但如果使用Api创建组件，例如elmesage,elnotification这些，可以看到不 import 的话会提示错误，如果 import 又会导致样式的丢失,需要下载一个插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add unplugin-element-plus -D</span><br><span class="line">#或者 </span><br><span class="line">npm i unplugin-element-plus -D </span><br></pre></td></tr></table></figure>

<p>配置vite.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-element-plus/vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">dir: string</span>) =&gt; path.<span class="title function_">join</span>(__dirname, dir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">ElementPlus</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//配置别名</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>),</span><br><span class="line">      <span class="attr">comps</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src/components&quot;</span>),</span><br><span class="line">      <span class="attr">service</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src/service&quot;</span>),</span><br><span class="line">      <span class="attr">views</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src/views&quot;</span>),</span><br><span class="line">      <span class="attr">route</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src/route&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="comment">// css:&#123;</span></span><br><span class="line">    <span class="comment">//preprocessorOptions:&#123;</span></span><br><span class="line">      <span class="comment">//scss:&#123;</span></span><br><span class="line">      <span class="comment">//  additionalData:&#x27;@import &quot;@/assets/style/main.scss&quot;;&#x27;</span></span><br><span class="line">     <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"> <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">//配置跨域代理</span></span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置前端服务地址和端口</span></span><br><span class="line">    <span class="comment">//服务器主机名</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="comment">//端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3088</span>,</span><br><span class="line">    <span class="comment">//设为 true 时若端口已被占用则会直接退出，而不是尝试下一个可用端口</span></span><br><span class="line">    <span class="attr">strictPort</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//服务器启动时自动在浏览器中打开应用程序,当此值为字符串时，会被用作 URL 的路径名</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//自定义代理规则</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:3000&quot;</span>, <span class="comment">//要代理的本地api地址，也可以换成线上测试地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//跨域</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="2-添加element-plus图标"><a href="#2-添加element-plus图标" class="headerlink" title="2.添加element-plus图标"></a>2.添加element-plus图标</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># NPM</span><br><span class="line">$ npm install @element-plus/icons-vue</span><br><span class="line"># Yarn</span><br><span class="line">$ yarn add @element-plus/icons-vue</span><br></pre></td></tr></table></figure>

<p>然后在main.ts中全局注册并使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">ElementPlusIconsVue</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">	app.<span class="title function_">component</span>(key, <span class="title class_">ElementPlusIconsVue</span>[key <span class="keyword">as</span> keyof <span class="keyword">typeof</span> <span class="title class_">ElementPlusIconsVue</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="十、svg图标插件使用"><a href="#十、svg图标插件使用" class="headerlink" title="十、svg图标插件使用"></a>十、svg图标插件使用</h1><h2 id="1-安装svg图标插件"><a href="#1-安装svg图标插件" class="headerlink" title="1.安装svg图标插件"></a>1.安装svg图标插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装插件vue-svg-icon</span><br><span class="line">npm install vue-svg-icon --save-dev</span><br></pre></td></tr></table></figure>

<h2 id="2-注册全局组件svgIcon"><a href="#2-注册全局组件svgIcon" class="headerlink" title="2. 注册全局组件svgIcon"></a>2. 注册全局组件svgIcon</h2><p>在main.ts中全局注册并使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">&#x27;./components/SvgIcon/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/dist/index.css&quot;</span></span><br><span class="line"><span class="comment">//样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./styles/index.scss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 注册element Icons组件</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">ElementPlusIconsVue</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">	app.<span class="title function_">component</span>(key, <span class="title class_">ElementPlusIconsVue</span>[key <span class="keyword">as</span> keyof <span class="keyword">typeof</span> <span class="title class_">ElementPlusIconsVue</span>]);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>()).<span class="title function_">component</span>(<span class="string">&#x27;svg-icon&#x27;</span>, <span class="title class_">SvgIcon</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-下载存放svg图标"><a href="#3-下载存放svg图标" class="headerlink" title="3.下载存放svg图标"></a>3.下载存放svg图标</h2><p>在src下新建assets=&gt;icons=&gt;svg文件夹，用来存放svg图标，所有下载的SVG图标放入其中</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20221008180639420.png" alt="image-20221008180639420"></p>
<h2 id="4-使用svg图标"><a href="#4-使用svg图标" class="headerlink" title="4. 使用svg图标"></a>4. 使用svg图标</h2><p>以bug.svg图标为例，修改scale的值调整图标的大小。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svgIcon name=&quot;del&quot; :scale=&quot;1&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h1 id="十一、untils文件夹"><a href="#十一、untils文件夹" class="headerlink" title="十一、untils文件夹"></a>十一、untils文件夹</h1><p>在根目录下新建一个untils文件夹，这个文件夹下的内容主要是导出常用的一些公共方法等等:</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20221008171843967.png" alt="image-20221008171843967"></p>
<p>untils=&gt;util.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常用的工具方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; isArray &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/is&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 获取localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; key Storage名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localGet</span>(<span class="params">key: string</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> value = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(key) <span class="keyword">as</span> string);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 存储localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; key Storage名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Any</span>&#125; value Storage值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">void</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localSet</span>(<span class="params">key: string, value: any</span>) &#123;</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 清除localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; key Storage名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">void</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localRemove</span>(<span class="params">key: string</span>) &#123;</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 清除所有localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">void</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localClear</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 对象数组深克隆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj 源对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">object</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> deepCopy&lt;T&gt;(<span class="attr">obj</span>: any): T &#123;</span><br><span class="line">	<span class="keyword">let</span> <span class="attr">newObj</span>: any;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		newObj = obj.<span class="property">push</span> ? [] : &#123;&#125;;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">		newObj = &#123;&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> obj) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> obj[attr] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">			newObj[attr] = <span class="title function_">deepCopy</span>(obj[attr]);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			newObj[attr] = obj[attr];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 判断数据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Any</span>&#125; val 需要判断类型的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isType</span>(<span class="params">val: any</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (val === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> <span class="keyword">typeof</span> val;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(val).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>).<span class="title function_">toLocaleLowerCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 生成随机数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; min 最小值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; max 最大值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">number</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">randomNum</span>(<span class="params">min: number, max: number</span>): number &#123;</span><br><span class="line">	<span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (min - max) + max);</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 递归查询当前路由所对应的路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; menuList 菜单列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; path 当前地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">array</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> getTabPane&lt;T, U&gt;(<span class="attr">menuList</span>: any[], <span class="attr">path</span>: U): T &#123;</span><br><span class="line">	<span class="keyword">let</span> <span class="attr">result</span>: any;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> menuList || []) &#123;</span><br><span class="line">		<span class="keyword">if</span> (item.<span class="property">path</span> === path) result = item;</span><br><span class="line">		<span class="keyword">const</span> res = <span class="title function_">getTabPane</span>(item.<span class="property">children</span>, path);</span><br><span class="line">		<span class="keyword">if</span> (res) result = res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 使用递归处理路由菜单，生成一维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; menuList 所有菜单列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; newArr 菜单的一维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">array</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleRouter</span>(<span class="params">routerList: Menu.MenuOptions[], newArr: string[] = []</span>) &#123;</span><br><span class="line">	routerList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item: Menu.MenuOptions</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">typeof</span> item === <span class="string">&quot;object&quot;</span> &amp;&amp; item.<span class="property">path</span> &amp;&amp; newArr.<span class="title function_">push</span>(item.<span class="property">path</span>);</span><br><span class="line">		item.<span class="property">children</span> &amp;&amp; item.<span class="property">children</span>.<span class="property">length</span> &amp;&amp; <span class="title function_">handleRouter</span>(item.<span class="property">children</span>, newArr);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 扁平化数组对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; arr 数组对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">array</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getFlatArr</span>(<span class="params">arr: any</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre: any, current: any</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">let</span> flatArr = [...pre, current];</span><br><span class="line">		<span class="keyword">if</span> (current.<span class="property">children</span>) flatArr = [...flatArr, ...<span class="title function_">getFlatArr</span>(current.<span class="property">children</span>)];</span><br><span class="line">		<span class="keyword">return</span> flatArr;</span><br><span class="line">	&#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 格式化表格单元格默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; row 行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; col 列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; callValue 当前单元格值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defaultFormat</span>(<span class="params">row: number, col: number, callValue: any</span>) &#123;</span><br><span class="line">	<span class="comment">// 如果当前值为数组,使用 / 拼接（根据需求自定义）</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_">isArray</span>(callValue)) <span class="keyword">return</span> callValue.<span class="property">length</span> ? callValue.<span class="title function_">join</span>(<span class="string">&quot; / &quot;</span>) : <span class="string">&quot;--&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> callValue ?? <span class="string">&quot;--&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 处理无数据情况</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; callValue 需要处理的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatValue</span>(<span class="params">callValue: any</span>) &#123;</span><br><span class="line">	<span class="comment">// 如果当前值为数组,使用 / 拼接（根据需求自定义）</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_">isArray</span>(callValue)) <span class="keyword">return</span> callValue.<span class="property">length</span> ? callValue.<span class="title function_">join</span>(<span class="string">&quot; / &quot;</span>) : <span class="string">&quot;--&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> callValue ?? <span class="string">&quot;--&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 根据枚举列表查询当需要的数据（如果指定了 label 和 value 的 key值，会自动识别格式化）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; callValue 当前单元格值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; enumData 枚举列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; type 过滤类型（目前只有 tag）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">filterEnum</span>(<span class="params">callValue: any, enumData: any, searchProps?: &#123; [key: string]: any &#125;, type?: string</span>): string &#123;</span><br><span class="line">	<span class="keyword">const</span> value = searchProps?.<span class="property">value</span> ?? <span class="string">&quot;value&quot;</span>;</span><br><span class="line">	<span class="keyword">const</span> label = searchProps?.<span class="property">label</span> ?? <span class="string">&quot;label&quot;</span>;</span><br><span class="line">	<span class="keyword">let</span> <span class="attr">filterData</span>: any = &#123;&#125;;</span><br><span class="line">	<span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(enumData)) filterData = enumData.<span class="title function_">find</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> item[value] === callValue);</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;tag&quot;</span>) <span class="keyword">return</span> filterData?.<span class="property">tagType</span> ? filterData.<span class="property">tagType</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> filterData ? filterData[label] : <span class="string">&quot;--&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>is文件夹下的index.ts  常用的判断方式，is=&gt;index.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 判断值是否未某个类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">is</span>(<span class="params">val: unknown, type: string</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> toString.<span class="title function_">call</span>(val) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  是否为函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> isFunction&lt;T = <span class="title class_">Function</span>&gt;(<span class="attr">val</span>: unknown): val is T &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">is</span>(val, <span class="string">&quot;Function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 是否已定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isDef = &lt;T = unknown&gt;(val?: T): val is T =&gt; &#123;</span><br><span class="line">	return typeof val !== &quot;undefined&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const isUnDef = &lt;T = unknown&gt;(val?: T): val is T =&gt; &#123;</span><br><span class="line">	return !isDef(val);</span><br><span class="line">&#125;;</span><br><span class="line">/**</span><br><span class="line"> * @description: 是否为对象</span><br><span class="line"> */</span><br><span class="line">export const isObject = (val: any): val is Record&lt;any, any&gt; =&gt; &#123;</span><br><span class="line">	return val !== null &amp;&amp; is(val, &quot;Object&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为时间</span><br><span class="line"> */</span><br><span class="line">export function isDate(val: unknown): val is Date &#123;</span><br><span class="line">	return is(val, &quot;Date&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为数值</span><br><span class="line"> */</span><br><span class="line">export function isNumber(val: unknown): val is number &#123;</span><br><span class="line">	return is(val, &quot;Number&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为AsyncFunction</span><br><span class="line"> */</span><br><span class="line">export function isAsyncFunction&lt;T = any&gt;(val: unknown): val is Promise&lt;T&gt; &#123;</span><br><span class="line">	return is(val, &quot;AsyncFunction&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为promise</span><br><span class="line"> */</span><br><span class="line">export function isPromise&lt;T = any&gt;(val: unknown): val is Promise&lt;T&gt; &#123;</span><br><span class="line">	return is(val, &quot;Promise&quot;) &amp;&amp; isObject(val) &amp;&amp; isFunction(val.then) &amp;&amp; isFunction(val.catch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为字符串</span><br><span class="line"> */</span><br><span class="line">export function isString(val: unknown): val is string &#123;</span><br><span class="line">	return is(val, &quot;String&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为boolean类型</span><br><span class="line"> */</span><br><span class="line">export function isBoolean(val: unknown): val is boolean &#123;</span><br><span class="line">	return is(val, &quot;Boolean&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为数组</span><br><span class="line"> */</span><br><span class="line">export function isArray(val: any): val is Array&lt;any&gt; &#123;</span><br><span class="line">	return val &amp;&amp; Array.isArray(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 是否客户端</span><br><span class="line"> */</span><br><span class="line">export const isClient = () =&gt; &#123;</span><br><span class="line">	return typeof window !== &quot;undefined&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 是否为浏览器</span><br><span class="line"> */</span><br><span class="line">export const isWindow = (val: any): val is Window =&gt; &#123;</span><br><span class="line">	return typeof window !== &quot;undefined&quot; &amp;&amp; is(val, &quot;Window&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const isElement = (val: unknown): val is Element =&gt; &#123;</span><br><span class="line">	return isObject(val) &amp;&amp; !!val.tagName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const isServer = typeof window === &quot;undefined&quot;;</span><br><span class="line"></span><br><span class="line">// 是否为图片节点</span><br><span class="line">export function isImageDom(o: Element) &#123;</span><br><span class="line">	return o &amp;&amp; [&quot;IMAGE&quot;, &quot;IMG&quot;].includes(o.tagName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function isNull(val: unknown): val is null &#123;</span><br><span class="line">	return val === null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function isNullAndUnDef(val: unknown): val is null | undefined &#123;</span><br><span class="line">	return isUnDef(val) &amp;&amp; isNull(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function isNullOrUnDef(val: unknown): val is null | undefined &#123;</span><br><span class="line">	return isUnDef(val) || isNull(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二、typings-gt-global-d-ts放全局变量-命名空间"><a href="#十二、typings-gt-global-d-ts放全局变量-命名空间" class="headerlink" title="十二、typings-&gt;global.d.ts放全局变量,命名空间"></a>十二、typings-&gt;global.d.ts放全局变量,命名空间</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// * Menu</span><br><span class="line">declare namespace Menu &#123;</span><br><span class="line">	interface MenuOptions &#123;</span><br><span class="line">		path: string;</span><br><span class="line">		title: string;</span><br><span class="line">		icon?: string;</span><br><span class="line">		isLink?: string;</span><br><span class="line">		close?: boolean;</span><br><span class="line">		children?: MenuOptions[];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare type TabsOptions = Menu.MenuOptions &amp; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// * Vite</span><br><span class="line">declare type Recordable&lt;T = any&gt; = Record&lt;string, T&gt;;</span><br><span class="line"></span><br><span class="line">declare interface ViteEnv &#123;</span><br><span class="line">	VITE_API_URL: string;</span><br><span class="line">	VITE_PORT: number;</span><br><span class="line">	VITE_OPEN: boolean;</span><br><span class="line">	VITE_GLOB_APP_TITLE: string;</span><br><span class="line">	VITE_DROP_CONSOLE: boolean;</span><br><span class="line">	VITE_PROXY_URL: string;</span><br><span class="line">	VITE_BUILD_GZIP: boolean;</span><br><span class="line">	VITE_REPORT: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十三、vue3-0使用tsx语法"><a href="#十三、vue3-0使用tsx语法" class="headerlink" title="十三、vue3.0使用tsx语法"></a>十三、vue3.0使用tsx语法</h1><p>1.下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @vitejs/plugin-vue-jsx -D</span><br></pre></td></tr></table></figure>

<p>2.引入</p>
<p>在vite.config.ts中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">import vueJsx from &#x27;@vitejs/plugin-vue-jsx&#x27;;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue(),vueJsx()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.tsconfig.json 配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;jsx&quot;: &quot;preserve&quot;,</span><br><span class="line">&quot;jsxFactory&quot;: &quot;h&quot;,</span><br><span class="line">&quot;jsxFragmentFactory&quot;: &quot;Fragment&quot;,</span><br></pre></td></tr></table></figure>



<p><font color='#478fd2'>参考文章：</font></p>
<p><a href="https://juejin.cn/post/7036745610954801166#heading-21">Vite2 + Vue3 + TypeScript + Pinia 搭建一套企业级的开发脚手架</a></p>
<p><a href="https://juejin.cn/user/3456520289517608/posts">Vue3 + Ts + ElementPlus + Vite2 从零搭建后台管理系统</a></p>
<p><a href="https://github.com/someGenki/vue-lite-admin">禾几元老哥的github源码</a></p>
]]></content>
      <categories>
        <category>项目搭建</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vue3</tag>
        <tag>pinia</tag>
      </tags>
  </entry>
</search>
