<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello，欢迎来到耀耀切克闹的博客！</title>
    <url>/2022/09/22/hello%EF%BC%8C%E5%8D%9A%E5%AE%A2%EF%BC%81/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一-为什么要搭建博客？"><a href="#一-为什么要搭建博客？" class="headerlink" title="一.为什么要搭建博客？"></a>一.为什么要搭建博客？</h1><ol>
<li>搭建博客就是为了写博客，整理思路，将学习的知识融会贯通，以教为学。</li>
<li>在这个过程中，你可以认识更多兴趣相投的人。</li>
<li>事件驱动学习，每周持续的博客更新，查看自己是否学习到新东西！</li>
<li>对自己也是一种督促，你拥有一个完全属于自己的博客，会驱动自己分享学习！</li>
</ol>
<h1 id="二-搭建博客方式"><a href="#二-搭建博客方式" class="headerlink" title="二.搭建博客方式"></a>二.搭建博客方式</h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c43a9e29f11943a0bfdda5c3ab74f953~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="1-自己开发"><a href="#1-自己开发" class="headerlink" title="1.自己开发"></a>1.自己开发</h2><p>这是最原始的博客建站方式了，自己写代码（前台 + 后台管理+数据库等等）、自己将项目发布上线、自己来维护网站，啥都自己来干。这就意味着全栈的工作，你需要理解和学习的地方有好多好多，在这过程中需要耗费大量时间，但对自己的提升是不可估量的，并且代码掌握在自己手里，很安想加什么功能都不会受到限制，很灵活。这里推荐 Github 上的开源项目，可以在此上进行二次开发：</p>
<p>Halo博客，一款现代化的开源博客/CMS系统，值得一试。详细部署可以去  <a href="https://docs.halo.run/">https://docs.halo.run</a></p>
<h2 id="2-站点生成器"><a href="#2-站点生成器" class="headerlink" title="2.站点生成器"></a>2.站点生成器</h2><p>博客是一种很典型的网站，所以有大佬将博客的功能（比如文章管理）抽象出来，做成了 站点生成器 ，可以用极少的命令 + 配置文件的方式，自动生成精美的博客网站。本人还是比较菜的，刚毕业，工作了2个月多，前端菜鸡程序员一枚，于是采用了这种方式，也是我极力推荐的一种方式，省时省力，灵活程度虽然比不上完全由自己开发，但适合大多数人的需求。并且，绝大多数的站点生成器都只能生成静态网站，也就是说网站的内容（比如博客文章、文档等）是固定的，不需要从数据库中获取内容，因此有很多优点：</p>
<ul>
<li><p>省钱：把文件扔 GitHub Pages、Gitee Pages 啥的就能免费部署</p>
</li>
<li><p>速度快：省去了数据的动态获取过程，配合 CDN 加载速度飞起</p>
</li>
<li><p>SEO：静态网站更容易被搜索引擎的蜘蛛抓取，稳定排名</p>
</li>
<li><p>易维护：没那么多花里胡哨的功能，比动态网站好维护不少</p>
<p>这里推荐：</p>
</li>
</ul>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9da46d8689f54c17b43c325b00bfa08a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>  <strong>当然，好像另外还有一种方式就是建站程序，主流就是 WordPress（推荐）或 Typech，跟着官方文档操作就行，不过俺了解甚少。感兴趣的朋友可以去看看，据说也很方便。</strong></p>
<h2 id="3-建站平台和购买"><a href="#3-建站平台和购买" class="headerlink" title="3.建站平台和购买"></a>3.建站平台和购买</h2><p> 简单说吧！就是花钱办事，用金钱换时间。</p>
<p><strong>建站平台：</strong>套个现成的模板、利用界面拖拖拽拽就能搞出来一个网站，平台还会给你提供域名，一键上线。此外，网站的维护也不用咱自己操心了，全交给别人，我们专注于网站的内容就行，百度搜索应该有一大堆。</p>
<p><strong>购买</strong>: 极致的体验，没有最好，只有更好，你就是大爷，可以尽情享受氪金带来的快乐！（手动狗头)</p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>为什么要搭建博客</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3常用指令封装使用</title>
    <url>/2023/04/12/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/vue3%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%B0%81%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>因为需求可能需要频繁发送验证码，文本复制等等的，将这些封装成指令使用是最方便的，自己记个笔记，方便以后要用或者新项目搭建时的时候，c+v大法（手动狗头）</p>
</blockquote>
<h2 id="节流指令-v-throttle"><a href="#节流指令-v-throttle" class="headerlink" title="节流指令 v-throttle"></a>节流指令 v-throttle</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  需求：防止按钮在短时间内被多次点击，使用节流函数限制规定时间内只能点击一次。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  思路：</span></span><br><span class="line"><span class="comment">    1、第一次点击，立即调用方法并禁用按钮，等延迟结束再次激活按钮</span></span><br><span class="line"><span class="comment">    2、将需要触发的方法绑定在指令上</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  使用：给 Dom 加上 v-throttle 及回调函数即可</span></span><br><span class="line"><span class="comment">  &lt;button v-throttle="debounceClick"&gt;节流提交&lt;/button&gt;</span></span><br><span class="line"><span class="comment">  因为用了el.disabled也就是dom元素的disabled的属性，没disabled属性得使用，是不生效得</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">interface <span class="title class_">ElType</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> {</span><br><span class="line">	<span class="attr">__handleClick__</span>: <span class="function">() =&gt;</span> any;</span><br><span class="line">	<span class="attr">disabled</span>: boolean;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">throttle</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params">el: ElType, binding: DirectiveBinding</span>) {</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> binding.<span class="property">value</span> !== <span class="string">"function"</span>) {</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"callback must be a function"</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">let</span> <span class="attr">timer</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">		el.<span class="property">__handleClick__</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">			<span class="keyword">if</span> (timer) {</span><br><span class="line">				<span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">if</span> (!el.<span class="property">disabled</span>) {</span><br><span class="line">				el.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">				binding.<span class="title function_">value</span>();</span><br><span class="line">				timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">					el.<span class="property">disabled</span> = <span class="literal">false</span>;</span><br><span class="line">				}, <span class="number">1000</span>);</span><br><span class="line">			}</span><br><span class="line">		};</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	},</span><br><span class="line">	<span class="title function_">beforeUnmount</span>(<span class="params">el: ElType</span>) {</span><br><span class="line">		el.<span class="title function_">removeEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> throttle;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="防抖指令-v-debounce"><a href="#防抖指令-v-debounce" class="headerlink" title="防抖指令 v-debounce"></a>防抖指令 v-debounce</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-debounce</span></span><br><span class="line"><span class="comment"> * 按钮防抖指令，可自行扩展至input</span></span><br><span class="line"><span class="comment"> * 接收参数：function类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">interface <span class="title class_">ElType</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> {</span><br><span class="line">	<span class="attr">__handleClick__</span>: <span class="function">() =&gt;</span> any;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">debounce</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params">el: ElType, binding: DirectiveBinding</span>) {</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> binding.<span class="property">value</span> !== <span class="string">"function"</span>) {</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"callback must be a function"</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">let</span> <span class="attr">timer</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">		el.<span class="property">__handleClick__</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">			<span class="keyword">if</span> (timer) {</span><br><span class="line">				<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">			}</span><br><span class="line">			timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">				binding.<span class="title function_">value</span>();</span><br><span class="line">			}, <span class="number">500</span>);</span><br><span class="line">		};</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	},</span><br><span class="line">	<span class="title function_">beforeUnmount</span>(<span class="params">el: ElType</span>) {</span><br><span class="line">		el.<span class="title function_">removeEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> debounce;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="长按指令-v-longpress"><a href="#长按指令-v-longpress" class="headerlink" title="长按指令 v-longpress"></a>长按指令 v-longpress</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-longpress</span></span><br><span class="line"><span class="comment"> * 长按指令，长按时触发事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">directive</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params">el: HTMLElement, binding: DirectiveBinding</span>) {</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> binding.<span class="property">value</span> !== <span class="string">"function"</span>) {</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"callback must be a function"</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="comment">// 定义变量</span></span><br><span class="line">		<span class="keyword">let</span> <span class="attr">pressTimer</span>: any = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 创建计时器（ 2秒后执行函数 ）</span></span><br><span class="line">		<span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params">e: any</span>) =&gt; {</span><br><span class="line">			<span class="keyword">if</span> (e.<span class="property">button</span>) {</span><br><span class="line">				<span class="keyword">if</span> (e.<span class="property">type</span> === <span class="string">"click"</span> &amp;&amp; e.<span class="property">button</span> !== <span class="number">0</span>) {</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">if</span> (pressTimer === <span class="literal">null</span>) {</span><br><span class="line">				pressTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">					<span class="title function_">handler</span>(e);</span><br><span class="line">				}, <span class="number">1000</span>);</span><br><span class="line">			}</span><br><span class="line">		};</span><br><span class="line">		<span class="comment">// 取消计时器</span></span><br><span class="line">		<span class="keyword">const</span> <span class="title function_">cancel</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">			<span class="keyword">if</span> (pressTimer !== <span class="literal">null</span>) {</span><br><span class="line">				<span class="built_in">clearTimeout</span>(pressTimer);</span><br><span class="line">				pressTimer = <span class="literal">null</span>;</span><br><span class="line">			}</span><br><span class="line">		};</span><br><span class="line">		<span class="comment">// 运行函数</span></span><br><span class="line">		<span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params">e: MouseEvent | TouchEvent</span>) =&gt; {</span><br><span class="line">			binding.<span class="title function_">value</span>(e);</span><br><span class="line">		};</span><br><span class="line">		<span class="comment">// 添加事件监听器</span></span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"mousedown"</span>, start);</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"touchstart"</span>, start);</span><br><span class="line">		<span class="comment">// 取消计时器</span></span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, cancel);</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"mouseout"</span>, cancel);</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"touchend"</span>, cancel);</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"touchcancel"</span>, cancel);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> directive;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="拖拽指令-v-draggable"><a href="#拖拽指令-v-draggable" class="headerlink" title="拖拽指令 v-draggable"></a>拖拽指令 v-draggable</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	需求：实现一个拖拽指令，可在父元素区域任意拖拽元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	思路：</span></span><br><span class="line"><span class="comment">		1、设置需要拖拽的元素为absolute，其父元素为relative。</span></span><br><span class="line"><span class="comment">		2、鼠标按下(onmousedown)时记录目标元素当前的 left 和 top 值。</span></span><br><span class="line"><span class="comment">		3、鼠标移动(onmousemove)时计算每次移动的横向距离和纵向距离的变化值，并改变元素的 left 和 top 值</span></span><br><span class="line"><span class="comment">		4、鼠标松开(onmouseup)时完成一次拖拽</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	使用：在 Dom 上加上 v-draggable 即可</span></span><br><span class="line"><span class="comment">	&lt;div class="dialog-model" v-draggable&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">interface <span class="title class_">ElType</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> {</span><br><span class="line">	<span class="attr">parentNode</span>: any;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">draggable</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="attr">mounted</span>: <span class="keyword">function</span> (<span class="params">el: ElType</span>) {</span><br><span class="line">		el.<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">"move"</span>;</span><br><span class="line">		el.<span class="property">style</span>.<span class="property">position</span> = <span class="string">"absolute"</span>;</span><br><span class="line">		el.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">			<span class="keyword">let</span> disX = e.<span class="property">pageX</span> - el.<span class="property">offsetLeft</span>;</span><br><span class="line">			<span class="keyword">let</span> disY = e.<span class="property">pageY</span> - el.<span class="property">offsetTop</span>;</span><br><span class="line">			<span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">				<span class="keyword">let</span> x = e.<span class="property">pageX</span> - disX;</span><br><span class="line">				<span class="keyword">let</span> y = e.<span class="property">pageY</span> - disY;</span><br><span class="line">				<span class="keyword">let</span> maxX = el.<span class="property">parentNode</span>.<span class="property">offsetWidth</span> - el.<span class="property">offsetWidth</span>;</span><br><span class="line">				<span class="keyword">let</span> maxY = el.<span class="property">parentNode</span>.<span class="property">offsetHeight</span> - el.<span class="property">offsetHeight</span>;</span><br><span class="line">				<span class="keyword">if</span> (x &lt; <span class="number">0</span>) {</span><br><span class="line">					x = <span class="number">0</span>;</span><br><span class="line">				} <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; maxX) {</span><br><span class="line">					x = maxX;</span><br><span class="line">				}</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (y &lt; <span class="number">0</span>) {</span><br><span class="line">					y = <span class="number">0</span>;</span><br><span class="line">				} <span class="keyword">else</span> <span class="keyword">if</span> (y &gt; maxY) {</span><br><span class="line">					y = maxY;</span><br><span class="line">				}</span><br><span class="line">				el.<span class="property">style</span>.<span class="property">left</span> = x + <span class="string">"px"</span>;</span><br><span class="line">				el.<span class="property">style</span>.<span class="property">top</span> = y + <span class="string">"px"</span>;</span><br><span class="line">			};</span><br><span class="line">			<span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">				<span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="literal">null</span>;</span><br><span class="line">			};</span><br><span class="line">		};</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> draggable;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="复制指令-v-copy"><a href="#复制指令-v-copy" class="headerlink" title="复制指令 v-copy"></a>复制指令 v-copy</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * v-copy</span></span><br><span class="line"><span class="comment"> * 复制某个值至剪贴板</span></span><br><span class="line"><span class="comment"> * 接收参数：string类型/Ref&lt;string&gt;类型/Reactive&lt;string&gt;类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> type { <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span>  { <span class="title class_">Toast</span> }  <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line">interface <span class="title class_">ElType</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> {</span><br><span class="line">	<span class="attr">copyData</span>: string | number;</span><br><span class="line">	<span class="attr">__handleClick__</span>: any;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">copy</span>: <span class="title class_">Directive</span> = {</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params">el: ElType, binding: DirectiveBinding</span>) {</span><br><span class="line">		el.<span class="property">copyData</span> = binding.<span class="property">value</span>;</span><br><span class="line">		el.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, handleClick);</span><br><span class="line">	},</span><br><span class="line">	<span class="title function_">updated</span>(<span class="params">el: ElType, binding: DirectiveBinding</span>) {</span><br><span class="line">		el.<span class="property">copyData</span> = binding.<span class="property">value</span>;</span><br><span class="line">	},</span><br><span class="line">	<span class="title function_">beforeUnmount</span>(<span class="params">el: ElType</span>) {</span><br><span class="line">		el.<span class="title function_">removeEventListener</span>(<span class="string">"click"</span>, el.<span class="property">__handleClick__</span>);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"><span class="variable language_">this</span>: any</span>) {</span><br><span class="line">	<span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"input"</span>);</span><br><span class="line">	input.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">copyData</span>.<span class="title function_">toLocaleString</span>();</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(input);</span><br><span class="line">	input.<span class="title function_">select</span>();</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">"Copy"</span>);</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(input);</span><br><span class="line">    <span class="title class_">Toast</span>({</span><br><span class="line">        <span class="attr">type</span>: <span class="string">'success'</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">'复制成功'</span>,</span><br><span class="line">      })</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> copy;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="全局注册所有自定义指令"><a href="#全局注册所有自定义指令" class="headerlink" title="全局注册所有自定义指令"></a>全局注册所有自定义指令</h2><p>directivesIndex.ts：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">App</span> } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> copy <span class="keyword">from</span> <span class="string">"./modules/copy"</span>;</span><br><span class="line"><span class="keyword">import</span> draggable <span class="keyword">from</span> <span class="string">"./modules/draggable"</span>;</span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">"./modules/debounce"</span>;</span><br><span class="line"><span class="keyword">import</span> throttle <span class="keyword">from</span> <span class="string">"./modules/throttle"</span>;</span><br><span class="line"><span class="keyword">import</span> longpress <span class="keyword">from</span> <span class="string">"./modules/longpress"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">directivesList</span>: any = {</span><br><span class="line">	copy,</span><br><span class="line">	draggable,</span><br><span class="line">	debounce,</span><br><span class="line">	throttle,</span><br><span class="line">	longpress</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> directives = {</span><br><span class="line">	<span class="attr">install</span>: <span class="keyword">function</span> (<span class="params">app: App&lt;Element&gt;</span>) {</span><br><span class="line">		<span class="title class_">Object</span>.<span class="title function_">keys</span>(directivesList).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">			<span class="comment">// 注册所有自定义指令</span></span><br><span class="line">			app.<span class="title function_">directive</span>(key, directivesList[key]);</span><br><span class="line">		});</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> directives;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="在mian-ts引入并使用"><a href="#在mian-ts引入并使用" class="headerlink" title="在mian.ts引入并使用"></a>在mian.ts引入并使用</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> directivesIndex <span class="keyword">from</span> <span class="string">'directivesIndex.ts的路径'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(piniaStore).<span class="title function_">use</span>(directivesIndex).<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>项目搭建</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>NestJS 建项目</title>
    <url>/2023/03/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/NestJS%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%88%E8%B7%9F%E7%9D%80%E6%8E%98%E9%87%91%E5%A4%A7%E4%BD%AC%E7%9A%84%E6%96%87%E7%AB%A0%E5%AD%A6%E4%B9%A0%EF%BC%8C%E8%87%AA%E5%B7%B1%E8%AF%95%E7%9D%80%E6%95%B4%E4%BA%86%E4%B8%AA%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E6%8E%A5%E5%8F%A3%EF%BC%89/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>学习NestJS，主要看了<br><a href="https://juejin.cn/post/7032079740982788132#heading-22">学完这篇 Nest.js 实战，还没入门的来锤我！(长文预警) - 掘金 (juejin.cn)</a>，也是跟着整时做一个笔记，大佬讲已经很清晰了，不出意外真入门了，然后试着写了登录注册的接口，成功的那一刻还是挺开心的！！！</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我是按照官网的Nest CLI创建的项目，也是官网推荐初学者使用的方式:</p>
<p>若要使用 Nest CLI 构建项目，请运行以下命令。这将创建一个新的项目目录，并使用核心的 Nest 文件和支撑模块填充该目录，从而为项目创建一个传统的基本结构。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i -g @nestjs/cli</span><br><span class="line">$ nest <span class="keyword">new</span> project-name</span><br></pre></td></tr></tbody></table></figure>
<p>运行完命令后：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c74eaaa078c4538849c0f7ad31fd6f0~tplv-k3u1fbpfcp-watermark.image" alt="1678264171764.png"></p>
<p>这里简单说明一下这些核心文件：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── app.controller.spec.ts</span><br><span class="line">├── app.controller.ts</span><br><span class="line">├── app.module.ts</span><br><span class="line">├── app.service.ts</span><br><span class="line">├── main.ts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| ------------------------ | ------------------------------------------------- |</span><br><span class="line">| `app.controller.ts`      | 单个路由的基本控制器(Controller)                            |</span><br><span class="line">| `app.controller.spec.ts` | 针对控制器的单元测试                                        |</span><br><span class="line">| `app.module.ts`          | 应用程序的根模块(Module)                                  |</span><br><span class="line">| `app.service.ts`         | 具有单一方法的基本服务(Service)                              |</span><br><span class="line">| `main.ts`                | 应用程序的入口文件，它使用核心函数 `NestFactory` 来创建 Nest 应用程序的实例。 |</span><br></pre></td></tr></tbody></table></figure>
<p>具体可以去看这位大佬写的文章，非常好！我后面也是跟着这篇文章学习的</p>
<p>怎么连接数据库，接口规范统一，swagger等我都是按下面链接的大佬的文章学习的，然后也算是入了门，才开始试试登录注册的。</p>
<p><a href="https://juejin.cn/post/7032079740982788132#heading-22">学完这篇 Nest.js 实战，还没入门的来锤我！(长文预警) - 掘金 (juejin.cn)</a></p>
<h2 id="登录注册"><a href="#登录注册" class="headerlink" title="登录注册"></a>登录注册</h2><h3 id="全局路由前缀"><a href="#全局路由前缀" class="headerlink" title="全局路由前缀"></a>全局路由前缀</h3><p>上面链接的大佬有提过，在main.ts</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  app.<span class="title function_">setGlobalPrefix</span>(<span class="string">'api'</span>); <span class="comment">// 设置全局路由前缀</span></span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line">}</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></tbody></table></figure>
<p>此时之前的路由，都要变更为：<a href="http://localhost/api/xxxx">http://localhost/api/xxxx</a></p>
<h3 id="创建-USER-模块"><a href="#创建-USER-模块" class="headerlink" title="创建 USER 模块"></a>创建 USER 模块</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">nest g mo modules/user <span class="comment">//创建moudle</span></span><br><span class="line">nest g co modules/user <span class="comment">//创建控制器</span></span><br><span class="line">nest g s modules/user <span class="comment">//创建服务</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意创建顺序</strong>： 先创建<code>Module</code>, 再创建<code>Controller</code>和<code>Service</code>, 这样创建出来的文件在<code>Module</code>中自动注册，反之，后创建Module, <code>Controller</code>和<code>Service</code>,会被注册到外层的<code>app.module.ts</code></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7277a852f1447debd184e9127a8bcea~tplv-k3u1fbpfcp-watermark.image" alt="1678265171776.png"></p>
<h3 id="user表实体"><a href="#user表实体" class="headerlink" title="user表实体"></a>user表实体</h3><p>新建 user.entity.ts 实体，到时候可以通过<code>TypeORM</code>将实体映射到数据库表</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 用户实体类</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">Column</span>, <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span> } <span class="keyword">from</span> <span class="string">'typeorm'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">Exclude</span> } <span class="keyword">from</span> <span class="string">'class-transformer'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Entity</span>(<span class="string">'User'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserEntity</span> {</span><br><span class="line">  <span class="comment">// 用户id</span></span><br><span class="line">  @<span class="title class_">PrimaryGeneratedColumn</span>()</span><br><span class="line">  <span class="attr">id</span>: number; <span class="comment">// 标记为主列，值自动生成</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 昵称</span></span><br><span class="line">  @<span class="title class_">Column</span>({<span class="attr">default</span>:<span class="string">''</span>})</span><br><span class="line">  <span class="attr">nickname</span>: string;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//头像</span></span><br><span class="line">  @<span class="title class_">Column</span>({<span class="attr">default</span>:<span class="string">'https://i.postimg.cc/wjcFjQMD/b.png'</span>})</span><br><span class="line">  <span class="attr">avatar</span>: string;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 手机号</span></span><br><span class="line">  @<span class="title class_">Column</span>(<span class="string">'text'</span>)</span><br><span class="line">  <span class="attr">mobile</span>: string;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建时间</span></span><br><span class="line">  @<span class="title class_">Column</span>({ <span class="attr">type</span>: <span class="string">'timestamp'</span>, <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">'CURRENT_TIMESTAMP'</span> })</span><br><span class="line">  <span class="attr">create_time</span>: <span class="title class_">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新时间</span></span><br><span class="line">  @<span class="title class_">Column</span>({ <span class="attr">type</span>: <span class="string">'timestamp'</span>, <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">'CURRENT_TIMESTAMP'</span> })</span><br><span class="line">  <span class="attr">update_time</span>: <span class="title class_">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加密后的密码</span></span><br><span class="line">  @<span class="title class_">Column</span>(<span class="string">'text'</span>, { <span class="attr">select</span>: <span class="literal">false</span> })</span><br><span class="line">  <span class="attr">password</span>: string;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加密盐</span></span><br><span class="line">  @<span class="title class_">Column</span>(<span class="string">'text'</span>, { <span class="attr">select</span>: <span class="literal">false</span> })</span><br><span class="line">  <span class="attr">salt</span>: string;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="user-dto"><a href="#user-dto" class="headerlink" title="user.dto"></a>user.dto</h3><p><code>Nest.js</code>自带了三个开箱即用的管道：<code>ValidationPipe</code>、<code>ParseIntPipe</code>和<code>ParseUUIDPipe</code>, 其中<code>ValidationPipe</code> 配合<code>class-validator</code>就可以完美的实现我们想要的效果（对参数类型进行验证，验证失败抛出异常）。</p>
<p>新建user.dto.ts用于校验，完善错误提示信息</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">ApiProperty</span> } <span class="keyword">from</span> <span class="string">'@nestjs/swagger'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">IsNotEmpty</span> } <span class="keyword">from</span> <span class="string">'class-validator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RegisterDTO</span> {</span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'昵称'</span> })</span><br><span class="line">  readonly <span class="attr">nickname</span>: string;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'头像'</span> })</span><br><span class="line">  readonly <span class="attr">avatar</span>: string;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'手机号'</span> })</span><br><span class="line">  readonly <span class="attr">mobile</span>: string;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">IsNotEmpty</span>({ <span class="attr">message</span>: <span class="string">'密码没填'</span> })</span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'密码'</span> })</span><br><span class="line">  readonly <span class="attr">password</span>: string;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoginInfoDTO</span> {</span><br><span class="line">  @<span class="title class_">IsNotEmpty</span>({ <span class="attr">message</span>: <span class="string">'手机号没填'</span> })</span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'手机号'</span> })</span><br><span class="line">  readonly <span class="attr">mobile</span>: string;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">IsNotEmpty</span>({ <span class="attr">message</span>: <span class="string">'密码没填'</span> })</span><br><span class="line">  @<span class="title class_">ApiProperty</span>({ <span class="attr">description</span>: <span class="string">'密码'</span> })</span><br><span class="line">  readonly <span class="attr">password</span>: string;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="user控制层"><a href="#user控制层" class="headerlink" title="user控制层"></a>user控制层</h3><p>在user.controller.ts 控制层定义接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">Body</span>, <span class="title class_">Controller</span>, <span class="title class_">Post</span> } <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">ApiOperation</span> } <span class="keyword">from</span> <span class="string">'@nestjs/swagger'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserService</span> } <span class="keyword">from</span> <span class="string">'./user.service'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Controller</span>(<span class="string">'user'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private readonly userService:UserService</span>) {</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">//注册</span></span><br><span class="line">  @<span class="title class_">ApiOperation</span>({ <span class="attr">summary</span>: <span class="string">'注册用户'</span> })</span><br><span class="line">  @<span class="title class_">Post</span>(<span class="string">'register'</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params">@Body() createUser:any</span>) {</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">register</span>(createUser);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//登录</span></span><br><span class="line">  @<span class="title class_">ApiOperation</span>({ <span class="attr">summary</span>: <span class="string">'登录'</span> })</span><br><span class="line">  @<span class="title class_">Post</span>(<span class="string">'login'</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">@Body() loginInfo:any</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">login</span>(loginInfo);</span><br><span class="line">  }  </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="user业务层"><a href="#user业务层" class="headerlink" title="user业务层"></a>user业务层</h3><p>在user.service.ts写登录注册相关的业务逻辑</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">BadRequestException</span>, <span class="title class_">HttpException</span>, <span class="title class_">Injectable</span> } <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">InjectRepository</span> } <span class="keyword">from</span> <span class="string">'@nestjs/typeorm'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">Repository</span> } <span class="keyword">from</span> <span class="string">'typeorm'</span>;</span><br><span class="line"><span class="keyword">import</span> { encryptPassword, makeSalt } <span class="keyword">from</span> <span class="string">'utils/cryptogram'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">RegisterDTO</span> , <span class="title class_">LoginInfoDTO</span>} <span class="keyword">from</span> <span class="string">'./user.dto'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserEntity</span>} <span class="keyword">from</span> <span class="string">'./user.entity'</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">JwtService</span> } <span class="keyword">from</span> <span class="string">'@nestjs/jwt'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    @InjectRepository(UserEntity)</span></span><br><span class="line"><span class="params">    private readonly userRepository: Repository&lt;UserEntity&gt;,</span></span><br><span class="line"><span class="params">    private readonly jwtService: JwtService</span></span><br><span class="line"><span class="params">  </span>) {}</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 注册</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  mobile 手机号 </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  password 密码 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">register</span>(<span class="attr">createUser</span>:<span class="title class_">RegisterDTO</span>):<span class="title class_">Promise</span>&lt;any&gt;{</span><br><span class="line">      <span class="keyword">const</span> {mobile,password} = createUser;</span><br><span class="line">      <span class="keyword">if</span> (!mobile) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpException</span>(<span class="string">'入参缺少mobile'</span>, <span class="number">401</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">const</span> existUser = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">findOne</span>({<span class="attr">where</span>: {mobile}});</span><br><span class="line">      <span class="keyword">if</span> (existUser) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpException</span>(<span class="string">'该用户已注册'</span>, <span class="number">401</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">const</span> newUser = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">create</span>(createUser)</span><br><span class="line">      <span class="keyword">const</span> salt = <span class="title function_">makeSalt</span>(); <span class="comment">// 制作密码盐</span></span><br><span class="line">      <span class="keyword">const</span> hashPassword = <span class="title function_">encryptPassword</span>(password, salt);  <span class="comment">// 加密密码</span></span><br><span class="line">      newUser.<span class="property">password</span> = hashPassword</span><br><span class="line">      newUser.<span class="property">salt</span> = salt</span><br><span class="line">      <span class="comment">// this.userRepository.create(createUser)相当于new User(createUser)只是创建了一个新的用户对象</span></span><br><span class="line">      <span class="comment">// save方法才是执行插入数据</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">save</span>(newUser);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 登录检验</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  mobile 手机号 </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  password 密码 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">checkLoginForm</span>(<span class="attr">loginInfo</span>:<span class="title class_">LoginInfoDTO</span>):<span class="title class_">Promise</span>&lt;any&gt; {</span><br><span class="line">      <span class="keyword">const</span> {mobile,password} = loginInfo;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span></span><br><span class="line">        .<span class="title function_">createQueryBuilder</span>(<span class="string">'user'</span>)</span><br><span class="line">        .<span class="title function_">addSelect</span>(<span class="string">'user.salt'</span>)</span><br><span class="line">        .<span class="title function_">addSelect</span>(<span class="string">'user.password'</span>)</span><br><span class="line">        .<span class="title function_">where</span>(<span class="string">'user.mobile = :mobile'</span>, { mobile })</span><br><span class="line">        .<span class="title function_">getOne</span>()</span><br><span class="line">      <span class="keyword">if</span> (!user) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">'用户名不正确！'</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">const</span> currentHashPassword = <span class="title function_">encryptPassword</span>(password, user.<span class="property">salt</span>)</span><br><span class="line">      <span class="keyword">if</span> (currentHashPassword !== user.<span class="property">password</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">'密码错误'</span>)</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> user</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成token</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  UserEntity 用户实体类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">certificate</span>(<span class="params">user:UserEntity</span>){</span><br><span class="line">    <span class="keyword">const</span> payload = { </span><br><span class="line">      <span class="attr">id</span>: user.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">mobile</span>: user.<span class="property">mobile</span>,</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="property">jwtService</span>.<span class="title function_">sign</span>(payload);</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 登录</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="attr">loginInfo</span>:<span class="title class_">LoginInfoDTO</span>):<span class="title class_">Promise</span>&lt;any&gt; {</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">checkLoginForm</span>(loginInfo)</span><br><span class="line">    <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">certificate</span>(user)</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        token</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>其中需要注意jwt和user.entity的实体需要在user.module.ts中引入，然后把user.module暴露出去给app.module暴露出去给app导入，这样就建立了模块之间的关系，毕竟主模块是app.moudle</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">Module</span> } <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserController</span> } <span class="keyword">from</span> <span class="string">'./user.controller'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserService</span> } <span class="keyword">from</span> <span class="string">'./user.service'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">TypeOrmModule</span> } <span class="keyword">from</span> <span class="string">'@nestjs/typeorm'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">UserEntity</span> } <span class="keyword">from</span> <span class="string">'./user.entity'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">JwtModule</span> } <span class="keyword">from</span> <span class="string">'@nestjs/jwt'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Module</span>({</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">UserEntity</span>]),</span><br><span class="line">    <span class="title class_">JwtModule</span>.<span class="title function_">register</span>({</span><br><span class="line">      <span class="attr">secret</span>: <span class="string">'dasdjanksjdasd'</span>, <span class="comment">// 密钥</span></span><br><span class="line">      <span class="attr">signOptions</span>: { <span class="attr">expiresIn</span>: <span class="string">'8h'</span> }, <span class="comment">// token 过期时效</span></span><br><span class="line">    }),</span><br><span class="line">  ],</span><br><span class="line"> </span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> {}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><h3 id="注册成功"><a href="#注册成功" class="headerlink" title="注册成功"></a>注册成功</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ebcb18765764990937b444485bd0064~tplv-k3u1fbpfcp-watermark.image" alt="1678415253600.png"></p>
<h3 id="登录成功，返回token"><a href="#登录成功，返回token" class="headerlink" title="登录成功，返回token"></a>登录成功，返回token</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0c784a068a24e9e88e6d4f579306ddd~tplv-k3u1fbpfcp-watermark.image" alt="1678415198199.png"></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>Nest</tag>
      </tags>
  </entry>
  <entry>
    <title>在开发h5移动端项目（v3+vant3+pinia+vite）时遇到的问题总结(二)</title>
    <url>/2023/03/01/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%9C%A8%E5%BC%80%E5%8F%91h5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%EF%BC%88v3+vant3+pinia+vite%EF%BC%89%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93(%E4%BA%8C)/</url>
    <content><![CDATA[<html><head></head><body><h2 id="一、h5页面嵌套在小程序中时，系统设置了深色模式，会出现背景色冲突、深色文字显示异常，深色图标显示异常等一些显示上的问题。"><a href="#一、h5页面嵌套在小程序中时，系统设置了深色模式，会出现背景色冲突、深色文字显示异常，深色图标显示异常等一些显示上的问题。" class="headerlink" title="一、h5页面嵌套在小程序中时，系统设置了深色模式，会出现背景色冲突、深色文字显示异常，深色图标显示异常等一些显示上的问题。"></a>一、h5页面嵌套在小程序中时，系统设置了深色模式，会出现背景色冲突、深色文字显示异常，深色图标显示异常等一些显示上的问题。</h2><p>因为我司的项目，当时立项时并没有考虑适配深色模式，所以导致了这种情况<br>解决方式：</p>
<blockquote>
<p>在相应的受深色模式影响的页面最外层div加上css  background设置为白色（因为我司项目，背景基本是白色所以这样改能行，但应该是不是通用的），当时是快上线了，发现这个问题，急着上就没去整适配，只能用这种办法。</p>
</blockquote>
<p>具体的适配可以看看：<br><a href="https://juejin.cn/search?query=h5%E9%80%82%E9%85%8D%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F&amp;type=0">h5适配深色模式 - 搜索 - 掘金 (juejin.cn)</a></p>
<h2 id="二、前端文本复制功能的实现"><a href="#二、前端文本复制功能的实现" class="headerlink" title="二、前端文本复制功能的实现"></a>二、前端文本复制功能的实现</h2><p>安装&nbsp;<code>vue-clipboard3</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">$ npm install --save vue-clipboard3</span><br></pre></td></tr></tbody></table></figure>
<p>使用 <code>vue-clipboard3</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;button @click=<span class="string">"copy(复制的内容)"</span>&gt;复制的内容&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入插件</span></span><br><span class="line"><span class="keyword">import</span> useClipboard <span class="keyword">from</span> <span class="string">'vue-clipboard3'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { toClipboard } = <span class="title function_">useClipboard</span>() </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">copy</span> = <span class="keyword">async</span> (<span class="params">msg</span>) =&gt; { </span><br><span class="line">    <span class="keyword">try</span> { </span><br><span class="line">    <span class="comment">// 复制 await toClipboard(msg) </span></span><br><span class="line">    <span class="comment">// 复制成功 </span></span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">catch</span> (e) {</span><br><span class="line">    <span class="comment">// 复制失败 </span></span><br><span class="line">    } </span><br><span class="line">}   </span><br></pre></td></tr></tbody></table></figure>
<h2 id="三、v3-vant3的图片上传"><a href="#三、v3-vant3的图片上传" class="headerlink" title="三、v3+vant3的图片上传"></a>三、v3+vant3的图片上传</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-uploader</span><br><span class="line">       :after-read=<span class="string">"afterRead"</span></span><br><span class="line">       :before-read=<span class="string">"beforeRead"</span></span><br><span class="line">       :before-<span class="keyword">delete</span>=<span class="string">"beforeDelete"</span></span><br><span class="line">       v-model=<span class="string">"cardForm.imgList"</span></span><br><span class="line">       :max-count=<span class="string">"3"</span></span><br><span class="line">       preview-size=<span class="string">"2.4rem"</span></span><br><span class="line">       upload-text=<span class="string">"最多3张"</span></span><br><span class="line">     &gt;</span><br><span class="line">         <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">preview-delete</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"getAssetsFile('iconDelete.png')"</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">             <span class="attr">:style</span>=<span class="string">"{ width: $px2rem('18px'), height: $px2rem('18px')}"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">van-uploader</span>&gt;</span></span> </span><br></pre></td></tr></tbody></table></figure>
<p>js部分</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//图片上传前做判校验</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">beforeRead</span> = (<span class="params">file: any</span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> type = [<span class="string">'image/jpeg'</span> ,<span class="string">'image/png'</span>,<span class="string">'image/jpg'</span>]</span><br><span class="line">    <span class="keyword">const</span> isImage = type.<span class="title function_">includes</span>(file.<span class="property">type</span>)</span><br><span class="line">    <span class="keyword">const</span> isLt5M = file.<span class="property">size</span> / <span class="number">1024</span> /<span class="number">1024</span> &lt; <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span>(!isImage) {</span><br><span class="line">      <span class="title class_">Toast</span>(<span class="string">'请上传 jpg,png,jpeg 格式图片!'</span>);</span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">if</span>(!isLt5M) {</span><br><span class="line">      <span class="title class_">Toast</span>(<span class="string">'图片大小不能超过 5MB!'</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> isImage&amp;&amp;isLt5M</span><br><span class="line">  };</span><br><span class="line">  <span class="comment">//图片删除前</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">beforeDelete</span> = (<span class="params">file:any,i:any</span>) =&gt; {</span><br><span class="line">    <span class="title class_">PicListParams</span>.<span class="property">value</span>.<span class="title function_">splice</span>(i.<span class="property">index</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  };</span><br><span class="line">  <span class="comment">//图片上传服务器</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">afterRead</span> = <span class="keyword">async</span>(<span class="params">file: any</span>) =&gt; {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">    file.<span class="property">status</span> = <span class="string">'uploading'</span>;</span><br><span class="line">    file.<span class="property">message</span> = <span class="string">'上传中...'</span>;</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">'file'</span>, file.<span class="property">file</span>);</span><br><span class="line">    <span class="comment">//调用图片上传的接口</span></span><br><span class="line">    <span class="comment">//成功 file.status = 'none';并把返回的图片push</span></span><br><span class="line">    <span class="comment">//失败 file.status = 'fail'</span></span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure>


<h2 id="四、vant3表单使用textarea-autosize完成表单高度的自适应时，出现滚动条"><a href="#四、vant3表单使用textarea-autosize完成表单高度的自适应时，出现滚动条" class="headerlink" title="四、vant3表单使用textarea+autosize完成表单高度的自适应时，出现滚动条"></a>四、vant3表单使用textarea+autosize完成表单高度的自适应时，出现滚动条</h2><p>解决方式：给vant3的表单的van-field__control加上 overflow-y: hidden</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">::v-<span class="title function_">deep</span>(<span class="params">.van-field__control</span>) {</span><br><span class="line">  overflow-<span class="attr">y</span>: hidden;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="五、localstorage只能存字符串，存对象时需要转化成json格式，用时记得转化回来"><a href="#五、localstorage只能存字符串，存对象时需要转化成json格式，用时记得转化回来" class="headerlink" title="五、localstorage只能存字符串，存对象时需要转化成json格式，用时记得转化回来"></a>五、localstorage只能存字符串，存对象时需要转化成json格式，用时记得转化回来</h2><blockquote>
<p>这个其实自己一直知道这个知识点，平时也嘎嘎在用，但是开发着开发着突然不知怎么脑袋抽筋了，忘转化了，导致localstorage.getItem获取的值一直没取到，第一时间还没考虑到是localstorage的原因，浪费了一些时间找问题所在，本来不想把这个当笔记记录的，但是为了让自己涨涨记性还是记下来。</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> object = <span class="title function_">reactive</span>({</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'涨涨'</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">})</span><br><span class="line"><span class="comment">//用localstorage存值时</span></span><br><span class="line">locastorage.<span class="title function_">setItem</span>(<span class="string">'object'</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(object))</span><br><span class="line"></span><br><span class="line"><span class="comment">////用localstorage取值时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">JosnObject1</span> = locastorage.<span class="title function_">getItem</span>(<span class="string">'object'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Object1</span> = <span class="title class_">Json</span>.<span class="title function_">parse</span>(<span class="title class_">JosnObject1</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="六、小程序返回使用H5页面返回-放弃小程序自带返回按钮"><a href="#六、小程序返回使用H5页面返回-放弃小程序自带返回按钮" class="headerlink" title="六、小程序返回使用H5页面返回,放弃小程序自带返回按钮"></a>六、小程序返回使用H5页面返回,放弃小程序自带返回按钮</h2><p>最开始准备在小程序上使用自定义导航栏，但是自定义导航栏并不生效，取官网才发现：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10323754a9114124b25c6d7cc84749e2~tplv-k3u1fbpfcp-watermark.image" alt="企业微信截图_16762707878468.png"></p>
<blockquote>
<p>既然设置不了自定义导航栏，而webview组件又自带导航，我又要放弃小程序自带返回按钮，于是另辟蹊径，webview组件自带导航栏背景颜色是白色，那我把返回按钮和文字都设置为白色，这样就看不到了，用户要点应该也不会取点一个看不到的返回按钮</p>
</blockquote>
<p>在小程序的page.json，对应的weiview的页面设置：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">        <span class="string">"path"</span>: <span class="string">"webview/index"</span>,</span><br><span class="line">        <span class="string">"style"</span>: {</span><br><span class="line">          <span class="string">"navigationBarTextStyle"</span>: <span class="string">"white"</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="七、小程序嵌套h5项目时（使用的webview），从h5返回解决方式"><a href="#七、小程序嵌套h5项目时（使用的webview），从h5返回解决方式" class="headerlink" title="七、小程序嵌套h5项目时（使用的webview），从h5返回解决方式"></a>七、小程序嵌套h5项目时（使用的webview），从h5返回解决方式</h2><blockquote>
<p> 最开始把这个逻辑分析下，不就是h5跳小程序吗？调接口跳转就行了，但去官网看了看因为使用的webview嵌套在小程序中，返回小程序提供了专门的API，调接口跳小程序真的是脱裤子放屁，多此一举（手动狗头）</p>
</blockquote>
<p>解决方式：<br>在项目的index.html中引入微信官方提供的js-jdk，，就可以在页面中使用和&nbsp;<strong>微信相关的 API</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.3.2.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">wx.<span class="property">miniProgram</span>.<span class="title function_">navigateBack</span>() </span><br></pre></td></tr></tbody></table></figure>

<h2 id="八、在微信小程序中使用webview嵌套h5，跳转三方后，从三方返回到自己的h5页面时原本存在locastorage和sessionstorage里的数据全没了"><a href="#八、在微信小程序中使用webview嵌套h5，跳转三方后，从三方返回到自己的h5页面时原本存在locastorage和sessionstorage里的数据全没了" class="headerlink" title="八、在微信小程序中使用webview嵌套h5，跳转三方后，从三方返回到自己的h5页面时原本存在locastorage和sessionstorage里的数据全没了"></a>八、在微信小程序中使用webview嵌套h5，跳转三方后，从三方返回到自己的h5页面时原本存在locastorage和sessionstorage里的数据全没了</h2><p>原因分析：</p>
<h3 id="微信小程序中的-WebView"><a href="#微信小程序中的-WebView" class="headerlink" title="微信小程序中的 WebView"></a>微信小程序中的 WebView</h3><p>小程序的主要开发语言是&nbsp;<strong><code>JavaScript</code></strong>&nbsp;，其中&nbsp;<strong>逻辑层</strong>&nbsp;和&nbsp;<strong>渲染层</strong>&nbsp;是分开的，分别运行在不同的线程中，而其中的渲染层就是运行在&nbsp;<strong><code>WebView</code></strong>&nbsp;上：</p>
<table>
<thead>
<tr>
<th>运行环境</th>
<th>逻辑层</th>
<th>渲染层</th>
</tr>
</thead>
<tbody><tr>
<td>iOS</td>
<td>JavaScriptCore</td>
<td>WKWebView</td>
</tr>
<tr>
<td>安卓</td>
<td>V8</td>
<td>chromium 定制内核</td>
</tr>
<tr>
<td>小程序开发者工具</td>
<td>NWJS</td>
<td>Chrome WebView</td>
</tr>
</tbody></table>
<ul>
<li>  在真机中，需要实现同一域名下不同子路径的应用实现数据交互（纯前端操作，不涉及接口），由于同域名且是基于同一个页面进行跳转的（当然只是看起来是），而且这个数据是&nbsp;<strong>临时数据</strong>，因此觉得使用&nbsp;<strong><code>sessionStorage</code></strong>&nbsp;实现数据交互是很合适的</li>
<li>  实际上从&nbsp;<strong>A 应用</strong>&nbsp;跳转到&nbsp;<strong>B 应用</strong>&nbsp;中却无法获取对应的数据，而这是因为&nbsp;<strong>sessionStorage</strong>&nbsp;是基于当前窗口的会话级的数据存储，<strong>移动端浏览器</strong>&nbsp;或&nbsp;<strong>微信内置浏览器</strong>&nbsp;中在跳转新页面时，可能打开的是一个新的&nbsp;<strong>WebView</strong>，这就相当于我们在浏览器中的一个新窗口中进行存储，因此是没办法读取在之前的窗口中存储的数据</li>
</ul>
<p>解决方式：<br>存了的东西没了，就想办法从三方回来时再存一遍呗。</p>
<h2 id="九、vite获取环境变量遇到的坑"><a href="#九、vite获取环境变量遇到的坑" class="headerlink" title="九、vite获取环境变量遇到的坑"></a>九、vite获取环境变量遇到的坑</h2><blockquote>
<p>在根目录下的.env.prod文件中定义了需要的各种变量，其中定义了NODE_ENV和VITE_APP_ENV用来获取环境变量,发现import.meta.env.NODE_ENV为undefined，于是去官网看了看，只有VITE_前缀的变量才获取的到</p>
</blockquote>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable constant_">NODE_ENV</span> = <span class="string">'production'</span></span><br><span class="line"><span class="variable constant_">VITE_APP_ENV</span>= <span class="string">'production'</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">conlose.<span class="title function_">log</span>(<span class="string">'import.meta.env.VITE_APP_ENV'</span>,<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_ENV</span>)  <span class="comment">// 'production'</span></span><br><span class="line">conlose.<span class="title function_">log</span>(<span class="string">'import.meta.env.NODE_ENV '</span>,<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">NODE_ENV</span> ) <span class="comment">//undefined</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6257bd202c914c5198711539059f064a~tplv-k3u1fbpfcp-watermark.image" alt="d2a09598800238e6e9cbedfe0e79596.png"></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>H5项目，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的css函数式伪类</title>
    <url>/2023/02/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E7%9A%84css%E5%87%BD%E6%95%B0%E5%BC%8F%E4%BC%AA%E7%B1%BB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p> 能用css一步解决的，尽量少用js，一些合适的 CSS 甚至能让我们少写很多 JS，之前在工作中遇到了一个问题，本来准备用js实现的，在百度娘的科普下，使用某个CSS 函数式伪类就能实现，发现比自己预想的使用js方便多了，于是我就来多多了解了解一些常用的CSS 函数式伪类，此文做个笔记！（如有雷同，纯属抄袭，手动狗头）</p>
</blockquote>
<h2 id="一、逻辑组合-伪类"><a href="#一、逻辑组合-伪类" class="headerlink" title="一、逻辑组合 伪类"></a>一、逻辑组合 伪类</h2><h3 id="1-：not"><a href="#1-：not" class="headerlink" title="1. ：not"></a>1. ：not</h3><blockquote>
<p><code>:not</code> 匹配不符合一组选择器的元素。</p>
</blockquote>
<p>例如一个场景，每个列表项需要添加下边框线，一般最后一项是不需要的。通常我们会为每一项都设置下边框线，再单独设置最后一项的 <code>border-bottom</code> 为 0。使用 <code>:not</code> 也可以实现。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) {</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-has"><a href="#2-has" class="headerlink" title="2. :has"></a>2. :has</h3><blockquote>
<p><code>:has</code> 表示满足一定条件后，就会匹配该元素。这个据说是几十年来最激动人心的CSS发展<code>开发人员终于有了一种针对父元素的方法</code>。</p>
</blockquote>
<p>例如一个场景，在必填项的前面加上红色的星号</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">label</span><span class="selector-pseudo">:has</span>(+<span class="selector-tag">input</span><span class="selector-pseudo">:required</span>)<span class="selector-pseudo">::before</span>{</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">'*'</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>例如:父元素里有某个子元素时改变父元素的高</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">.<span class="property">father</span> :<span class="title function_">has</span>(<span class="params">.son</span>) {</span><br><span class="line">  <span class="attr">height</span>: 300px</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-is"><a href="#3-is" class="headerlink" title="3. :is"></a>3. :is</h3><blockquote>
<p>可以匹配一组选择器中的任意一个或多个，并把最终的选择器视为匹配到的那一个。<code>:is()</code>伪类函数<strong>大幅度缩减了选择器列表的字符数，简化了选择器列表的复杂度，降低了书写选择器列表出错的概率</strong>，注意<code>:is()</code> 不能与<code>::before</code> 和<code>::after</code> 伪元素相匹配</p>
</blockquote>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.test</span>&gt;<span class="selector-tag">img</span>,<span class="selector-class">.test1</span>&gt;<span class="selector-tag">img</span>,<span class="selector-class">.test2</span>&gt;<span class="selector-tag">img</span>,<span class="selector-class">.test3</span>&gt;<span class="selector-tag">img</span>{}</span><br></pre></td></tr></tbody></table></figure>
<p>上面的可简化为：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">:<span class="title function_">is</span>(.<span class="property">test</span>,.<span class="property">test1</span>,.<span class="property">tes2</span>,.<span class="property">test3</span>)&gt;img{}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-empty"><a href="#4-empty" class="headerlink" title="4. :empty"></a>4. :empty</h3><blockquote>
<p><code>:empty</code> 匹配没有子元素的元素。有时候列表的外层会包一层盒子，设置 padding 边距。当列表无数据返回时，外层盒子的 padding 会占用空间，使用 <code>:empty</code> 匹配无子元素时隐藏盒子，解决占用位置的问题。</p>
</blockquote>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>{</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.wrapper</span>:emtry{</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="二、用户行为-伪类"><a href="#二、用户行为-伪类" class="headerlink" title="二、用户行为 伪类"></a>二、用户行为 伪类</h2><h3 id="1-hover"><a href="#1-hover" class="headerlink" title="1. :hover"></a>1. :hover</h3><blockquote>
<p><code>selector:hover</code> 表示匹配鼠标经过的selector选择器元素。**:hover不是特备适用于移动端，虽然也能触发，但消失并不敏捷，体验反而奇怪。**</p>
</blockquote>
<p>例如：鼠标经过元素时的样式变化，Tips提示，下拉列表和过渡动画等</p>
<h3 id="2-active"><a href="#2-active" class="headerlink" title="2. :active"></a>2. :active</h3><blockquote>
<p><code>selector:active</code> 表示匹配激活状态的selector选择器元素（通过鼠标主键点击或触屏触摸的过程中触发样式，结束后还原样式），支持任意html元素</p>
</blockquote>
<h3 id="3-focus"><a href="#3-focus" class="headerlink" title="3. :focus"></a>3. :focus</h3><blockquote>
<p><code>selector:focus</code> 表示匹配聚焦状态的selector选择器元素。</p>
</blockquote>
<p>例如：表单聚焦改变样式</p>
<h3 id="4-focus-within"><a href="#4-focus-within" class="headerlink" title="4. :focus-within"></a>4. :focus-within</h3><blockquote>
<p><code>selector:focus-within</code> 表示当前selector选择器元素或者其子元素聚焦时都会匹配（而focus只会匹配对应元素本身）</p>
</blockquote>
<p>例如：form表单中任一表单元素聚集时让所有表单元素前面文字高亮</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">form</span><span class="selector-pseudo">:focus</span>-within <span class="selector-tag">label</span>{ <span class="attribute">color</span>:darkblue; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>; }</span><br></pre></td></tr></tbody></table></figure>

<h2 id="三、树结构伪类-伪类"><a href="#三、树结构伪类-伪类" class="headerlink" title="三、树结构伪类 伪类"></a>三、树结构伪类 伪类</h2><h3 id="1-root"><a href="#1-root" class="headerlink" title="1. :root"></a>1. :root</h3><blockquote>
<p>该伪类匹配的就是html根元素标签。由于现如今浏览器对CSS变量的支持，对于类似整站颜色，布局尺寸这样的变量，业界约定俗成<code>变量由:root伪类负责，而html选择器负责样式</code>。</p>
</blockquote>
<h3 id="2-first-child和-last-child"><a href="#2-first-child和-last-child" class="headerlink" title="2.:first-child和:last-child"></a>2.:first-child和:last-child</h3><blockquote>
<p><code>selector:first-child</code> 表示匹配作为其父元素的第一个子元素的selector元素</p>
</blockquote>
<blockquote>
<p><code>selector:last-child</code> 表示匹配作为其父元素的最后一个子元素的selector元素</p>
</blockquote>
<p>对列表元素的第一个/最后一个子元素的通用样式的重置。例如：最后一个子元素和第一个元素不要底部边框。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">li</span>:first-child{ border-<span class="attr">bottom</span>:none }</span><br><span class="line"><span class="attr">li</span>:last-child{ border-<span class="attr">bottom</span>:none }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-nth-child-和nth-last-child"><a href="#3-nth-child-和nth-last-child" class="headerlink" title="3. :nth-child()和nth-last-child()"></a>3. :nth-child()和nth-last-child()</h3><blockquote>
<p><code>selector:nth-child(n)</code> 表示匹配第n个子元素的selector元素</p>
</blockquote>
<blockquote>
<p><code>selector:nth-last-child(n)</code> 表示匹配从后往前数的第n个子元素的selector元素</p>
</blockquote>
<blockquote>
<ul>
<li><p>  <code>selector:nth-child(odd或even)</code>表示匹配作为其父元素的第奇数/偶数个子元素的selector元素</p>
</li>
<li><p><code>selector:nth-child(An+B)</code>表示匹配符合对应规则的子元素。</p>
<p>  其中A，B，n均为不为负的整数，但A前面可以添加负号。</p>
</li>
</ul>
</blockquote>
<p>示例：</p>
<pre><code> nth-child(5n)匹配第5，10，15...个子元素
 
 nth-child(3n+4)匹配第4，7，10...个子元素
 
 nth-child(-n+3)匹配前3个子元素
 
 nth-last-child(-n+3)匹配最后3个子元素
</code></pre>
<h3 id="4-first-of-type和-last-of-type"><a href="#4-first-of-type和-last-of-type" class="headerlink" title="4. :first-of-type和:last-of-type"></a>4. :first-of-type和:last-of-type</h3><blockquote>
<p><code>selector:first-of-type</code> 表示匹配与selector元素标签类型一致的第一个子元素</p>
</blockquote>
<blockquote>
<p><code>selector:last-of-type</code> 表示匹配与selector元素标签类型一致的最后一个子元素</p>
</blockquote>
<h3 id="5-nth-of-type-和nth-last-of-type"><a href="#5-nth-of-type-和nth-last-of-type" class="headerlink" title="5. :nth-of-type()和nth-last-of-type()"></a>5. :nth-of-type()和nth-last-of-type()</h3><blockquote>
<p><code>selector:nth-of-type(n)</code> 表示匹配与selector元素标签类型一致的子元素集合里第n个子元素</p>
</blockquote>
<blockquote>
<p><code>selector:nth-last-of-type(n)</code> 表示与selector元素标签类型一致的子元素集合里的从后往前数的第n个子元素</p>
</blockquote>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://juejin.cn/post/6943213394694504461#heading-25">CSS常用伪类选择器详解 - 掘金 (juejin.cn)</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>伪类</tag>
      </tags>
  </entry>
  <entry>
    <title>js常用方法</title>
    <url>/2023/02/10/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%A4%8D%E4%B9%A0%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[<html><head></head><body><h2 id="一、对象和字符串常用的方法"><a href="#一、对象和字符串常用的方法" class="headerlink" title="一、对象和字符串常用的方法"></a>一、对象和字符串常用的方法</h2><h3 id="字符串常用的方法"><a href="#字符串常用的方法" class="headerlink" title="字符串常用的方法"></a>字符串常用的方法</h3><p>1.indexOf()： 检索字符串，返回的是字符在字符串的下标</p>
<p>2.concat()：连接字符串</p>
<p>3.match()：在字符串内检索指定的值或找到一个或多个正则表达式的匹配，返回的是值而不是值的位置。</p>
<p>4.replace()：替换匹配的字符串</p>
<p>5.search()：检索与字符串匹配的子串，返回的是第一个字符所在的位置</p>
<p>6.split()：把字符分割成数组</p>
<p>7.substr()：从起始索引号提取字符串中指定书目的字符</p>
<h3 id="对象常用的方法"><a href="#对象常用的方法" class="headerlink" title="对象常用的方法"></a>对象常用的方法</h3><p>1.Object.assign()</p>
<p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。常用来合并对象。</p>
<p>assign其实是浅拷贝而不是深拷贝，如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const obj1 = { a: 1, b: 2 }</span><br><span class="line">const obj2 = { b: 4, c: 5 }</span><br><span class="line">const obj3 = Object.assign(obj1, obj2)</span><br><span class="line">const obj4 = Object.assign({}, obj1) // 克隆了obj1对象</span><br></pre></td></tr></tbody></table></figure>

<p>2.Object.keys() 对象的下标</p>
<p>3.Object.values() 对象的值</p>
<p>3.is方法和（===）功能基本类似，用于判断两个值是否绝对相等。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Object.is(1,1);//true</span><br><span class="line">Object.is(1,true);//false</span><br><span class="line">Object.is([],[]);//false</span><br><span class="line">Object.is(+0,-0);//false</span><br><span class="line">Object.is(NaN,NaN);//true</span><br></pre></td></tr></tbody></table></figure>
<h2 id="二、javascript高阶函数"><a href="#二、javascript高阶函数" class="headerlink" title="二、javascript高阶函数"></a>二、javascript高阶函数</h2><h3 id="1-map"><a href="#1-map" class="headerlink" title="1.map()"></a>1.map()</h3><p>定义：map()方法定义在JavaScript的Array中，它返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。</p>
<p>注意：map()不会对空数组进行检测，map()不会改变原始数组</p>
<p>语法：array.map(function(currentValue, index, arr), thisIndex)</p>
<p>参数说明：</p>
<p>currentValue：必须。当前元素的的值。 index：可选。当前元素的索引。 arr：可选。当前元素属于的数组对象。</p>
<p>thisIndex：可选。对象作为该执行回调时使用，传递给函数，用作”this”的值。</p>
<h3 id="2-reduce"><a href="#2-reduce" class="headerlink" title="2.reduce"></a>2.reduce</h3><p>定义：reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</p>
<p>注意: reduce() 对于空数组是不会执行回调函数的和map一样。</p>
<p>语法：array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</p>
<p>参数说明：</p>
<p>total 必需。初始值, 或者计算结束后的返回值。 currentValue 必需。当前元素 currentIndex 可选。当前元素的索引 arr 可选。当前元素所属的数组对象。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">totalAge = users.reduce((total, user) =&gt; user.age + total, 0);</span><br><span class="line">console.log(totalAge);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-filter"><a href="#3-filter" class="headerlink" title="3.filter"></a>3.filter</h3><p>定义：filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>
<p>注意： filter() 不会对空数组进行检测。</p>
<p>注意： filter() 不会改变原始数组。</p>
<p>语法 array.filter(function(currentValue,index,arr), thisValue)</p>
<p>参数说明：</p>
<p>currentValue 必须。当前元素的值 index 可选。当前元素的索引值 arr 可选。当前元素属于的数组对象</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">startsWithB = (string) =&gt; string.toLowerCase().startsWith('b');</span><br><span class="line">namesStartingWithB = users.filter((user) =&gt; startsWithB(user.name));</span><br><span class="line">console.log(namesStartingWithB);</span><br><span class="line">// [{ "name": "Bill", "age": 20 }]</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>前端随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>前端打印功能的实现</title>
    <url>/2023/01/14/%E7%BB%84%E4%BB%B6/%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前端打印功能的实现"><a href="#前端打印功能的实现" class="headerlink" title="前端打印功能的实现"></a>前端打印功能的实现</h1><h2 id="1-安装与使用"><a href="#1-安装与使用" class="headerlink" title="1.安装与使用"></a>1.安装与使用</h2><h3 id="Vue2-Version"><a href="#Vue2-Version" class="headerlink" title="Vue2 Version:"></a>Vue2 Version:</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install vue-print-nb --save</span><br><span class="line"></span><br><span class="line">// Global instruction  main.js中全局引入</span><br><span class="line">import Print from 'vue-print-nb'</span><br><span class="line">Vue.use(Print);</span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line">// Local instruction</span><br><span class="line">import print from 'vue-print-nb'</span><br><span class="line"></span><br><span class="line">directives: {</span><br><span class="line">    print   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Vue3-Version"><a href="#Vue3-Version" class="headerlink" title="Vue3 Version:"></a>Vue3 Version:</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install vue3-print-nb --save</span><br><span class="line">// Global instruction </span><br><span class="line">import { createApp } from 'vue'</span><br><span class="line">import App from './App.vue'</span><br><span class="line">import print from 'vue3-print-nb'</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(print)</span><br><span class="line">app.mount('#app')</span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line"></span><br><span class="line">// Local instruction</span><br><span class="line">import print from 'vue3-print-nb'</span><br><span class="line"></span><br><span class="line">directives: {</span><br><span class="line">    print   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"printTest"</span>&gt;</span>    </span><br><span class="line">    打印测试 <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-print</span>=<span class="string">"'#printTest'"</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-页眉页脚字符串问题"><a href="#2-页眉页脚字符串问题" class="headerlink" title="2.页眉页脚字符串问题"></a>2.页眉页脚字符串问题</h2><p>打印预览时发现页眉页脚会有页码 网址 undefined之类的字符</p>
<ol>
<li>直接利用样式解决，优点是简单粗暴，缺点是页面的上下边距都不存在了，就没有页面的上下留白了，看着打印出来的内容上下边距太窄 像下图设置为3mm就隐藏掉了页眉页脚</li>
</ol>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 打印媒体查询</span></span><br><span class="line"><span class="keyword">@media</span> print {</span><br><span class="line">  <span class="keyword">@page</span>{</span><br><span class="line">      size:  auto;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">3mm</span>;</span><br><span class="line">	}	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-打印时内容显示不全问题"><a href="#3-打印时内容显示不全问题" class="headerlink" title="3.打印时内容显示不全问题"></a>3.打印时内容显示不全问题</h2><p>在实际页面中高度不够部分内容隐藏了，这时候需要将对应块的内容为隐藏滚动的内容显示为全显示，打印时隐藏的内容并不会打印，只会打印到页面直接展示出来的内容</p>
<figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 打印媒体查询</span></span><br><span class="line"><span class="keyword">@media</span> print {</span><br><span class="line">  <span class="keyword">@page</span>{</span><br><span class="line">      size:  auto;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">3mm</span>;</span><br><span class="line">	}</span><br><span class="line"> <span class="selector-tag">body</span>{ </span><br><span class="line">		<span class="attribute">height</span>:auto;  <span class="comment">//在实际页面中高度不够部分内容隐藏了</span></span><br><span class="line">  }	   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-打印时样式消失了"><a href="#4-打印时样式消失了" class="headerlink" title="4.打印时样式消失了"></a>4.打印时样式消失了</h2><p>样式消失了的根本原因是写在打印内容外层的样式以及使用的一些框架的样式没有 在打印时 拿到的实际是打印块的iframe内容，如果明知道这块的内容需要打印，表格或者块内容不要使用任何UI框架以及其它外部scss或者less的内容,外部的类名拿不到，里面的所有样式拿不到， 要么单独根据api写上引入的样式地址，直方便便捷的方式是内联样式或者是写内部样式</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"printTest"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"print-style"</span>&gt;</span>打印的相关内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">   .box { } //无效</span><br><span class="line">   #printTest { } //无效</span><br><span class="line">	.print-style { } //写在这里的有效果</span><br><span class="line"> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="5-打印时需要根据内容分页及内容添加水印"><a href="#5-打印时需要根据内容分页及内容添加水印" class="headerlink" title="5.打印时需要根据内容分页及内容添加水印"></a>5.打印时需要根据内容分页及内容添加水印</h3><p>打印时如果有多个表格或者多个内容块，可以通过计算进行分以及给每一页添加水印 实际情况根据设置按需调整</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id="printTest"&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class="printPage printMark"  v-for="item in <span class="number">5</span>" :key=<span class="string">"item"</span> &gt;</span><br><span class="line">      打印的相关内容</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> &lt;div&gt;     </span><br><span class="line"></span><br><span class="line">// 打印媒体查询</span><br><span class="line">@media print {</span><br><span class="line">  <span class="keyword">@page</span>{</span><br><span class="line">      size:  auto;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">3mm</span>;</span><br><span class="line">   }</span><br><span class="line">  <span class="selector-tag">body</span>{ </span><br><span class="line">	<span class="attribute">height</span>:auto; </span><br><span class="line">  }</span><br><span class="line">  <span class="selector-class">.printPage</span> {   </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">291mm</span>;   //分页  根据实际</span><br><span class="line">    <span class="attribute">position</span>: relative; </span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span> {</span><br><span class="line">        <span class="attribute">position</span>: absolute; <span class="attribute">content</span>: <span class="string">'xx水印'</span>; <span class="attribute">top</span>:<span class="number">20%</span>; <span class="attribute">right</span>: <span class="number">5%</span>;  <span class="attribute">font-size</span>: <span class="number">48px</span>; <span class="attribute">opacity</span>: <span class="number">0.1</span>;  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">    }</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> {</span><br><span class="line">        <span class="attribute">position</span>: absolute; <span class="attribute">content</span>: <span class="string">'xx水印'</span>; <span class="attribute">bottom</span>:<span class="number">20%</span>; <span class="attribute">left</span>: <span class="number">5%</span>;  <span class="attribute">font-size</span>: <span class="number">48px</span>; <span class="attribute">opacity</span>: <span class="number">0.1</span>;  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">    }</span><br><span class="line">  }	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h1><p><a href="https://github.com/topics/vue-print-nb">vue-print-nb · GitHub Topics</a></p>
<p><a href="https://www.jianshu.com/p/4aad98b96771">vue 打印 vue-print-nb - 简书 (jianshu.com)</a></p>
</body></html>]]></content>
      <categories>
        <category>组件</category>
      </categories>
      <tags>
        <tag>组件封装</tag>
      </tags>
  </entry>
  <entry>
    <title>在开发h5移动端项目（v3+vant3+pinia+vite）时遇到的问题总结</title>
    <url>/2022/12/30/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%9C%A8%E5%BC%80%E5%8F%91h5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%EF%BC%88v3+vant3+pinia+vite%EF%BC%89%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一-移动端适配和适配后内联样式没有生效"><a href="#一-移动端适配和适配后内联样式没有生效" class="headerlink" title="一.移动端适配和适配后内联样式没有生效"></a>一.移动端适配和适配后内联样式没有生效</h1><h2 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h2><blockquote>
<p>既然是整移动端项目，那么移动端适配是必须要整了，目前开发的这个项目就是使用的是<code>rem方案</code>，<code>rem方案</code>的话比较常用的插件就是postcss-pxtorem+lib-flexible，至于为什么没用<code>vw方案</code>, vw 方案 还是有缺点的。如 <code>vw 方案</code><strong>不适合大屏</strong>，因为 vw 是一个比例单位，随着屏幕尺寸变大，使用vw单位的元素、字体也越来越大。但我们肯定是希望在大屏上展示更多的内容，而不是更大的文字、图标。现在用大屏的用户也是挺多的，我自己感觉还是<code>rem方案</code>好一点点（手动狗头）</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">yarn add amfe-flexible</span><br><span class="line">yarn add -D postcss-pxtorem</span><br></pre></td></tr></tbody></table></figure>
<p>根目录下postcss.config.cjs</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">    <span class="attr">plugins</span>: {</span><br><span class="line">      <span class="string">'postcss-pxtorem'</span>: {</span><br><span class="line">        <span class="comment">//如果你蓝湖上的UI图尺寸为375px，这里rootValue设置为37.5</span></span><br><span class="line">        <span class="comment">//如果你蓝湖上的UI图尺寸为750px，这里rootValue设置为75</span></span><br><span class="line">        <span class="comment">//蓝湖上的UI图的尺寸可以调节的，移动端一般用的37.5</span></span><br><span class="line">        <span class="attr">rootValue</span>: <span class="number">37.5</span>,</span><br><span class="line">        <span class="attr">propList</span>: [<span class="string">'*'</span>],</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>main.ts中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'amfe-flexible'</span>;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="内联样式没有生效"><a href="#内联样式没有生效" class="headerlink" title="内联样式没有生效"></a>内联样式没有生效</h2><blockquote>
<p><em><strong>整完这些后，开发着开发着，用vant样式没事，自己写的样式也嘎嘎生效，突然有个dom元素需要加个动态样式，或者图片需要设置宽高，这就需要使用到内联样式，然后就发现了设置的内联样式不生效，弔！</strong></em></p>
</blockquote>
<p>解决方法也挺简单，就是在main.ts中定义一个全局方法，用来把px转化成rem：<br>main.ts中加上</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">px2rem</span> = (<span class="params">px:any</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/%/ig</span>.<span class="title function_">test</span>(px)){ <span class="comment">// 有百分号%，特殊处理，表述pc是一个有百分号的数，比如：90%</span></span><br><span class="line">      <span class="keyword">return</span> px</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">parseFloat</span>(px) / <span class="number">37.5</span>) + <span class="string">'rem'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$px2rem</span> = px2rem <span class="comment">// 放到全局</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div :style=<span class="string">"{marginBottom:(ismarginBottom? $px2rem('42px'):$px2rem('16px'))}"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="二-H5-IOS-input-聚焦时，页面整个被推上去了，键盘收起页面未下移-BUG"><a href="#二-H5-IOS-input-聚焦时，页面整个被推上去了，键盘收起页面未下移-BUG" class="headerlink" title="二.H5 IOS input 聚焦时，页面整个被推上去了，键盘收起页面未下移 BUG"></a>二.H5 IOS input 聚焦时，页面整个被推上去了，键盘收起页面未下移 BUG</h1><h2 id="遇见的场景"><a href="#遇见的场景" class="headerlink" title="遇见的场景"></a>遇见的场景</h2><p><a href="https://so.csdn.net/so/search?q=vue&amp;spm=1001.2101.3001.7020">vue</a>基于vant3框架开发移动端项目时，出现了这样一个问题：<code>在手机上点击页面输入框时唤起手机自带键盘，结果顶部固定的导航栏也被顶起，导致遮挡住页面部分内容</code></p>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>给相应的输入框一个聚焦的事件:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-field</span><br><span class="line">   v-model=<span class="string">"cardForm.topUpamount"</span></span><br><span class="line">   label=<span class="string">"￥"</span></span><br><span class="line">   :rules=<span class="string">"rulesFrom.amount"</span></span><br><span class="line">   placeholder=<span class="string">""</span></span><br><span class="line">   :clearable=<span class="string">"true"</span></span><br><span class="line">   type=<span class="string">"number"</span></span><br><span class="line">   @focus=<span class="string">"changefocus"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>这个可以放在utils的index.ts下，导出这个方法，在需要的页面使用</p>
<p>如果这个输入框不是在vant组件的弹窗：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ios键盘唤起，键盘收起以后页面不归位bug解决</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changefocus</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">   <span class="keyword">const</span> u = navigator.<span class="property">userAgent</span></span><br><span class="line">   <span class="keyword">const</span> isIOS = !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class="line">     <span class="keyword">if</span>(isIOS){</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">         <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">         }, <span class="number">200</span>)</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>
<p>如果这个输入框是在vant组件的弹窗，例如动作面板弹窗：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ios键盘唤起，键盘收起以后页面不归位bug解决</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changefocus</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> u = navigator.<span class="property">userAgent</span>;</span><br><span class="line">  <span class="keyword">const</span> isIOS = !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class="line">  <span class="keyword">if</span> (isIOS) {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">    }, <span class="number">200</span>);</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeblur</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> u = navigator.<span class="property">userAgent</span>;</span><br><span class="line">  <span class="keyword">const</span> isIOS = !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class="line">  <span class="keyword">if</span> (isIOS) {</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<h1 id="三-状态调接口轮询"><a href="#三-状态调接口轮询" class="headerlink" title="三.状态调接口轮询"></a>三.状态调接口轮询</h1><blockquote>
<p>如充值，提现这种场景时，三方那边返回的结果可能需要比较久，这个时候就需要轮询着去结果，根据轮询的结果展示不同的需要展示的页面，如充值中，充值成功，失败等</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">timer</span>: any = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">Result</span> = <span class="keyword">async</span> (<span class="params">No:any</span>) =&gt; {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">res</span>: any = <span class="keyword">await</span> <span class="title function_">getResult</span>({<span class="title class_">No</span>: tNo })</span><br><span class="line">      <span class="comment">// 0 处理中 1 成功 2失败</span></span><br><span class="line">      <span class="keyword">if</span> ([<span class="number">0</span>].<span class="title function_">includes</span>(res.<span class="property">data</span>.<span class="property">State</span>)) {</span><br><span class="line">        timer.<span class="property">value</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">          <span class="title class_">Result</span>(<span class="title class_">No</span>);</span><br><span class="line">        }, <span class="number">2</span> * <span class="number">1000</span>);</span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">State</span> === <span class="number">1</span> || res.<span class="property">data</span>.<span class="property">State</span> === <span class="number">2</span>) {</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer.<span class="property">value</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="title class_">State</span>.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">State</span></span><br><span class="line">      <span class="comment">//该赋值的赋值</span></span><br><span class="line">      <span class="comment">//......</span></span><br><span class="line">    } <span class="keyword">catch</span> (error) {</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer.<span class="property">value</span>);</span><br><span class="line">    }</span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure>
<p>离开页面时，一定要清除定时，避免一直调用接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="built_in">clearTimeout</span>(timer.<span class="property">value</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<h1 id="四-第一次进入页面有在app-vue的onmouted里写了获取token方法调接口，页面刷新后token没了"><a href="#四-第一次进入页面有在app-vue的onmouted里写了获取token方法调接口，页面刷新后token没了" class="headerlink" title="四.第一次进入页面有在app.vue的onmouted里写了获取token方法调接口，页面刷新后token没了"></a>四.第一次进入页面有在app.vue的onmouted里写了获取token方法调接口，页面刷新后token没了</h1><blockquote>
<p>使用pinia+数据持久化,存放token 或者直接把接口获取到的存在localstorage</p>
</blockquote>
<h1 id="五-app端嵌套h5页面时，返回APP端时，不能使用router-go（-1），需要使用app端提供的关闭的桥的方法"><a href="#五-app端嵌套h5页面时，返回APP端时，不能使用router-go（-1），需要使用app端提供的关闭的桥的方法" class="headerlink" title="五.app端嵌套h5页面时，返回APP端时，不能使用router.go（-1），需要使用app端提供的关闭的桥的方法"></a>五.app端嵌套h5页面时，返回APP端时，不能使用router.go（-1），需要使用app端提供的关闭的桥的方法</h1><p>isIos.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isIos = !!navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>bridge.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {isIos } <span class="keyword">from</span> <span class="string">'./isIos'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setupWebViewJavascriptBridge</span> = (<span class="params">callback</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (isIos) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WebViewJavascriptBridge</span>) <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="variable language_">window</span>.<span class="property">WebViewJavascriptBridge</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WVJBCallbacks</span>) <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">WVJBCallbacks</span>.<span class="title function_">push</span>(callback)</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">WVJBCallbacks</span> = [callback]</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">WVJBIframe</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'iframe'</span>)</span><br><span class="line">        <span class="title class_">WVJBIframe</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'none'</span></span><br><span class="line">        <span class="title class_">WVJBIframe</span>.<span class="property">src</span> = <span class="string">'wvjbscheme://__BRIDGE_LOADED__'</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">appendChild</span>(<span class="title class_">WVJBIframe</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> { <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">removeChild</span>(<span class="title class_">WVJBIframe</span>) }, <span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">appBridge</span> = (<span class="params">apiName, payload, cb</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (isIos) {</span><br><span class="line">        <span class="title function_">setupWebViewJavascriptBridge</span>(<span class="function">(<span class="params">bridge</span>) =&gt;</span> bridge.<span class="title function_">callHandler</span>(apiName, payload, cb))</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">let</span> res = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">jsHZG</span>[apiName]) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload) !== <span class="string">'{}'</span> &amp;&amp; payload) {</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> payload === <span class="string">'object'</span>) {</span><br><span class="line">                    res = <span class="variable language_">window</span>.<span class="property">jsHZG</span>[apiName](<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payload))</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    res = <span class="variable language_">window</span>.<span class="property">jsHZG</span>[apiName](payload)</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                res = <span class="variable language_">window</span>.<span class="property">jsHZG</span>[apiName]()</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (cb) <span class="title function_">cb</span>(res)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">registerhandler</span> = (<span class="params">name, callback</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (isIos) {</span><br><span class="line">        <span class="title function_">setupWebViewJavascriptBridge</span>(<span class="keyword">function</span> (<span class="params">bridge</span>) {</span><br><span class="line">            bridge.<span class="title function_">registerHandler</span>(name, callback)</span><br><span class="line">        })</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="variable language_">window</span>[name] = <span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">callback</span>(data)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>webView.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { appBridge } <span class="keyword">from</span> <span class="string">'./bridge'</span></span><br><span class="line"><span class="comment">// 打开新web-view </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">newPage</span> = (<span class="params">isFull, path, query</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">appBridge</span>(<span class="string">'openNewPage'</span>, { <span class="attr">url</span>: isFull ? <span class="attr">path</span>: <span class="string">`<span class="subst">${<span class="variable language_">window</span>.location.origin}</span><span class="subst">${path}</span>`</span>  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭当前web-view</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">closePage</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">appBridge</span>(<span class="string">'closePage'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//跳转小程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">openXCX</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">appBridge</span>(<span class="string">'payStagesOrder'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取原生导航条的高度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStatusBarHeight</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">appBridge</span>(<span class="string">'getStatusBarHeight'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { closePage} <span class="keyword">from</span> <span class="string">'@/utils/webView'</span></span><br><span class="line"><span class="comment">//在需要的地方</span></span><br><span class="line"><span class="title function_">closePage</span>()</span><br></pre></td></tr></tbody></table></figure>
<h1 id="六-项目打包发布后，前端静态图片在测试环境无法显示的问题"><a href="#六-项目打包发布后，前端静态图片在测试环境无法显示的问题" class="headerlink" title="六. 项目打包发布后，前端静态图片在测试环境无法显示的问题"></a>六. 项目打包发布后，前端静态图片在测试环境无法显示的问题</h1><p>首先我们去vite官网看看关于静态资源文件的处理：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8eb5a3fa20b64c268656fffd4b2c2d72~tplv-k3u1fbpfcp-watermark.image" alt="企业微信截图_16720467796522.png"><br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ff1b2e4db47412e968f36bc9f43680d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><strong>这里我们先假设：</strong><br>静态文件目录：<code>src/assets/images/</code><br>我们的目标静态文件在&nbsp;<code>src/assets/images/home/home_icon.png</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">"src/assets/images/home/home_icon.png"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>那么这么写就会出现问题，在本地环境时你能够显示出图片，但打包发布到测试环境问题就出来了，图片没显示出来。<br>第一张图片标红的位置打包后是： <code>/assets/images/home/home_icon.（hash的值）.png</code> </p>
<p>综上所得：如果资源文件在assets文件夹打包后会把图片名加上 hash值，但是直接通过 :src=”imgSrc”方式引入并不会在打包的时候解析，导致开发环境可以正常引入，打包后却不能显示的问题<br>所以：<code>&lt;img src="src/assets/images/home/home_icon.png" /&gt;</code> 是肯定找不到的。                                                                      </p>
<h2 id="1-第一种方式解决方式（适用于处理单个链接的资源文件-普通推荐！！！！）"><a href="#1-第一种方式解决方式（适用于处理单个链接的资源文件-普通推荐！！！！）" class="headerlink" title="1.第一种方式解决方式（适用于处理单个链接的资源文件 普通推荐！！！！）"></a>1.第一种方式解决方式（适用于处理单个链接的资源文件 普通推荐！！！！）</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> homeIcon <span class="keyword">from</span> <span class="string">'@/assets/images/home/home_icon.png'</span></span><br><span class="line">&lt;img :src=<span class="string">"homeIcon"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="2-第二种解决方式：new-URL-import-meta-url（适用于处理多个链接的资源文件-极力推荐！！！！）"><a href="#2-第二种解决方式：new-URL-import-meta-url（适用于处理多个链接的资源文件-极力推荐！！！！）" class="headerlink" title="2.第二种解决方式：new URL() + import.meta.url（适用于处理多个链接的资源文件 极力推荐！！！！）"></a>2.第二种解决方式：new URL() + import.meta.url（适用于处理多个链接的资源文件 极力推荐！！！！）</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7b4011fe7b843c5b77fab9fbf678343~tplv-k3u1fbpfcp-watermark.image" alt="企业微信截图_16720474775759.png"><br>这也是vite官方文档说明的方式，new URL() + import.meta.url<br>工具文件目录：&nbsp;<code>src/util/img-use.ts</code><br>img-use.ts:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取assets静态资源</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getAssetsFile</span> = (<span class="params">url: string</span>) =&gt; {</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">`../assets/images/<span class="subst">${url}</span>`</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>).<span class="property">href</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>使用:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> getAssetsFile <span class="keyword">from</span> <span class="string">'@/util/img-use'</span></span><br><span class="line"><span class="comment">//setup语法糖写法,没用语法糖的记得return出去</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//如果是直接建在assets/images下，写图标名就行了</span></span><br><span class="line">&lt;img :src=<span class="string">"getAssetsFile('home_icon.png')"</span> /&gt;</span><br><span class="line"><span class="comment">//可以在../assets/images建目录如home文件夹，那么就是</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"getAssetsFile('/home/home_icon.png')"</span> /&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>另外：如果是背景图片引入的方式（一定要使用相对路径）</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">.<span class="property">imgBg</span> {</span><br><span class="line">  background-<span class="attr">image</span>: <span class="title function_">url</span>(<span class="string">'../../assets/images/WDNMD.jpg'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="3-第三种解决方式import-meta-glob或import-meta-globEager（适用于处理多个链接的资源文件-不怎么推荐！！！！）"><a href="#3-第三种解决方式import-meta-glob或import-meta-globEager（适用于处理多个链接的资源文件-不怎么推荐！！！！）" class="headerlink" title="3.第三种解决方式import.meta.glob或import.meta.globEager（适用于处理多个链接的资源文件 不怎么推荐！！！！）"></a>3.第三种解决方式import.meta.glob<code>或</code>import.meta.globEager（适用于处理多个链接的资源文件 不怎么推荐！！！！）</h2><p><strong>这种方式引入的文件必须指定到具体文件夹路径，传入的变量中只能为文件名，不能包含文件路径</strong></p>
<p>使用vite的<code>import.meta.glob</code>或<code>import.meta.globEager</code>，两者的区别是前者懒加载资源，后者直接引入。<br>那我为什么说不怎么推荐了，如果你使用的是最新版本的vite，就会出现</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b00c91d209c4435385ba8193c6f85089~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>可以看出<code>import.meta.globEager</code>已被弃用，只能用<code>import.meta.glob</code>了，并且你只能传图片名，不能传路径。</p>
<blockquote>
<p>const modules = import.meta.glob(‘./menus/**/*.ts’, { eager: true,import:’default’ })<br>以“default”这个选项作为默认的导出内容，从而避免对象为’unknow’时获取default的报错</p>
</blockquote>
<p>工具文件目录：&nbsp;<code>src/util/img-use.ts</code><br>img-use.ts:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取assets静态资源</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getAssetsHomeFile</span> = (<span class="params">url: string</span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> path = <span class="string">`../assets/images/home/<span class="subst">${url}</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> modules = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">globEager</span>(<span class="string">"../assets/images/home/*"</span>);</span><br><span class="line">    <span class="comment">//const modules = import.meta.globEager("../assets/images/home/*", { eager: true,import:'default' });</span></span><br><span class="line">    <span class="keyword">return</span> modules[path].<span class="property">default</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>使用:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useImg <span class="keyword">from</span> <span class="string">'@/util/img-use'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//写图标名就行了，不能带路径,并且你只能传图片名，不能传路径。</span></span><br><span class="line">&lt;img :src=<span class="string">"useImg('home_icon.png')"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="七-h5移动端，安卓看着没问题，ios的手机文字嘎嘎换行"><a href="#七-h5移动端，安卓看着没问题，ios的手机文字嘎嘎换行" class="headerlink" title="七.h5移动端，安卓看着没问题，ios的手机文字嘎嘎换行"></a>七.h5移动端，安卓看着没问题，ios的手机文字嘎嘎换行</h1><blockquote>
<p>（<em>原因</em>：给对应的dom元素设置了宽度，导致了换行，移动端布局时非必要不要设置宽度）</p>
</blockquote>
<h1 id="八-vant3-Dialog组件title没显示，我的是小米11的，ios或安卓的其他手机都显示了"><a href="#八-vant3-Dialog组件title没显示，我的是小米11的，ios或安卓的其他手机都显示了" class="headerlink" title="八.vant3 Dialog组件title没显示，我的是小米11的，ios或安卓的其他手机都显示了"></a>八.vant3 Dialog组件title没显示，我的是小米11的，ios或安卓的其他手机都显示了</h1><blockquote>
<p>目前没找到原因，见鬼了，就我的手机 Dialog组件title没显示。</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//手机号弹窗提示</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">dialogShow</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="title class_">Dialog</span>.<span class="title function_">alert</span>({</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">'我知道了'</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">'你瞅啥'</span>, <span class="comment">//这个没显示，离谱</span></span><br><span class="line">      <span class="attr">confirmButtonColor</span>: <span class="string">'#FE7E41'</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'瞅你乍地！！'</span>,</span><br><span class="line">    }).<span class="title function_">then</span>(<span class="function">() =&gt;</span> {});</span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure>
<h1 id="九-小程序嵌套web-view-H5页时，出现双导航的情况"><a href="#九-小程序嵌套web-view-H5页时，出现双导航的情况" class="headerlink" title="九.小程序嵌套web-view&nbsp;H5页时，出现双导航的情况"></a>九.小程序嵌套web-view&nbsp;H5页时，出现双导航的情况</h1><blockquote>
<p>在app.json中，小程序navBarTitle不设置，并且h5项目的mian.ts调用接口，获取这个是从哪来到或嵌套该h5页，把来源存放在全局中，用来判断是否隐藏left-arrow 返回箭头</p>
</blockquote>
<p>获取：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//调接口获取来源.............. 得到sourcePage</span></span><br><span class="line">     </span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$sourcePage</span> = sourcePage <span class="comment">// 放到全局</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">  title=<span class="string">"我的"</span></span><br><span class="line">  :left-arrow=<span class="string">"$sourcePage != '来源的值'"</span></span><br><span class="line">  :border=<span class="string">"false"</span></span><br><span class="line">  style=<span class="string">"width: 10rem"</span></span><br><span class="line">  :placeholder=<span class="string">"true"</span></span><br><span class="line">  :fixed=<span class="string">"true"</span></span><br><span class="line">  @click-left=<span class="string">"onClickLeft"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>这样就不是双导航了</p>
<h1 id="十-app端嵌套web-view-H5页时，出现双导航的情况"><a href="#十-app端嵌套web-view-H5页时，出现双导航的情况" class="headerlink" title="十.app端嵌套web-view&nbsp;H5页时，出现双导航的情况"></a>十.app端嵌套web-view&nbsp;H5页时，出现双导航的情况</h1><blockquote>
<p>让app端把原生的导航给隐藏了，使用h5的导航</p>
</blockquote>
<h1 id="十一-h5-title为空时，安卓手机导航栏会默认展示h5域名。"><a href="#十一-h5-title为空时，安卓手机导航栏会默认展示h5域名。" class="headerlink" title="十一.h5&nbsp;title为空时，安卓手机导航栏会默认展示h5域名。"></a>十一.h5&nbsp;title为空时，安卓手机导航栏会默认展示h5域名。</h1><blockquote>
<p>解决方案：通过document.title改变h5&nbsp;title</p>
</blockquote>
<h1 id="十二-安卓端布局正常，两div上下有间距，ios没间距"><a href="#十二-安卓端布局正常，两div上下有间距，ios没间距" class="headerlink" title="十二.安卓端布局正常，两div上下有间距，ios没间距"></a>十二.安卓端布局正常，两div上下有间距，ios没间距</h1><blockquote>
<p>ios自己写的样式不是vant组件的（vant组件自己做了适配）文字需要高度和行高，没高度就挤在一起了</p>
</blockquote>
<p>总结一手：vant组件使用样式穿透时，就不要给宽度，高度行高了，vant组件组件整好适配了，自己写的样式特别时文字需要给高度和行高，按蓝湖上来就行了</p>
<h1 id="十三-微信小程序配置业务域名，调用web-view组件打开需要嵌套的h5页面"><a href="#十三-微信小程序配置业务域名，调用web-view组件打开需要嵌套的h5页面" class="headerlink" title="十三.微信小程序配置业务域名，调用web-view组件打开需要嵌套的h5页面"></a>十三.微信小程序配置业务域名，调用web-view组件打开需要嵌套的h5页面</h1><p>应为有其他的微信 去到微信公众平台，开发管理下的开发设置的下配置义务域名<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26722f3dda64e84b36a36ef5f54ef7c~tplv-k3u1fbpfcp-watermark.image" alt="1672708788778.png"></p>
<p>下载的校验文件，放在public下，并且不要重命名，是什么名字就是什么，不然检测不到</p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>H5项目，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器相关原理</title>
    <url>/2022/12/20/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>前言：<br>  了解浏览器相关原理，自己也在掘金，csdn，知乎上看了别人的文章，觉得部分内容对我有益，复制下来做了下笔记，如有雷同，纯属c+v（手动狗头）</p>
</blockquote>
<h3 id="一、浏览器种类"><a href="#一、浏览器种类" class="headerlink" title="一、浏览器种类"></a>一、浏览器种类</h3><ul>
<li>  IE （internet Explorer）浏览器</li>
<li>  Firefox 火狐浏览器</li>
<li>  Chrome 谷歌浏览器</li>
<li>  Safari 浏览器</li>
<li>  Opera 浏览器</li>
</ul>
<blockquote>
<p>谈谈几种浏览器的内核</p>
</blockquote>
<ul>
<li><p>  内核只是一个通俗的说法，其英文名称为“Layout engine”，翻译过来就是“排版引擎”，也被称为“页面渲染引擎”</p>
</li>
<li><p>  它负责取得网页的内容（HTML、XML、图像等等）、整理信息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机</p>
</li>
<li><p>  所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要排版引擎。</p>
</li>
<li><p>内核种类</p>
<ul>
<li><p>Trident</p>
<ul>
<li>  这是微软开发的一种排版引擎。</li>
<li>  有时候，为了方便也有很多人直接简称其为IE内核</li>
<li>  IE、Maxthon、TT、The World</li>
</ul>
</li>
<li><p>Geckos</p>
<ul>
<li>  Gecko是套开放源代码的、以C++编写的网页排版引擎。</li>
<li>  FireFox</li>
</ul>
</li>
<li><p>Presto</p>
<ul>
<li>  Presto是一个由Opera Software开发的浏览器排版引擎</li>
<li>  Opera</li>
</ul>
</li>
<li><p>Webkit</p>
<ul>
<li>  苹果公司自己的内核，也是苹果的Safari浏览器使用的内核</li>
<li>  Webkit引擎包含WebCore排版引擎及JavaScriptCore解析引擎</li>
<li>  Safari、Chrome</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、浏览器功能"><a href="#二、浏览器功能" class="headerlink" title="二、浏览器功能"></a>二、浏览器功能</h3><ul>
<li><p>浏览器功能：</p>
<ul>
<li>  1、向服务器发出请求</li>
<li>  2、在浏览器窗口中展示您选择的网络资源</li>
<li>  这里所说的资源一般是指HTML文档，PDF、图片、其他的类型。</li>
<li>  资源的位置：由用户使用 URI（统一资源标示符）指定。</li>
</ul>
</li>
<li><p>浏览器解释显示规范：</p>
<ul>
<li>  浏览器解释并显示 HTML 文件的方式是在 HTML 和 CSS 规范中指定的。</li>
<li>  这些规范由网络标准化组织 W3C（万维网联盟）进行维护。</li>
<li>  万恶之源：虽然制定了相应的规范，但是各浏览器都没有完全遵从这些规范，同时还在开发自己独有的扩展程序，这给网络开发人员带来了严重的兼容性问题。</li>
</ul>
</li>
<li><p>浏览器的界面用户元素</p>
<ul>
<li>  用来输入 URI 的地址栏</li>
<li>  前进和后退按钮</li>
<li>  书签设置选项</li>
<li>  用于刷新和停止加载当前文档的刷新和停止按钮</li>
<li>  用于返回主页的主页按钮</li>
</ul>
</li>
<li><p>  浏览器的用户界面并没有任何正式的规范，这是多年来的最佳实践自然发展以及彼此之间相互模仿的结果。</p>
</li>
</ul>
<h3 id="三、浏览器渲染过程是怎样的？"><a href="#三、浏览器渲染过程是怎样的？" class="headerlink" title="三、浏览器渲染过程是怎样的？"></a>三、浏览器渲染过程是怎样的？</h3><p>按照渲染的时间顺序，流水线可分为如下几个子阶段：<code>构建 DOM 树</code>、<code>样式计算</code>、<code>布局阶段</code>、<code>分层</code>、<code>栅格化</code>和<code>显示</code>。</p>
<ol>
<li> 渲染进程将 HTML 内容转换为能够读懂DOM 树结构。</li>
<li> 渲染引擎将 CSS 样式表转化为浏览器可以理解的styleSheets，计算出 DOM 节点的样式。</li>
<li> 创建布局树，并计算元素的布局信息。</li>
<li> 对布局树进行分层，并生成分层树。</li>
<li> 为每个图层生成绘制列表，并将其提交到合成线程。合成线程将图层分图块，并栅格化将图块转换成位图。</li>
<li> 合成线程发送绘制图块命令给浏览器进程。浏览器进程根据指令生成页面，并显示到显示器上。</li>
</ol>
<p>浏览器从网络或硬盘中获得HTML字节数据后会经过一个流程将字节解析为DOM树,先将HTML的原始字节数据转换为文件指定编码的字符,然后浏览器会根据HTML规范来将字符串转换成各种令牌标签，如html、body等。最终解析成一个树状的对象模型，就是dom树；</p>
<p>获取css，获取style标签内的css、或者内嵌的css,或者当HTML代码遇见标签时，浏览器会发送请求获得该标签中标记的CSS，当渲染引擎接收到 CSS 文本时，会执行一个转换操作，将 CSS 文本转换为浏览器可以理解的styleSheets</p>
<p>创建布局树，遍历 DOM 树中的所有可见节点，并把这些节点加到布局中；而不可见的节点会被布局树忽略掉，如 head 标签下面的全部内容，再比如 body.p.span 这个元素，因为它的属性包含 dispaly:none，所以这个元素也没有被包进布局树。最后计算 DOM 元素的布局信息，使其都保存在布局树中。<code>布局完成过程中，如果有js操作或者其他操作，对元素的颜色，背景等作出改变就会引起重绘，如果有对元素的大小、定位等有改变则会引起回流。</code></p>
<p>因为页面中有很多复杂的效果，如一些复杂的 3D 变换、页面滚动，或者使用 z-indexing 做 z 轴排序等，为了更加方便地实现这些效果，渲染引擎还需要为特定的节点生成专用的图层，并生成一棵对应的图层树。</p>
<p>渲染引擎实现图层的绘制，把一个图层的绘制拆分成很多小的绘制指令然后再把这些指令按照顺序组成一个待绘制列表，当图层的绘制列表准备好之后，主线程会把该绘制列表提交给合成线程，合成线程会将图层划分为图块，然后按照视口附近的图块来优先生成位图(实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图)</p>
<p>一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令，然后将该命令提交给浏览器进程,浏览器最后进行显示。</p>
<h3 id="2-如何理解回流和重绘？"><a href="#2-如何理解回流和重绘？" class="headerlink" title="2.如何理解回流和重绘？"></a>2.如何理解回流和重绘？</h3><p><code>回流：</code>当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）。</p>
<p><code>重绘：</code>当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。 由此我们可以看出，重绘不一定导致回流，回流一定会导致重绘。</p>
<h5 id="常见的会导致回流的元素："><a href="#常见的会导致回流的元素：" class="headerlink" title="常见的会导致回流的元素："></a>常见的会导致回流的元素：</h5><ul>
<li>  常见的几何属性有 width、height、padding、margin、left、top、border 等等。</li>
<li>  最容易被忽略的操作：获取一些需要通过即时计算得到的属性,当你要用到像这样的属性：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight 时，浏览器为了获取这些值，也会进行回流。</li>
<li>  当我们调用了 getComputedStyle 方法，或者 IE 里的 currentStyle 时，也会触发回流。原理是一样的，都为求一个“即时性”和“准确性”。</li>
</ul>
<h5 id="避免方式："><a href="#避免方式：" class="headerlink" title="避免方式："></a>避免方式：</h5><ol>
<li> 避免逐条改变样式，使用类名去合并样式</li>
<li> 将 DOM “离线”,使用DocumentFragment</li>
<li> 提升为合成层,如使用<code>will-change</code></li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#divId {</span><br><span class="line">  will-change: transform;</span><br><span class="line">}</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure>

<p><strong><code>优点</code></strong></p>
<ul>
<li>  合成层的位图，会交由 GPU 合成，比 CPU 处理要快</li>
<li>  当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层</li>
<li>  对于 transform 和 opacity 效果，不会触发 layout 和 paint</li>
</ul>
<p><strong>注意：</strong></p>
<p>部分浏览器缓存了一个 flush 队列，把我们触发的回流与重绘任务都塞进去，待到队列里的任务多起来、或者达到了一定的时间间隔，或者“不得已”的时候，再将这些任务一口气出队。但是当我们访问一些即使属性时，浏览器会为了获得此时此刻的、最准确的属性值，而提前将 flush 队列的任务出队</p>
<h3 id="四、-JavaScript-中的数据是如何存储在内存中的？"><a href="#四、-JavaScript-中的数据是如何存储在内存中的？" class="headerlink" title="四、 JavaScript 中的数据是如何存储在内存中的？"></a>四、 JavaScript 中的数据是如何存储在内存中的？</h3><p>在 JavaScript 中，原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。</p>
<p>在 JavaScript 的执行过程中， 主要有三种类型内存空间，分别是<code>代码空间</code>、<code>栈空间</code>、<code>堆空间</code>。 其中的代码空间主要是存储可执行代码的，原始类型(Number、String、Null、Undefined、Boolean、Symbol、BigInt)的数据值都是直接保存在“栈”中的，引用类型(Object)的值是存放在“堆”中的。因此在栈空间中(执行上下文)，原始类型存储的是变量的值，而引用类型存储的是其在”堆空间”中的地址，当 JavaScript 需要访问该数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手流程。</p>
<p>在编译过程中，如果 JavaScript 引擎判断到一个闭包，也会在堆空间创建换一个<code>“closure(fn)”</code>的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存闭包中的变量。所以闭包中的变量是存储在“堆空间”中的。</p>
<p>JavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，堆空间很大，能存放很多大的数据，不过缺点是分配内存和回收内存都会占用一定的时间。因此需要“栈”和“堆”两种空间。</p>
<h1 id="原文参考"><a href="#原文参考" class="headerlink" title="原文参考"></a>原文参考</h1><p><a href="https://juejin.cn/post/6844903962216824839">浏览器相关原理(面试题)详细总结一 - 掘金 (juejin.cn)</a><br><a href="https://juejin.cn/post/6844903969693646862#heading-0">浏览器相关原理(面试题)详细总结二 - 掘金 (juejin.cn)</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>面试题，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>cookie、localStorage、sessionStorage</title>
    <url>/2022/12/14/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/cookie%E3%80%81localStorage%E3%80%81sessionStorage%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、三者的异同"><a href="#一、三者的异同" class="headerlink" title="一、三者的异同"></a>一、三者的异同</h1><table>
<thead>
<tr>
<th>特性</th>
<th>Cookie</th>
<th>localStorage</th>
<th>sessionStorage</th>
</tr>
</thead>
<tbody><tr>
<td>数据的生命期</td>
<td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td>
<td>除非被清除，否则永久保存</td>
<td>仅在当前会话下有效，关闭页面或浏览器后被清除</td>
</tr>
<tr>
<td>存放数据大小</td>
<td>4K左右</td>
<td>一般为5MB</td>
<td>一般为5MB</td>
</tr>
<tr>
<td>与服务器端通信</td>
<td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
</tr>
<tr>
<td>易用性</td>
<td>需要程序员自己封装，源生的Cookie接口不友好</td>
<td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>
<td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>
</tr>
</tbody></table>
<h1 id="二、localStorage和sessionStorage操作"><a href="#二、localStorage和sessionStorage操作" class="headerlink" title="二、localStorage和sessionStorage操作"></a>二、localStorage和sessionStorage操作</h1><h4 id="setItem存储value"><a href="#setItem存储value" class="headerlink" title="setItem存储value"></a>setItem存储value</h4><p>用途：将value存储到key字段</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sessionStorage.setItem("key", "value"); &nbsp; &nbsp; localStorage.setItem("site", "js8.in");</span><br></pre></td></tr></tbody></table></figure>

<h4 id="getItem获取value"><a href="#getItem获取value" class="headerlink" title="getItem获取value"></a>getItem获取value</h4><p>用途：获取指定key本地存储的值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var value = sessionStorage.getItem("key"); &nbsp; &nbsp; var site = localStorage.getItem("site");</span><br></pre></td></tr></tbody></table></figure>

<h4 id="removeItem删除key"><a href="#removeItem删除key" class="headerlink" title="removeItem删除key"></a>removeItem删除key</h4><p>用途：删除指定key本地存储的值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sessionStorage.removeItem("key"); &nbsp; &nbsp; localStorage.removeItem("site");</span><br></pre></td></tr></tbody></table></figure>

<h4 id="clear清除所有的key-value"><a href="#clear清除所有的key-value" class="headerlink" title="clear清除所有的key/value"></a>clear清除所有的key/value</h4><p>用途：清除所有的key/value</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sessionStorage.clear(); &nbsp; &nbsp; localStorage.clear();</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>面试题，随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>css滚动条，让滚动条看起来更好看</title>
    <url>/2022/12/03/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/css%E6%BB%9A%E5%8A%A8%E6%9D%A1%EF%BC%8C%E8%AE%A9%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9C%8B%E8%B5%B7%E6%9D%A5%E6%9B%B4%E5%A5%BD%E7%9C%8B/</url>
    <content><![CDATA[<html><head></head><body><h1 id="css滚动条"><a href="#css滚动条" class="headerlink" title="css滚动条"></a>css滚动条</h1><p>相关样式属性说明（详情查看图片，序号一一对应） </p>
<ol>
<li>::-webkit-scrollbar 滚动条整体部分，可以设置 width, height, background, border 等</li>
<li>::-webkit-scrollbar-button 滚动条两端的按钮，可以设置 display:none 让其不显示，也可以添加背景图片、颜色改变其显示效果 </li>
<li>::-webkit-scrollbar-track 外层轨道，可以设置 display:none 让其不显示，也可以添加背景图片、颜色改变其显示效果 </li>
<li>::-webkit-scrollbar-track-piece 内层滚动槽 </li>
<li>::-webkit-scrollbar-thumb 滚动的滑块，也就是可以用鼠标点击拖动的部分 </li>
<li>::-webkit-scrollbar-corner 边角 </li>
<li>::-webkit-resizer 定义右下角拖动块的样式。</li>
</ol>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f4ba6b948dc46aeb59dd77439b71ea9~tplv-k3u1fbpfcp-watermark.image" alt="159ada1eddb44a00c5f7003f9df9961f.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/* 改变element表格的滚动条样式 */</span><br><span class="line">.el-table__body-wrapper::-webkit-scrollbar {</span><br><span class="line">    width: 4px; /* 纵向滚动条的大小 */</span><br><span class="line">    height: 10px; /* 横向滚动条的大小 */</span><br><span class="line">}</span><br><span class="line">.el-table__body-wrapper::-webkit-scrollbar-thumb {</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);</span><br><span class="line">    background: rgba(0, 0, 0, 0.2);</span><br><span class="line">}</span><br><span class="line">.el-table__body-wrapper::-webkit-scrollbar-track {</span><br><span class="line">    -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);</span><br><span class="line">    border-radius: 0;</span><br><span class="line">    background: rgba(0, 0, 0, 0.1);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>css样式</tag>
      </tags>
  </entry>
  <entry>
    <title>React基础</title>
    <url>/2022/11/23/React%20GO%20GO/React%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><h1 id="React-JSX"><a href="#React-JSX" class="headerlink" title="React JSX"></a>React JSX</h1><p>全称：javascript XML</p>
<p>作用：用来创建react虚拟dom对象</p>
<p>优点：</p>
<ul>
<li>  JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。</li>
<li>  它是类型安全的，在编译过程中就能发现错误。</li>
<li>  使用 JSX 编写模板更加简单快速。</li>
</ul>
<p>基本语法规则：</p>
<ul>
<li>遇到以&lt;开头的代码 以标签语法来解析 html的同名标签就转化成html的标签</li>
<li>遇到以{开头的代码 以js语法来解析 标签中的js语法一定要用{}包裹起来</li>
</ul>
<p>基本使用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"foo"</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>));</span><br></pre></td></tr></tbody></table></figure>

<h2 id="1-使用JSX"><a href="#1-使用JSX" class="headerlink" title="1.使用JSX"></a>1.使用JSX</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">      	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>zy<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-myattribute</span> = <span class="string">"somevalue"</span>&gt;</span>React学习<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      	,</span><br><span class="line">      	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>)</span><br><span class="line">      );</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-1-JSX中使用js语法"><a href="#1-1-JSX中使用js语法" class="headerlink" title="1.1 JSX中使用js语法"></a>1.1 JSX中使用js语法</h3><ul>
<li>JSX 中使用 JavaScript 表达式。表达式需写在花括号&nbsp; <strong>{}</strong> &nbsp;中</li>
<li>在 JSX 中不能使用&nbsp;<strong>if else</strong>&nbsp;语句，但可以使用&nbsp;<strong>conditional (三元运算)</strong> &nbsp;表达式来替代。以下实例中如果变量&nbsp;<strong>i</strong>&nbsp;等于&nbsp;<strong>1</strong>&nbsp;浏览器将输出&nbsp;<strong>true</strong>, 如果修改 i 的值，则会输出&nbsp;<strong>false</strong>.</li>
</ul>
<p>实例：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{1+1}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{i == 1 ? 'True!' : 'False'}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> </span><br><span class="line">     , <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-2-JSX中使用样式"><a href="#1-2-JSX中使用样式" class="headerlink" title="1.2 JSX中使用样式"></a>1.2 JSX中使用样式</h3><p>React 推荐使用内联样式。我们可以使用&nbsp;<strong>camelCase</strong>&nbsp;语法来设置内联样式. React 会在指定元素数字后自动添加&nbsp;<strong>px</strong>&nbsp;。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myStyle = { <span class="attr">fontSize</span>: <span class="number">100</span>, <span class="attr">color</span>: <span class="string">'#FF0000'</span> }; </span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">{myStyle}</span>&gt;</span>zy<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, </span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-3-JSX中使用注释"><a href="#1-3-JSX中使用注释" class="headerlink" title="1.3 JSX中使用注释"></a>1.3 JSX中使用注释</h3><p>注释需要写在花括号中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>zy<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>, </span></span><br><span class="line"><span class="language-xml">        {/*注释 我无敌，你随意*/}</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-3-JSX中使用数组"><a href="#1-3-JSX中使用数组" class="headerlink" title="1.3 JSX中使用数组"></a>1.3 JSX中使用数组</h3><p>JSX 允许在模板中插入数组，数组会自动展开所有成员：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [ </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>666<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>777<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>, </span><br><span class="line">]; </span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>{arr}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'React'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>]; </span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>{arr.map((item,index) =&gt;{</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">{index}</span>&gt;</span>{item}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )}<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>, </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'root'</span>) </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>recat</category>
      </categories>
      <tags>
        <tag>recat</tag>
      </tags>
  </entry>
  <entry>
    <title>步骤条小组件的封装</title>
    <url>/2022/11/15/%E7%BB%84%E4%BB%B6/%E6%AD%A5%E9%AA%A4%E6%9D%A1%E5%B0%8F%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>公司有一个业务流程是需要步骤条的，为该业务新搭建了个h5的项目（v3+vite3.2+vant），h5页面直接嵌套在app端的，导航条是由app端控制的，第一个步骤是由app端完成，后面两步是由我们完成，步骤条等一切样式要求高度的统一，vant等ui库自带的步骤条组件，还需要自己一个个样式穿透的去改样式，得到的可能还不是自己想要的，于是就自己封装了一个，以便自己以后遇到同样的流程或业务，能够直接C+V。不多bbbb，直接上效果图和代码</p>
<h1 id="一、vue3步骤条组件的封装"><a href="#一、vue3步骤条组件的封装" class="headerlink" title="一、vue3步骤条组件的封装"></a>一、vue3步骤条组件的封装</h1><h1 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1.效果图"></a>1.效果图</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4649316f48046c3b4b5aaa40eba598d~tplv-k3u1fbpfcp-watermark.image" alt="1668496872696.png"></p>
<h1 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h1><p>其中$px2rem(‘72px’)是因为使用了移动端适配的插件postcss-pxtorem并做了相应的配置后，发现行内样式移动端适配的插件不生效。于是在main.ts里定义了一个全局行内的方法，让行内样式也能移动端适配</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 行内样式移动端适配请加这个$px2rem() </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">px2rem</span> = (<span class="params">px:any</span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/%/ig</span>.<span class="title function_">test</span>(px)){ <span class="comment">// 有百分号%，特殊处理，表述pc是一个有百分号的数，比如：90%</span></span><br><span class="line">      <span class="keyword">return</span> px</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">parseFloat</span>(px) / <span class="number">37.5</span>) + <span class="string">'rem'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$px2rem</span> = px2rem <span class="comment">// 放到全局</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;!-- <span class="title class_">Steps</span> 步骤条-组件 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"formStep"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in stepData"</span> <span class="attr">v-bind:key</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"stepContent"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:class</span>=<span class="string">"((stepActive &gt; index ?'stepItemSuccess stepItem':'stepItem'))"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stepShow"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- 中间样式 --&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"index == stepActive-1 ? 'currentStepIndex' :'stepIndex'"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{index+1}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- 步骤文字 --&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stepStatus "</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stepName"</span>&gt;</span>{{item.status}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 线 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"stepActive-1 &lt;= index? 'stepActiveLine': 'stepLine'"</span> <span class="attr">:style</span>=<span class="string">"{width:index == stepData.length-1 ? 0+'px' : $px2rem('72px'),border:index == stepData.length-1 ? 'none' : '1px dashed #FFFFFF'}"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bgCard"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"@/assets/images/bgCard.png"</span> <span class="attr">:style</span>=<span class="string">"{width: $px2rem('265px'),height:$px2rem('40px')}"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> interface propsStep {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">stepData</span>: any,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">stepActive</span>: number</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">const</span> props = <span class="title function_">withDefaults</span>(defineProps&lt;propsStep&gt;(), {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="attr">stepData</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="attr">stepActive</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">});</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#FE7E41</span>, <span class="number">#FF5D0F</span>, <span class="number">#FF5C0E</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  // <span class="attribute">background-color</span>: <span class="number">#FF5C0E</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">justify-content</span>: space-between;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding-top</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding-bottom</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.stepContent</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.stepLine</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">top</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-left</span>: <span class="number">80px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.stepActiveLine</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">top</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-left</span>: <span class="number">80px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.stepItem</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">flex-direction</span>:column;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.stepStatus</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.stepName</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">17px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-family</span>: PingFangSC-Medium, PingFang SC;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">line-height</span>: <span class="number">17px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">opacity</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.stepIndex</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-weight</span>: bold;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">color</span>: <span class="number">#FE7E41</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">opacity</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-left</span>: <span class="number">32px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-right</span>: <span class="number">32px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.currentStepIndex</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-weight</span>: bold;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">color</span>: <span class="number">#FE7E41</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border</span>: <span class="number">3px</span>  <span class="number">#e8e8e8</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgb</span>(<span class="number">255</span> <span class="number">255</span> <span class="number">255</span> / <span class="number">50%</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-left</span>: <span class="number">32px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-right</span>: <span class="number">32px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.bgCard</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> <span class="selector-class">.stepItemSuccess</span><span class="selector-class">.stepItem</span> <span class="selector-class">.stepName</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> <span class="selector-class">.stepItemSuccess</span><span class="selector-class">.stepItem</span> <span class="selector-class">.stepIndex</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#FE7E41</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> <span class="selector-class">.stepItemActive</span><span class="selector-class">.stepItem</span> <span class="selector-class">.stepName</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.formStep</span> <span class="selector-class">.stepItemActive</span><span class="selector-class">.stepItem</span> <span class="selector-class">.stepIndex</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#FE7E41</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">opacity</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h1><p>在需要这个用到的组件那块导入</p>
<blockquote>
<p>import stepBar from ‘@/components/stepBar/stepBar.vue’ </p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//步骤条</span></span><br><span class="line">&lt;step-bar :stepData=<span class="string">"stepData"</span> :stepActive=<span class="string">"stepActive"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> stepActive = <span class="title function_">ref</span>(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> stepData = <span class="title function_">ref</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">status</span>: <span class="string">"666"</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">status</span>: <span class="string">"222"</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">status</span>: <span class="string">"555"</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&lt;script/&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Props-参数说明"><a href="#Props-参数说明" class="headerlink" title="Props 参数说明"></a>Props 参数说明</h4><table>
<thead>
<tr>
<th>参数名</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>stepData</td>
<td>Array</td>
<td>[]</td>
<td>步骤内容（如上面的‘666’‘222’什么的）</td>
</tr>
<tr>
<td>stepActive</td>
<td>Number</td>
<td>0</td>
<td>代表进行到了第几步</td>
</tr>
</tbody></table>
</body></html>]]></content>
      <categories>
        <category>组件</category>
      </categories>
      <tags>
        <tag>组件封装</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 异步队列实现</title>
    <url>/2022/11/10/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/JavaScript%20%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    了解JavaScript 异步队列实现，我们需要先了解什么是同步任务，什么是异步任务，异步代码中才区分宏任务微任务，什么是宏任务、微任务？宏任务、微任务有哪些？又是怎么执行的？</p>
<h1 id="一、异步任务和同步任务"><a href="#一、异步任务和同步任务" class="headerlink" title="一、异步任务和同步任务"></a>一、异步任务和同步任务</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b354be478dd4d369799be4d4f0087e2~tplv-k3u1fbpfcp-watermark.image" alt="同步任务与异步任务"></p>
<p>​        js 是一种单线程语言，简单的说就是：只有一条通道，那么在任务多的情况下，就会出现拥挤的情况，这种情况下就产生了 ‘多线程’ ，但是这种“多线程”是通过单线程模仿的，一切javascript多线程都是纸老虎！那么就产生了同步任务和异步任务。</p>
<ul>
<li><p>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</p>
</li>
<li><p>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</p>
</li>
<li><p>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</p>
</li>
<li><p>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p>
<blockquote>
<p>那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let data = [];</span><br><span class="line">$.ajax({</span><br><span class="line">    url:www.javascript.com,</span><br><span class="line">    data:data,</span><br><span class="line">    success:() =&gt; {</span><br><span class="line">        console.log('发送成功!');</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">console.log('代码执行结束');</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>ajax进入Event Table，注册回调函数<code>success</code>。</li>
<li>执行<code>console.log('代码执行结束')</code>。</li>
<li>ajax事件完成，回调函数<code>success</code>进入Event Queue。</li>
<li>主线程从Event Queue读取回调函数<code>success</code>并执行。</li>
</ul>
<h1 id="二、宏任务和微任务是什么呢？"><a href="#二、宏任务和微任务是什么呢？" class="headerlink" title="二、宏任务和微任务是什么呢？"></a>二、宏任务和微任务是什么呢？</h1><table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><strong>宏任务（macrotask）</strong></th>
<th align="center"><strong>微任务（microtask）</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">谁发起的</td>
<td align="center">宿主（Node、浏览器）</td>
<td align="center">JS引擎</td>
</tr>
<tr>
<td align="center">具体事件</td>
<td align="center">1. script (可以理解为外层同步代码)2. setTimeout/setInterval3. UI rendering/UI事件4. postMessage，MessageChannel5. setImmediate，I/O（Node.js）</td>
<td align="center">1. Promise2. MutaionObserver3. Object.observe（已废弃；Proxy 对象替代）4. process.nextTick（Node.js）</td>
</tr>
<tr>
<td align="center">谁先执行</td>
<td align="center">后运行</td>
<td align="center">先运行</td>
</tr>
<tr>
<td align="center">会触发新一轮Tick吗</td>
<td align="center">会</td>
<td align="center">不会</td>
</tr>
</tbody></table>
<h2 id="1-宏任务、微任务是怎么执行的？"><a href="#1-宏任务、微任务是怎么执行的？" class="headerlink" title="1.宏任务、微任务是怎么执行的？"></a>1.宏任务、微任务是怎么执行的？</h2><p>​    执行顺序：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71de5ee24ed84d108e0d1127c03f6474~tplv-k3u1fbpfcp-watermark.image" alt="宏任务、微任务是怎么执行"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">setTimeout(()=&gt;{</span><br><span class="line">  new Promise(resolve =&gt;{</span><br><span class="line">  	resolve();</span><br><span class="line">  }).then(()=&gt;{</span><br><span class="line">  	console.log('test');</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  console.log(4);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">new Promise(resolve =&gt; {</span><br><span class="line">  resolve();</span><br><span class="line">  console.log(1)</span><br><span class="line">}).then( () =&gt; {</span><br><span class="line">  console.log(3);</span><br><span class="line">  Promise.resolve().then(() =&gt; {</span><br><span class="line">    console.log('before timeout');</span><br><span class="line">  }).then(() =&gt; {</span><br><span class="line">    Promise.resolve().then(() =&gt; {</span><br><span class="line">      console.log('also before timeout')</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">})</span><br><span class="line">console.log(2);</span><br></pre></td></tr></tbody></table></figure>

<p>1.遇到setTimeout，异步宏任务，将() =&gt; {console.log(4)}放入宏任务队列中；</p>
<p>2.遇到new Promise，new Promise在实例化的过程中所执行的代码都是同步进行的，所以输出1；</p>
<p>3.而Promise.then中注册的回调才是异步执行的，将其放入微任务队列中<br>4.遇到同步任务console.log(2)，输出2；主线程中同步任务执行完<br>5.从微任务队列中取出任务到主线程中，输出3，此微任务中又有微任务，Promise.resolve().then(微任务a).then(微任务b)，将其依次放入微任务队列中；<br>6.从微任务队列中取出任务a到主线程中，输出 before timeout；<br>7.从微任务队列中取出任务b到主线程中，任务b又注册了一个微任务c，放入微任务队列中；<br>8.从微任务队列中取出任务c到主线程中，输出 also before timeout；微任务队列为空<br>9.从宏任务队列中取出任务到主线程，此任务中注册了一个微任务d，将其放入微任务队列中，接下来遇到输出4，宏任务队列为空<br>10.从微任务队列中取出任务d到主线程 ，输出test，微任务队列为空</p>
<h1 id="三、关系总结"><a href="#三、关系总结" class="headerlink" title="三、关系总结"></a>三、关系总结</h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/945651e8e2404a5093810c7d73272897~tplv-k3u1fbpfcp-watermark.image" alt="总结"></p>
<p>上图也是盗的，自己对这些做个笔记，加深影响，到时候回顾起来也比较方便！</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>​    <a href="https://juejin.cn/post/6844903512845860872">这一次，彻底弄懂 JavaScript 执行机制 - 掘金 (juejin.cn)</a></p>
<p>​    <a href="https://blog.csdn.net/weixin_45888701/article/details/116781078"> 微任务/宏任务和同步/异步之间的关系_</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>微任务</tag>
        <tag>宏任务</tag>
      </tags>
  </entry>
  <entry>
    <title>vite 搭建vue3项目（二）</title>
    <url>/2022/10/25/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/vite%20%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-login页面和功能就不多哔哔了"><a href="#1-login页面和功能就不多哔哔了" class="headerlink" title="1.login页面和功能就不多哔哔了"></a>1.login页面和功能就不多哔哔了</h1><h1 id="2-主体布局"><a href="#2-主体布局" class="headerlink" title="2.主体布局"></a>2.主体布局</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51e77c74aeb743b5a9e159607d1eb0e6~tplv-k3u1fbpfcp-watermark.image" alt="dd7860edba87d1d65d1c03b81f01f4c6.png"><br>layout-&gt;index.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;el-container&gt;</span><br><span class="line">        &lt;el-aside&gt;</span><br><span class="line">            &lt;Menu /&gt;</span><br><span class="line">        &lt;/el-aside&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;el-header&gt;</span><br><span class="line">            &lt;/el-header&gt;</span><br><span class="line">            &lt;el-main&gt;</span><br><span class="line">            //mian开发中</span><br><span class="line">                &lt;!-- &lt;router-view v-slot="{ Component, route }"&gt;</span><br><span class="line">                    &lt;transition appear name="fade-transform" mode="out-in"&gt;</span><br><span class="line">                        &lt;keep-alive :include="cacheRouter"&gt;</span><br><span class="line">                            &lt;component :is="Component" :key="route.path"&gt;&lt;/component&gt;</span><br><span class="line">                        &lt;/keep-alive&gt;</span><br><span class="line">                    &lt;/transition&gt;</span><br><span class="line">                &lt;/router-view&gt; --&gt;</span><br><span class="line">            &lt;/el-main&gt;</span><br><span class="line">            &lt;el-footer&gt;</span><br><span class="line">                &lt;Footer /&gt;</span><br><span class="line">            &lt;/el-footer&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang="ts"&gt;</span><br><span class="line">import Footer from "./footer/index.vue";</span><br><span class="line">import Menu from "./Menu/index.vue";</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line">    @import "./index.scss";</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>

<h1 id="3-vite中的批量自动化导入：import-meta-globEager"><a href="#3-vite中的批量自动化导入：import-meta-globEager" class="headerlink" title="3.vite中的批量自动化导入：import.meta.globEager"></a>3.vite中的批量自动化导入：import.meta.globEager</h1><p>如果想在vite中批量导入某些文件，实现项目的模块化，vite提供的import.meta.globEager函数就很好用</p>
<p>比如用在路由模块化：</p>
<p>1、需求：不想把路由文件全部放在一个文件里面，找的时候要拖动很麻烦，就想着把每一个模块的路由按功能分成单个的文件</p>
<p>2、思路：在routers文件夹内新增一个modules文件夹：里面放不同功能的routers文件，然后在vue引入的路由入口处批量导入模块化的routers</p>
<p>3、实现：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9d6edc09e5e4e8fbb012d6155e3a5d1~tplv-k3u1fbpfcp-watermark.image" alt="87e7997f3c15921b398a37d928ac3a32.png"></p>
<p>在router文件内批量引入modules内模块化的文件并处理：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import { createRouter, createWebHashHistory, RouteRecordRaw } from "vue-router";</span><br><span class="line"></span><br><span class="line">// * 导入所有router</span><br><span class="line">//const metaRouters = import.meta.globEager("./modules/*.ts");</span><br><span class="line">//最新vite应该是弃用了上面的，用下面的</span><br><span class="line">const metaRouters:any = import.meta.glob('./modules/*.ts', { eager: true })</span><br><span class="line">// * 处理路由表</span><br><span class="line">export const routerArray: RouteRecordRaw[] = [];</span><br><span class="line">Object.keys(metaRouters).forEach(item =&gt; {</span><br><span class="line">    Object.keys(metaRouters[item]).forEach((key: any) =&gt; {</span><br><span class="line">    //	routerArray.push(...metaRouters[item][key]);</span><br><span class="line">    routerArray.push(metaRouters[item][key]);</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description 路由配置简介</span><br><span class="line"> * @param path ==&gt; 路由路径</span><br><span class="line"> * @param name ==&gt; 路由名称</span><br><span class="line"> * @param redirect ==&gt; 路由重定向</span><br><span class="line"> * @param component ==&gt; 路由组件</span><br><span class="line"> * @param meta ==&gt; 路由元信息</span><br><span class="line"> * @param meta.requireAuth ==&gt; 是否需要权限验证</span><br><span class="line"> * @param meta.keepAlive ==&gt; 是否需要缓存该路由</span><br><span class="line"> * @param meta.title ==&gt; 路由标题</span><br><span class="line"> * @param meta.key	==&gt; 路由key,用来匹配按钮权限</span><br><span class="line"> * */</span><br><span class="line">const routes: RouteRecordRaw[] = [</span><br><span class="line">  ...routerArray,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const router = createRouter({</span><br><span class="line">    history: createWebHashHistory(),</span><br><span class="line">    routes,</span><br><span class="line">    strict: false,</span><br><span class="line">    // 切换页面，滚动到最顶部</span><br><span class="line">    scrollBehavior: () =&gt; ({ left: 0, top: 0 })</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>注意 再使用时出现import.meta.globEager(“./modules/*.ts”);报错说什么弃用了，</strong></p>
<p><strong>去源码看标注：已弃用，使用这个什么代替</strong></p>
<p><strong>@deprecated Use <code>import.meta.glob('*', { eager: true })</code> instead</strong></p>
<h1 id="4-侧边栏的开发和header里的侧边栏折叠-底部栏就不多bb"><a href="#4-侧边栏的开发和header里的侧边栏折叠-底部栏就不多bb" class="headerlink" title="4.侧边栏的开发和header里的侧边栏折叠(底部栏就不多bb)"></a>4.侧边栏的开发和header里的侧边栏折叠(底部栏就不多bb)</h1><h2 id="侧边栏的开发"><a href="#侧边栏的开发" class="headerlink" title="侧边栏的开发"></a><strong>侧边栏的开发</strong></h2><p>主要是分为两部分，一部分是logo，一部分是路由菜单</p>
<p>logo是图片加文字，文字根据侧边栏折叠是否展示</p>
<p><strong>路由菜单</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-scrollbar&gt;</span><br><span class="line">        &lt;el-menu</span><br><span class="line">            :default-active="activeMenu"</span><br><span class="line">            :router="true"</span><br><span class="line">            :collapse="isCollapse"</span><br><span class="line">            :collapse-transition="false"</span><br><span class="line">            :unique-opened="true"</span><br><span class="line">            background-color="#191a20"</span><br><span class="line">            text-color="#bdbdc0"</span><br><span class="line">            active-text-color="#fff"</span><br><span class="line">        &gt;</span><br><span class="line">          //菜单项</span><br><span class="line">            &lt;SubItem :menuList="menuList" /&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-scrollbar&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>首先需要获取菜单列表，一般是调用接口根据登录的这个用户的权限获取列表接口，暂时用得请求的json模拟后台接口数据，把菜单数据存到pinia中</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">onMounted(async () =&gt; {</span><br><span class="line">    // 获取菜单列表</span><br><span class="line">    loading.value = true;</span><br><span class="line">    try {</span><br><span class="line">        const res = await getMenuList();</span><br><span class="line">        if (!res.data) return;</span><br><span class="line">        // 把路由菜单处理成一维数组（存储到 pinia 中）</span><br><span class="line">        const dynamicRouter = handleRouter(res.data);</span><br><span class="line">        authStore.setAuthRouter(dynamicRouter);</span><br><span class="line">        menuStore.setMenuList(res.data);</span><br><span class="line">    } finally {</span><br><span class="line">        loading.value = false;</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>然后需要有默认激活菜单的index和菜单是否折叠 获取pinia里存着的菜单数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//默认激活菜单的 index，当前路由对象的路径</span><br><span class="line">const activeMenu = computed((): string =&gt; route.path);</span><br><span class="line">//菜单是否折叠</span><br><span class="line">const isCollapse = computed((): boolean =&gt; menuStore.isCollapse);</span><br><span class="line">//菜单数据</span><br><span class="line">const menuList = computed((): Menu.MenuOptions[] =&gt; menuStore.menuList);</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// 监听窗口大小变化，折叠侧边栏</span><br><span class="line">const screenWidth = ref&lt;number&gt;(0);</span><br><span class="line">const listeningWindow = () =&gt; {</span><br><span class="line">    window.onresize = () =&gt; {</span><br><span class="line">        return (() =&gt; {</span><br><span class="line">            screenWidth.value = document.body.clientWidth;</span><br><span class="line">            if (isCollapse.value === false &amp;&amp; screenWidth.value &lt; 1200) menuStore.setCollapse();</span><br><span class="line">            if (isCollapse.value === true &amp;&amp; screenWidth.value &gt; 1200) menuStore.setCollapse();</span><br><span class="line">        })();</span><br><span class="line">    };</span><br><span class="line">};</span><br><span class="line">listeningWindow();</span><br></pre></td></tr></tbody></table></figure>

<p>菜单项就是遍历菜单数据展示路由菜单信息（子组件需要defineProps&lt;{ menuList: Menu.MenuOptions[] }&gt;();）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template v-for="subItem in menuList" :key="subItem.path"&gt;</span><br><span class="line">        &lt;el-sub-menu v-if="subItem.children &amp;&amp; subItem.children.length &gt; 0" :index="subItem.path"&gt;</span><br><span class="line">            &lt;template #title&gt;</span><br><span class="line">                &lt;el-icon&gt;</span><br><span class="line">                    &lt;component :is="subItem.icon"&gt;&lt;/component&gt;</span><br><span class="line">                &lt;/el-icon&gt;</span><br><span class="line">                &lt;span&gt;{{ subItem.title }}&lt;/span&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;SubItem :menuList="subItem.children" /&gt;</span><br><span class="line">        &lt;/el-sub-menu&gt;</span><br><span class="line">        &lt;el-menu-item v-else :index="subItem.path"&gt;</span><br><span class="line">            &lt;el-icon&gt;</span><br><span class="line">                &lt;component :is="subItem.icon"&gt;&lt;/component&gt;</span><br><span class="line">            &lt;/el-icon&gt;</span><br><span class="line">            &lt;template v-if="!subItem.isLink" #title&gt;</span><br><span class="line">                &lt;span&gt;{{ subItem.title }}&lt;/span&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-else #title&gt;</span><br><span class="line">                &lt;a class="menu-href" :href="subItem.isLink" target="_blank"&gt;{{ subItem.title }}&lt;/a&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;script setup lang="ts"&gt;</span><br><span class="line">defineProps&lt;{ menuList: Menu.MenuOptions[] }&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="header里的侧边栏折叠开发"><a href="#header里的侧边栏折叠开发" class="headerlink" title="header里的侧边栏折叠开发"></a>header里的侧边栏折叠开发</h2><p>监控屏幕宽度或点击叠判断是否折叠</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//菜单是否折叠</span><br><span class="line">const isCollapse = computed((): boolean =&gt; menuStore.isCollapse);</span><br><span class="line">//菜单数据</span><br><span class="line">const menuList = computed((): Menu.MenuOptions[] =&gt; menuStore.menuList);</span><br><span class="line">// 监听窗口大小变化，合并 aside</span><br><span class="line">const screenWidth = ref&lt;number&gt;(0);</span><br><span class="line">const listeningWindow = () =&gt; {</span><br><span class="line">    window.onresize = () =&gt; {</span><br><span class="line">        return (() =&gt; {</span><br><span class="line">            screenWidth.value = document.body.clientWidth;</span><br><span class="line">            if (isCollapse.value === false &amp;&amp; screenWidth.value &lt; 1200) menuStore.setCollapse();</span><br><span class="line">            if (isCollapse.value === true &amp;&amp; screenWidth.value &gt; 1200) menuStore.setCollapse();</span><br><span class="line">        })();</span><br><span class="line">    };</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<h1 id="5-vue-router-利用-route-的-matched-属性实现面包屑效果"><a href="#5-vue-router-利用-route-的-matched-属性实现面包屑效果" class="headerlink" title="5.vue-router 利用 $route 的 matched 属性实现面包屑效果"></a>5.vue-router 利用 $route 的 matched 属性实现面包屑效果</h1><p><strong>matched 顾名思义 就是 匹配，假如我们目前的路由是/a/aa-01，那么此时 this.$route.matched匹配到的会是一个数组，包含 ‘/‘，’/a’，’/a/aa-01’，这三个path的路由信息。然后我们可以直接利用路由信息渲染我们的面包屑导航。</strong></p>
<p>布局需要使用到el-breadcrumb ，和transition-group</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-breadcrumb :separator-icon="ArrowRight"&gt;</span><br><span class="line">        &lt;transition-group name="breadcrumb" mode="out-in"&gt;</span><br><span class="line">            &lt;el-breadcrumb-item :to="{ path: HOME_URL }" key="/home"&gt;首页&lt;/el-breadcrumb-item&gt;</span><br><span class="line">            &lt;el-breadcrumb-item v-for="item in matched" :key="item.path" :to="{ path: item.path }"&gt;</span><br><span class="line">                {{ item.meta.title }}</span><br><span class="line">            &lt;/el-breadcrumb-item&gt;</span><br><span class="line">        &lt;/transition-group&gt;</span><br><span class="line">    &lt;/el-breadcrumb&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang="ts"&gt;</span><br><span class="line">import { computed } from "vue";</span><br><span class="line">import { useRoute } from "vue-router";</span><br><span class="line">import { ArrowRight } from "@element-plus/icons-vue";</span><br><span class="line">import { HOME_URL } from "@/config/config";</span><br><span class="line">const route = useRoute();</span><br><span class="line"></span><br><span class="line">const matched = computed(() =&gt; route.matched.filter(item =&gt;item.meta &amp;&amp; item.meta.title &amp;&amp; item.meta.title !== "首页"));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>TransitionGroup# 是一个内置组件，用于对 v-for 列表中的元素或组件的插入、移除和顺序改变添加动画效果。这样每次选择侧边栏的路由时，面包屑导航这边就感觉比较平滑的展示</p>
<h1 id="6-后台管理系统顶部使用el-tag或el-tab实现浏览路由历史实现-（标签栏管理）"><a href="#6-后台管理系统顶部使用el-tag或el-tab实现浏览路由历史实现-（标签栏管理）" class="headerlink" title="6.后台管理系统顶部使用el-tag或el-tab实现浏览路由历史实现 （标签栏管理）"></a>6.后台管理系统顶部使用el-tag或el-tab实现浏览路由历史实现 （标签栏管理）</h1><p>1.默认有首页，不能关闭</p>
<p>主要就是在tabs.ts的state的tabsMenuList写死,剩下的路由历史就是往这里面tabsMenuList添加数据，剩下的就在actions里面处理了，完成增加，移除，选择，路由历史的操作具体在下面</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">state: (): TabsState =&gt; ({</span><br><span class="line">    tabsMenuValue: HOME_URL,</span><br><span class="line">    tabsMenuList: [{ title: "首页", path: HOME_URL, icon: "home-filled", close: false }]</span><br><span class="line">}),</span><br></pre></td></tr></tbody></table></figure>

<p>2.点击侧边栏上路由菜单，判断有无存在，没有就添加同时定位到上面(也就是设置tabsMenuValue)，有就定位到上面</p>
<p>在actions里写</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// Add Tabs</span><br><span class="line">        async addTabs(tabItem: TabsOptions) {</span><br><span class="line">            // not add tabs black list</span><br><span class="line">            if (TABS_BLACK_LIST.includes(tabItem.path)) return;</span><br><span class="line">            const tabInfo: TabsOptions = {</span><br><span class="line">                title: tabItem.title,</span><br><span class="line">                path: tabItem.path,</span><br><span class="line">                close: tabItem.close</span><br><span class="line">            };</span><br><span class="line">            if (this.tabsMenuList.every(item =&gt; item.path !== tabItem.path)) {</span><br><span class="line">                this.tabsMenuList.push(tabInfo);</span><br><span class="line">            }</span><br><span class="line">            this.setTabsMenuValue(tabItem.path);</span><br><span class="line">        },</span><br></pre></td></tr></tbody></table></figure>

<p>3.关闭当前页，自动跳到上一个tag页面</p>
<p>在actions里写</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// Remove Tabs</span><br><span class="line">    async removeTabs(tabPath: string) {</span><br><span class="line">        let tabsMenuValue = this.tabsMenuValue;</span><br><span class="line">        const tabsMenuList = this.tabsMenuList;</span><br><span class="line">        if (tabsMenuValue === tabPath) {</span><br><span class="line">            tabsMenuList.forEach((item, index) =&gt; {</span><br><span class="line">                if (item.path !== tabPath) return;</span><br><span class="line">                const nextTab = tabsMenuList[index + 1] || tabsMenuList[index - 1];</span><br><span class="line">                if (!nextTab) return;</span><br><span class="line">                tabsMenuValue = nextTab.path;</span><br><span class="line">                router.push(nextTab.path);</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">        this.tabsMenuValue = tabsMenuValue;</span><br><span class="line">        this.tabsMenuList = tabsMenuList.filter(item =&gt; item.path !== tabPath);</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure>

<p>4.选中标签 跳转到标签对应的路由</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// Change Tabs</span><br><span class="line">    async changeTabs(tabItem: TabPaneProps) {</span><br><span class="line">        this.tabsMenuList.forEach(item =&gt; {</span><br><span class="line">            if (item.title === tabItem.label) router.push(item.path);</span><br><span class="line">        });</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div class="tabs-box"&gt;</span><br><span class="line">    &lt;div class="tabs-menu"&gt;</span><br><span class="line">        &lt;el-tabs v-model="tabsMenuValue" type="card" @tab-click="tabClick" @tab-remove="removeTab"&gt;</span><br><span class="line">            &lt;el-tab-pane</span><br><span class="line">                v-for="item in tabsMenuList"</span><br><span class="line">                :key="item.path"</span><br><span class="line">                :path="item.path"</span><br><span class="line">                :label="item.title"</span><br><span class="line">                :name="item.path"</span><br><span class="line">                :closable="item.close"</span><br><span class="line">            &gt;</span><br><span class="line">                &lt;template #label&gt;</span><br><span class="line">                    &lt;el-icon class="tabs-icon" v-if="item.icon"&gt;</span><br><span class="line">                        &lt;component :is="item.icon"&gt;&lt;/component&gt;</span><br><span class="line">                    &lt;/el-icon&gt;</span><br><span class="line">                    {{ item.title }}</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/el-tab-pane&gt;</span><br><span class="line">        &lt;/el-tabs&gt;</span><br><span class="line">        //&lt;MoreButton /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>页面上具体使用的el-tabs实现</p>
<p>总结：</p>
<p>在store-&gt;modules-&gt;tabs.ts</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import { defineStore } from "pinia";</span><br><span class="line">import { TabPaneProps } from "element-plus";</span><br><span class="line">import { TabsState } from "../interface";</span><br><span class="line">import { HOME_URL, TABS_BLACK_LIST } from "@/config/config";</span><br><span class="line">import piniaPersistConfig from "@/config/piniaPersist";</span><br><span class="line">import router from "@/router/index";</span><br><span class="line"></span><br><span class="line">// TabsStore</span><br><span class="line">export const TabsStore = defineStore({</span><br><span class="line">    id: "TabsState",</span><br><span class="line">    state: (): TabsState =&gt; ({</span><br><span class="line">        tabsMenuValue: HOME_URL,</span><br><span class="line">        tabsMenuList: [{ title: "首页", path: HOME_URL, icon: "home-filled", close: false }]</span><br><span class="line">    }),</span><br><span class="line">    getters: {},</span><br><span class="line">    actions: {</span><br><span class="line">        // Add Tabs</span><br><span class="line">        async addTabs(tabItem: TabsOptions) {</span><br><span class="line">            // not add tabs black list</span><br><span class="line">            if (TABS_BLACK_LIST.includes(tabItem.path)) return;</span><br><span class="line">            const tabInfo: TabsOptions = {</span><br><span class="line">                title: tabItem.title,</span><br><span class="line">                path: tabItem.path,</span><br><span class="line">                close: tabItem.close</span><br><span class="line">            };</span><br><span class="line">            if (this.tabsMenuList.every(item =&gt; item.path !== tabItem.path)) {</span><br><span class="line">                this.tabsMenuList.push(tabInfo);</span><br><span class="line">            }</span><br><span class="line">            this.setTabsMenuValue(tabItem.path);</span><br><span class="line">        },</span><br><span class="line">        // Remove Tabs</span><br><span class="line">        async removeTabs(tabPath: string) {</span><br><span class="line">            let tabsMenuValue = this.tabsMenuValue;</span><br><span class="line">            const tabsMenuList = this.tabsMenuList;</span><br><span class="line">            if (tabsMenuValue === tabPath) {</span><br><span class="line">                tabsMenuList.forEach((item, index) =&gt; {</span><br><span class="line">                    if (item.path !== tabPath) return;</span><br><span class="line">                    const nextTab = tabsMenuList[index + 1] || tabsMenuList[index - 1];</span><br><span class="line">                    if (!nextTab) return;</span><br><span class="line">                    tabsMenuValue = nextTab.path;</span><br><span class="line">                    router.push(nextTab.path);</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">            this.tabsMenuValue = tabsMenuValue;</span><br><span class="line">            this.tabsMenuList = tabsMenuList.filter(item =&gt; item.path !== tabPath);</span><br><span class="line">        },</span><br><span class="line">        // Change Tabs</span><br><span class="line">        async changeTabs(tabItem: TabPaneProps) {</span><br><span class="line">            this.tabsMenuList.forEach(item =&gt; {</span><br><span class="line">                if (item.title === tabItem.label) router.push(item.path);</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line">        // Set TabsMenuValue</span><br><span class="line">        async setTabsMenuValue(tabsMenuValue: string) {</span><br><span class="line">            this.tabsMenuValue = tabsMenuValue;</span><br><span class="line">        },</span><br><span class="line">        // Set TabsMenuList</span><br><span class="line">        async setTabsMenuList(tabsMenuList: TabsOptions[]) {</span><br><span class="line">            this.tabsMenuList = tabsMenuList;</span><br><span class="line">        },</span><br><span class="line">        // Close MultipleTab</span><br><span class="line">        async closeMultipleTab(tabsMenuValue?: string) {</span><br><span class="line">            this.tabsMenuList = this.tabsMenuList.filter(item =&gt; {</span><br><span class="line">                return item.path === tabsMenuValue || item.path === HOME_URL;</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line">        // Go Home</span><br><span class="line">        async goHome() {</span><br><span class="line">            router.push(HOME_URL);</span><br><span class="line">            this.tabsMenuValue = HOME_URL;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    persist: piniaPersistConfig("TabsState")</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<h1 id="最终效果图："><a href="#最终效果图：" class="headerlink" title="最终效果图："></a>最终效果图：</h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db741d21a0a24e188a55a28b00466f4d~tplv-k3u1fbpfcp-watermark.image" alt="46972a97567f3ff7c445d12b442ef7b1.png"></p>
<h1 id="gitHub地址："><a href="#gitHub地址：" class="headerlink" title="gitHub地址："></a>gitHub地址：</h1><p><a href="https://github.com/DarknessZY/zhangyao-management/tree/master">vue3学习完成的后管模板</a></p>
</body></html>]]></content>
      <categories>
        <category>项目搭建</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vue3</tag>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>日期小组件的封装</title>
    <url>/2022/10/12/%E7%BB%84%E4%BB%B6/%E6%97%A5%E6%9C%9F%E5%B0%8F%E7%BB%84%E4%BB%B6(vue2)/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、日期小组件"><a href="#一、日期小组件" class="headerlink" title="一、日期小组件"></a>一、日期小组件</h1><p>公司有一个微信小程序项目用的是uni-app+uview2,uview2上的那个日期组件并不是产品想要样子，那就只好自己动手查阅资料了，看看别人的日历组件怎么搞的，再根据这些，写写样式，改改逻辑，完成产品需要的喽。不和你多bb，直接上效果图和代码，主要也是自己做个笔记，指不定哪天又用上，到时候c+v就行了，哈哈！</p>
<h2 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1.效果图"></a>1.效果图</h2><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c64a3ea7f6cf4209a321d38af9e11d09~tplv-k3u1fbpfcp-watermark.image?" alt="d8a086257743cc6dee6907df3bcfc63.png"></p>

<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><p>我一般是这样建文件：components=&gt;term-picker=&gt;term-picker.vue</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view :class="{'pickerMask':visable}" @click="maskClick" @touchmove.stop.prevent="returnHandle"&gt;</span><br><span class="line">		&lt;view class="picker-box" :class="{'picker-show':visable}"&gt;</span><br><span class="line">      &lt;view class="selectDate"&gt;</span><br><span class="line">        &lt;view class="selectDateTxt"&gt;</span><br><span class="line">          &lt;text&gt;选择日期&lt;/text&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">      &lt;view class="lineshow"&gt;</span><br><span class="line">        &lt;view class="line"&gt;&lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">			&lt;view class="operate-box" @touchmove.stop.prevent="returnHandle" @tap.stop="returnHandle"&gt;</span><br><span class="line"></span><br><span class="line">				&lt;view class="time-box"&gt;</span><br><span class="line">					&lt;view @click="touchSelect(0)" class="time-item" :style="{color:touchIndex?'#000000':themeColor}"&gt;</span><br><span class="line">						&lt;text&gt;{{startText}}&lt;/text&gt;</span><br><span class="line">						&lt;text&gt;{{resultDate[0]}}&lt;/text&gt;</span><br><span class="line">					&lt;/view&gt;</span><br><span class="line">					&lt;text&gt;至&lt;/text&gt;</span><br><span class="line">					&lt;view @click="touchSelect(1)" class="time-item" :style="{color:touchIndex?themeColor:'#000000'}"&gt;</span><br><span class="line">						&lt;text&gt;{{endText}}&lt;/text&gt;</span><br><span class="line">						&lt;text&gt;{{resultDate[1]}}&lt;/text&gt;</span><br><span class="line">					&lt;/view&gt;</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">			&lt;/view&gt;</span><br><span class="line">      &lt;view class="lineshow"&gt;</span><br><span class="line">        &lt;view class="line"&gt;&lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">			&lt;picker-view :value="pickerValue" @change="pickerChange" class="picker-view" :indicator-style="indicatorStyle" @tap.stop="returnHandle"&gt;</span><br><span class="line">        &lt;picker-view-column style="flex: 0 0 30.5%"&gt;</span><br><span class="line">				    &lt;view class="picker-item" v-for="(item, index) in years" :key="index"&gt;{{item}}年&lt;/view&gt;</span><br><span class="line">				&lt;/picker-view-column&gt;</span><br><span class="line">				&lt;picker-view-column style="flex: 0 0 30.5%"&gt;</span><br><span class="line">				    &lt;view class="picker-item" v-for="(item, index) in months" :key="index"&gt;{{ item }}月&lt;/view&gt;</span><br><span class="line">				&lt;/picker-view-column&gt;</span><br><span class="line">				&lt;picker-view-column v-if="days.length &gt; 0" style="flex: 0 0 30.5%"&gt;</span><br><span class="line">				    &lt;view class="picker-item" v-for="(item, index) in days" :key="index"&gt;{{ item }}日&lt;/view&gt;</span><br><span class="line">				&lt;/picker-view-column &gt;</span><br><span class="line">			&lt;/picker-view&gt;</span><br><span class="line">      &lt;view class="button"&gt;</span><br><span class="line">        &lt;view  class="buttonClose" @click="pickerClose"&gt;</span><br><span class="line">          &lt;view class="buttonClosetxt"&gt;</span><br><span class="line">            取消</span><br><span class="line">          &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;view  class="buttonConfirm" @click="pickerConfirm"&gt;</span><br><span class="line">          &lt;view class="buttonConfirmtxt"&gt;</span><br><span class="line">            确认</span><br><span class="line">          &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'termPicker',</span><br><span class="line">  props: {</span><br><span class="line">    visable: {</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    },</span><br><span class="line">    defaultDate: {</span><br><span class="line">      type: Array,</span><br><span class="line">      default: () =&gt; []</span><br><span class="line">    },</span><br><span class="line">    minYear: {</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 2020,</span><br><span class="line">    },</span><br><span class="line">    timeLimit: {</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    },</span><br><span class="line">    deferYear: {</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 0,</span><br><span class="line">    },</span><br><span class="line">    themeColor: {</span><br><span class="line">      type: String,</span><br><span class="line">      default: '#10BE9D'</span><br><span class="line">    },</span><br><span class="line">    startText: {</span><br><span class="line">      type: String,</span><br><span class="line">      default: '开始时间'</span><br><span class="line">    },</span><br><span class="line">    endText: {</span><br><span class="line">      type: String,</span><br><span class="line">      default: '结束时间'</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    const date = new Date()</span><br><span class="line">    const years = []</span><br><span class="line">    const year = date.getFullYear()</span><br><span class="line">    const months = []</span><br><span class="line">    const month = date.getMonth() + 1</span><br><span class="line">    const day = date.getDate()</span><br><span class="line">    const maxYear = this.timeLimit ? year : year + this.deferYear</span><br><span class="line">    for (let i = this.minYear;i &lt;= maxYear;i++) {</span><br><span class="line">      years.push(i)</span><br><span class="line">    }</span><br><span class="line">    for (let i = 1;i &lt;= 12;i++) {</span><br><span class="line">      months.push(i)</span><br><span class="line">    }</span><br><span class="line">    return {</span><br><span class="line">      indicatorStyle: 'height: 100rpx;',</span><br><span class="line">      touchIndex: 0,</span><br><span class="line">      year,</span><br><span class="line">      month,</span><br><span class="line">      day,</span><br><span class="line">      years,</span><br><span class="line">      months,</span><br><span class="line">      days: [],</span><br><span class="line">      pickerValue: [],</span><br><span class="line">      resultDate: []</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.setDate()</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    returnHandle() {},</span><br><span class="line">    setDate() {</span><br><span class="line">      if (this.defaultDate.length) {</span><br><span class="line">        if (this.defaultDate.length &gt; 0) {</span><br><span class="line">          const date = this.defaultDate[0]</span><br><span class="line">          this.resultDate = this.defaultDate</span><br><span class="line">          this.setPicker(date)</span><br><span class="line">        } else {</span><br><span class="line">          const month = this.month &lt; 10 ? '0' + this.month : this.month</span><br><span class="line">          const day = this.day &lt; 10 ? '0' + this.day : this.day</span><br><span class="line">          const nowTime = this.year + '-' + month + '-' + day</span><br><span class="line">          this.resultDate = [nowTime, nowTime]</span><br><span class="line">          this.setPicker(nowTime)</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    setPicker(date) {</span><br><span class="line">      if (date) {</span><br><span class="line">        const splitVal = date.split('-')</span><br><span class="line">        const year = this.years.indexOf(Number(splitVal[0]))</span><br><span class="line">        const month = Number(splitVal[1]) - 1</span><br><span class="line">        const day = Number(splitVal[2]) - 1</span><br><span class="line">        this.pickerChange({</span><br><span class="line">          detail: {</span><br><span class="line">            value: [year, month, day]</span><br><span class="line">          }</span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    touchSelect(val) {</span><br><span class="line">      const date = this.resultDate[val]</span><br><span class="line">      this.touchIndex = val</span><br><span class="line">      this.setPicker(date)</span><br><span class="line">    },</span><br><span class="line">    getDateTime(date) {</span><br><span class="line">      const year = this.years[date[0]]</span><br><span class="line">      let month = this.months[date[1]]</span><br><span class="line">      let day = this.days[date[2]]</span><br><span class="line">      if (month &lt; 10) {</span><br><span class="line">        month = '0' + month</span><br><span class="line">      }</span><br><span class="line">      if (day &lt; 10) {</span><br><span class="line">        day = '0' + day</span><br><span class="line">      }</span><br><span class="line">      this.resultDate[this.touchIndex] = year + '-' + month + '-' + day</span><br><span class="line">    },</span><br><span class="line">    pickerChange(e) {</span><br><span class="line">      const currents = e.detail.value</span><br><span class="line">      if (currents[1] + 1 === 2) {</span><br><span class="line">        this.days = []</span><br><span class="line">        if (</span><br><span class="line">          ((currents[0] + this.minYear) % 4 === 0 &amp;&amp;</span><br><span class="line">            (currents[0] + this.minYear) % 100 !== 0) ||</span><br><span class="line">          (currents[0] + this.minYear) % 400 === 0</span><br><span class="line">        ) {</span><br><span class="line">          for (let i = 1;i &lt; 30;i++) {</span><br><span class="line">            this.days.push(i)</span><br><span class="line">          }</span><br><span class="line">        } else {</span><br><span class="line">          for (let i = 1;i &lt; 29;i++) {</span><br><span class="line">            this.days.push(i)</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      } else if ([4, 6, 9, 11].some((item) =&gt; currents[1] + 1 === item)) {</span><br><span class="line">        this.days = []</span><br><span class="line">        for (let i = 1;i &lt; 31;i++) {</span><br><span class="line">          this.days.push(i)</span><br><span class="line">        }</span><br><span class="line">      } else if (</span><br><span class="line">        [1, 3, 5, 7, 8, 10, 12].some((item) =&gt; currents[1] + 1 === item)</span><br><span class="line">      ) {</span><br><span class="line">        this.days = []</span><br><span class="line">        for (let i = 1;i &lt; 32;i++) {</span><br><span class="line">          this.days.push(i)</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      this.pickerValue = currents</span><br><span class="line">      this.getDateTime(currents)</span><br><span class="line">    },</span><br><span class="line">    maskClick() {</span><br><span class="line">      this.$emit('update:visable', false)</span><br><span class="line">    },</span><br><span class="line">    pickerClose() {</span><br><span class="line">      console.log('我是取消')</span><br><span class="line">      this.maskClick()</span><br><span class="line">    },</span><br><span class="line">    pickerConfirm() {</span><br><span class="line">      const { resultDate, timeLimit } = this</span><br><span class="line">      const startTime = new Date(resultDate[0]).getTime()</span><br><span class="line">      const endTime = new Date(resultDate[1]).getTime()</span><br><span class="line">      const nowTime = timeLimit ? new Date().getTime() : endTime</span><br><span class="line">      if (startTime &lt;= endTime) {</span><br><span class="line">        if (endTime &lt;= nowTime) {</span><br><span class="line">          this.$emit('confirm', resultDate)</span><br><span class="line">          this.maskClick()</span><br><span class="line">        } else {</span><br><span class="line">          uni.showToast({</span><br><span class="line">            title: '时间不能超过今天',</span><br><span class="line">            icon: 'none'</span><br><span class="line">          })</span><br><span class="line">        }</span><br><span class="line">      } else {</span><br><span class="line">        uni.showToast({</span><br><span class="line">          title: '时间范围不正确！',</span><br><span class="line">          icon: 'none'</span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line">.pickerMask {</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 998;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  background: rgba(0, 0, 0, 0.6);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.picker-box {</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  transition: all 0.3s ease;</span><br><span class="line">  transform: translateY(100%);</span><br><span class="line">  z-index: 998;</span><br><span class="line"></span><br><span class="line">  .selectDate {</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 60rpx;</span><br><span class="line">    padding: 30rpx 30rpx;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line"></span><br><span class="line">    .selectDateTxt {</span><br><span class="line">      width: 112rpx;</span><br><span class="line">      height: 40rpx;</span><br><span class="line">      font-size: 28rpx;</span><br><span class="line">      font-family: 'PingFangSC-Medium', 'PingFang SC';</span><br><span class="line">      font-weight: 500;</span><br><span class="line">      color: #212034;</span><br><span class="line">      line-height: 40rpx;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  .lineshow {</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    background-color: #fff;</span><br><span class="line"></span><br><span class="line">    .line {</span><br><span class="line">      width: 690rpx;</span><br><span class="line">      border: 1rpx solid #f1eff3;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  .operate-box {</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    padding: 18rpx 30rpx;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 30rpx;</span><br><span class="line"></span><br><span class="line">    .time-box {</span><br><span class="line">      width: 100%;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      justify-content: space-around;</span><br><span class="line"></span><br><span class="line">      .time-item {</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  .button {</span><br><span class="line">    width: 100%;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    height: 157rpx;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line"></span><br><span class="line">    .buttonClose {</span><br><span class="line">      width: 330rpx;</span><br><span class="line">      height: 80rpx;</span><br><span class="line">      border-radius: 40rpx;</span><br><span class="line">      border: 1rpx solid #5368ef;</span><br><span class="line">      transform: rotateZ(360deg);</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      justify-content: center;</span><br><span class="line"></span><br><span class="line">      .buttonClosetxt {</span><br><span class="line">        width: 60rpx;</span><br><span class="line">        height: 42rpx;</span><br><span class="line">        font-size: 30rpx;</span><br><span class="line">        font-family: 'PingFangSC-Medium', 'PingFang SC';</span><br><span class="line">        font-weight: 400;</span><br><span class="line">        color: #5368ef;</span><br><span class="line">        line-height: 42rpx;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    .buttonConfirm {</span><br><span class="line">      width: 330rpx;</span><br><span class="line">      height: 80rpx;</span><br><span class="line">      background: linear-gradient(159deg, #7486fc 0%, #5368ef 100%);</span><br><span class="line">      border-radius: 35px;</span><br><span class="line">      margin-left: 30rpx;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      justify-content: center;</span><br><span class="line"></span><br><span class="line">      .buttonConfirmtxt {</span><br><span class="line">        width: 60rpx;</span><br><span class="line">        height: 42rpx;</span><br><span class="line">        font-size: 30rpx;</span><br><span class="line">        font-family: 'PingFangSC-Medium', 'PingFang SC';</span><br><span class="line">        font-weight: 400;</span><br><span class="line">        color: #fff;</span><br><span class="line">        line-height: 42rpx;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.picker-show {</span><br><span class="line">  transform: translateY(0);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.picker-view {</span><br><span class="line">  width: 750rpx;</span><br><span class="line">  height: 450rpx;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  padding-left: 5.5%;</span><br><span class="line"></span><br><span class="line">  .picker-item {</span><br><span class="line">    height: 42rpx;</span><br><span class="line">    font-family: 'PingFangSC-Medium', 'PingFang SC';</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    font-size: 30rpx;</span><br><span class="line">    color: #20253b ;</span><br><span class="line">    line-height: 42rpx;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    text-align: center;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><p>在需要这个用到的组件那块导入</p>
<blockquote>
<p>import termPicker from ‘@/components/term-picker/term-picker.vue’</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- 日期选择 --&gt;</span><br><span class="line">  &lt;term-picker</span><br><span class="line">	visable.sync="showDateSelect"</span><br><span class="line">	:defaultDate="defaultDate"</span><br><span class="line">	:minYear="1990"</span><br><span class="line">    :timeLimit="true"</span><br><span class="line">    :deferYear="0"</span><br><span class="line">    themeColor="#5368ef"</span><br><span class="line">    @confirm="confirm"&gt;</span><br><span class="line">  &lt;/term-picker&gt;</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure>

<h4 id="Props-参数说明"><a href="#Props-参数说明" class="headerlink" title="Props 参数说明"></a>Props 参数说明</h4><table>
<thead>
<tr>
<th align="center">参数名</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">visable</td>
<td align="center">Boolean</td>
<td align="center">false</td>
<td align="center">日期选择控件的显示/隐藏，注意使用<code>.sync</code>修饰符(true: 显示; false: 隐藏)</td>
</tr>
<tr>
<td align="center">defaultDate</td>
<td align="center">Array</td>
<td align="center">[]</td>
<td align="center">默认预设值(比如:<code>['2021-06-01', '2021-07-01']</code>)</td>
</tr>
<tr>
<td align="center">minYear</td>
<td align="center">Number</td>
<td align="center">1990</td>
<td align="center">最小年份</td>
</tr>
<tr>
<td align="center">timeLimit</td>
<td align="center">Boolean</td>
<td align="center">false</td>
<td align="center">日期区间限制(true: 限制结束日期<code>&lt;=</code>当前日期; false: 不限制)</td>
</tr>
<tr>
<td align="center">deferYear</td>
<td align="center">Number</td>
<td align="center">0</td>
<td align="center">年份选项顺延数，仅当<code>timeLimit</code>为<code>false</code>时生效(举个栗子: <code>deferYear = 1</code>, 则年份选项的最大值为: <code>当前年份 + deferYear</code>)</td>
</tr>
<tr>
<td align="center">themeColor</td>
<td align="center">String</td>
<td align="center">#10BE9D</td>
<td align="center">选择框操作栏部分字体颜色</td>
</tr>
<tr>
<td align="center">startText</td>
<td align="center">String</td>
<td align="center">开始时间</td>
<td align="center">日期范围起始处文本</td>
</tr>
<tr>
<td align="center">endText</td>
<td align="center">String</td>
<td align="center">结束时间</td>
<td align="center">日期范围结束处文本</td>
</tr>
</tbody></table>
<h4 id="Events-事件说明"><a href="#Events-事件说明" class="headerlink" title="Events 事件说明"></a>Events 事件说明</h4><table>
<thead>
<tr>
<th align="center">事件名</th>
<th align="center">说明</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@confirm</td>
<td align="center">点击确定按钮，返回当前选择的值</td>
<td align="center"><code>Array</code>数组类型</td>
</tr>
</tbody></table>
</body></html>]]></content>
      <categories>
        <category>组件</category>
      </categories>
      <tags>
        <tag>组件封装</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(五)——使用valine评论系统</title>
    <url>/2022/10/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%BA%94)%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、hexo框架的主题使用valine"><a href="#一、hexo框架的主题使用valine" class="headerlink" title="一、hexo框架的主题使用valine"></a>一、hexo框架的主题使用valine</h1><h2 id="1-注册-Leancloud-账号"><a href="#1-注册-Leancloud-账号" class="headerlink" title="1. 注册 Leancloud 账号"></a><strong>1. 注册 Leancloud 账号</strong></h2><p>在leancloud官网注册一个账号，海外同学推荐使用leancloud国际版，国内同学可以使用华东或华北节点。</p>
<h1 id="2-创建应用获取appid和appkey"><a href="#2-创建应用获取appid和appkey" class="headerlink" title="2.创建应用获取appid和appkey"></a>2.创建应用获取appid和appkey</h1><p>注册完成后进入控制台-&gt;创建应用-&gt;创建开发版应用。创建完开发版应用如下：点击最右边小齿轮也就是设置，找到<code>应用凭证</code>，获取appid和appkey</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88cbb84d544c466fa8b242d80c6e0670~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>
<h2 id="3-配置valine"><a href="#3-配置valine" class="headerlink" title="3.配置valine"></a>3.配置valine</h2><p>最后去自己主题下的_config.yml文件下(注意不是根目录下的，是你克隆的主题的_config.yml)，配置一下valine，目前hexo官网给的许多主题都是可以用valine的，直接配置就行</p>
<p>以ayer主题为例，具体配置含义如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 启用Valine必须先创建leancloud应用， 获取 id|key 填入即可</span><br><span class="line">leancloud:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id:# 将应用key的App ID设置在这里</span><br><span class="line">  appkey: # 将应用key的App Key设置在这里</span><br><span class="line">valine:</span><br><span class="line">  enable: true #是否启用valine</span><br><span class="line">  notify: false# 邮箱通知 , https://github.com/xCss/Valine/wiki，默认为false</span><br><span class="line">  verify: false# 验证码 默认为false</span><br><span class="line">  placeholder: Just go go ^_^ # 初始化评论显示，根据自己修改，这里默认，</span><br><span class="line">  avatar: monsterid # 头像风格，默认为mm，可进入网址：https://valine.js.org/visitor.html查看头像设置，这里有许多头像风格，进行设置</span><br><span class="line">  guest_info: nick,mail,link # 自定义评论标题</span><br><span class="line">  pageSize: 10 # 分页大小，10页就自动分页</span><br><span class="line">  visitor: true # 是否允许游客评论 ，进入官网查看设置：https://valine.js.org/visitor.html</span><br></pre></td></tr></tbody></table></figure>

<h1 id="二、valine评论数据管理"><a href="#二、valine评论数据管理" class="headerlink" title="二、valine评论数据管理"></a>二、valine评论数据管理</h1><p>去LeanCloud的控制台找到数据存储=&gt;结构化数据=&gt;Comment,在这里你可以对评论的数据进行管理</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f28620488c6540d6b80756e2ac125719~tplv-k3u1fbpfcp-watermark.image" alt="1673512632892.png"></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>valine</tag>
      </tags>
  </entry>
  <entry>
    <title>vite 搭建vue3项目（一）</title>
    <url>/2022/10/08/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/vite%20%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h1><h2 id="1-直接创建项目"><a href="#1-直接创建项目" class="headerlink" title="1.直接创建项目"></a>1.直接创建项目</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">使用 NPM:</span><br><span class="line">$ npm create vite@latest</span><br><span class="line">使用 Yarn:</span><br><span class="line">$ yarn create vite</span><br><span class="line">使用 PNPM:</span><br><span class="line">$ pnpm create vite</span><br><span class="line">然后按照提示操作即可！(选择vue，vue-ts)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-使用模板创建项目"><a href="#2-使用模板创建项目" class="headerlink" title="2.使用模板创建项目"></a>2.使用模板创建项目</h2><p>通过附加的命令行选项直接指定项目名称和你想要使用的模板例如，要构建一个 Vite + Vue 项目，运行:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">使用 npm 6.x：</span><br><span class="line">npm create vite@latest my-vue-app --template vue</span><br><span class="line">使用 npm 7+, extra double-dash is needed:</span><br><span class="line">npm create vite@latest my-vue-app -- --template vue</span><br><span class="line">使用 yarn：</span><br><span class="line">yarn create vite my-vue-app --template vue</span><br><span class="line">使用 pnpm：</span><br><span class="line">pnpm create vite my-vue-app --template vue</span><br></pre></td></tr></tbody></table></figure>

<p>然后npm i 或者 yarn install    运行yarn dev 看看浏览器运行成了没，第一步就大功告成了</p>
<h1 id="二、vite配置别名和环境变量的配置"><a href="#二、vite配置别名和环境变量的配置" class="headerlink" title="二、vite配置别名和环境变量的配置"></a>二、vite配置别名和环境变量的配置</h1><h2 id="1-配置别名"><a href="#1-配置别名" class="headerlink" title="1.配置别名"></a>1.配置别名</h2><p>使用编辑器VScode打开刚刚搭建好的项目 进入配置文件 vite.config.ts</p>
<p>配置别名后的vite.config.ts：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineConfig } <span class="keyword">from</span> <span class="string">'vite'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'@vitejs/plugin-vue'</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">dir: string</span>) =&gt; path.<span class="title function_">join</span>(__dirname, dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">	<span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">	<span class="attr">resolve</span>: {</span><br><span class="line">		<span class="attr">alias</span>: {</span><br><span class="line">			<span class="string">'@'</span>: <span class="title function_">resolve</span>(<span class="string">'src'</span>),</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>此时 TS 可能有这个错误提示：找不到模块“path”或其相应的类型声明</p>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install @types/node --save-dev或者yarn add @types/node --save-dev</span><br></pre></td></tr></tbody></table></figure>

<p>还需要在tsconfig.json的paths配置</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"baseUrl"</span><span class="punctuation">:</span> <span class="string">"."</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">"paths"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">     <span class="attr">"@/*"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">"src/*"</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">"comps/*"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">"src/components/*"</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">"views/*"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">"src/views/*"</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">"store/*"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">"src/store/*"</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-环境变量的配置"><a href="#2-环境变量的配置" class="headerlink" title="2.环境变量的配置"></a>2.环境变量的配置</h2><p>vite 提供了两种模式：具有开发服务器的开发模式（development）和生产模式（production）</p>
<p>项目根目录新建:.env.development :</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">NODE_ENV=development</span><br><span class="line"></span><br><span class="line">VITE_APP_WEB_URL= 'YOUR WEB URL'</span><br></pre></td></tr></tbody></table></figure>

<p>项目根目录新建:.env.production :</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">NODE_ENV=production</span><br><span class="line"></span><br><span class="line">VITE_APP_WEB_URL= 'YOUR WEB URL'</span><br></pre></td></tr></tbody></table></figure>

<p>组件中使用：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">console.log(import.meta.env.VITE_APP_WEB_URL)</span><br></pre></td></tr></tbody></table></figure>

<p>配置 package.json:</p>
<p>打包区分开发环境和生产环境</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">"build:dev": "vite build --mode development",</span><br><span class="line">"build:pro": "vite build --mode production",</span><br></pre></td></tr></tbody></table></figure>

<h1 id="三、配置跨域代理"><a href="#三、配置跨域代理" class="headerlink" title="三、配置跨域代理"></a>三、配置跨域代理</h1><p>在vite.config.ts中</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">    <span class="attr">resolve</span>: {</span><br><span class="line">        <span class="attr">alias</span>: {</span><br><span class="line">            <span class="string">'@'</span>: <span class="title function_">resolve</span>(<span class="string">'src'</span>),</span><br><span class="line">            <span class="attr">comps</span>: <span class="title function_">resolve</span>(<span class="string">'src/components'</span>),</span><br><span class="line">            <span class="attr">apis</span>: <span class="title function_">resolve</span>(<span class="string">'src/apis'</span>),</span><br><span class="line">            <span class="attr">views</span>: <span class="title function_">resolve</span>(<span class="string">'src/views'</span>),</span><br><span class="line">            <span class="attr">utils</span>: <span class="title function_">resolve</span>(<span class="string">'src/utils'</span>),</span><br><span class="line">            <span class="attr">routes</span>: <span class="title function_">resolve</span>(<span class="string">'src/routes'</span>),</span><br><span class="line">            <span class="attr">styles</span>: <span class="title function_">resolve</span>(<span class="string">'src/styles'</span>)</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">server</span>: {</span><br><span class="line">     <span class="comment">// 配置前端服务地址和端口</span></span><br><span class="line">        <span class="comment">//服务器主机名</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="comment">//端口号</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">3088</span>,</span><br><span class="line">        <span class="comment">//设为 true 时若端口已被占用则会直接退出，而不是尝试下一个可用端口</span></span><br><span class="line">        <span class="attr">strictPort</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//服务器启动时自动在浏览器中打开应用程序,当此值为字符串时，会被用作 URL 的路径名</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//自定义代理规则</span></span><br><span class="line">        <span class="attr">proxy</span>: {</span><br><span class="line">            <span class="comment">// 选项写法</span></span><br><span class="line">            <span class="string">'/api'</span>: {</span><br><span class="line">                <span class="attr">target</span>: <span class="string">''</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">''</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>使用跨域代理：</p>
<p>​        用代理, 首先你得有一个标识, 告诉他你这个连接要用代理. 不然的话, 可能你的 html, css, js这些静态资源都跑去代理. 所以我们一般只有接口用代理, 静态文件用本地.‘/api’: {}, 就是告诉node, 我接口只有是’/api’开头的才用代理.所以你的接口就要这么写 /api/xx/xx. 最后代理的路径就是 <a href="http://xxx.xx.com/api/xx/xx.%E5%8F%AF%E6%98%AF%E4%B8%8D%E5%AF%B9%E5%95%8A">http://xxx.xx.com/api/xx/xx.可是不对啊</a>, 我正确的接口路径里面没有/api啊. 所以就需要 pathRewrite,把’/api’去掉, 这样既能有正确标识, 又能在请求接口的时候去掉api.</p>
<h1 id="四、添加-css-预处理器-sass"><a href="#四、添加-css-预处理器-sass" class="headerlink" title="四、添加 css 预处理器 sass"></a>四、添加 css 预处理器 sass</h1><p>安装 ：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install -D sass sass-loader</span><br><span class="line">或者yarn add sass sass-loader</span><br></pre></td></tr></tbody></table></figure>

<p>在 src/assets 下新增 style 文件夹，用于存放全局样式文件</p>
<h1 id="五、约束代码风格"><a href="#五、约束代码风格" class="headerlink" title="五、约束代码风格"></a>五、约束代码风格</h1><p>TypeScirpt 官方决定全面采用 ESLint 作为代码检查的工具，并创建了一个新项目 typescript-eslint，提供了 TypeScript 文件的解析器 @typescript-eslint/parser 和相关的配置选项 @typescript-eslint/eslint-plugin 等</p>
<h2 id="1-Eslint支持"><a href="#1-Eslint支持" class="headerlink" title="1.Eslint支持"></a><strong>1.Eslint支持</strong></h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># eslint 安装</span><br><span class="line">yarn add eslint --dev</span><br><span class="line"># eslint 插件安装</span><br><span class="line">yarn add eslint-plugin-vue --dev</span><br><span class="line"></span><br><span class="line">yarn add @typescript-eslint/eslint-plugin --dev</span><br><span class="line"></span><br><span class="line">yarn add eslint-plugin-prettier --dev</span><br><span class="line"></span><br><span class="line"># typescript parser</span><br><span class="line">yarn add @typescript-eslint/parser --dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">直接：npm i typescript eslint eslint-plugin-vue @typescript-eslint/parser @typescript-eslint/eslint-plugin -D</span><br></pre></td></tr></tbody></table></figure>

<p>注意: 如果 eslint 安装报错:</p>
<p>可以尝试运行以下命令:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yarn config set ignore-engines true</span><br></pre></td></tr></tbody></table></figure>

<p><strong>项目下新建 .eslintrc.js配置 eslint 校验规则:</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 需要安装依赖:  npm i eslint-define-config</span></span><br><span class="line"><span class="keyword">const</span> { defineConfig } = <span class="built_in">require</span>(<span class="string">'eslint-define-config'</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>({</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* 指定如何解析语法。*/</span></span><br><span class="line">    <span class="attr">parser</span>: <span class="string">'vue-eslint-parser'</span>,</span><br><span class="line">    <span class="comment">/* 优先级低于parse的语法解析配置 */</span></span><br><span class="line">    <span class="attr">parserOptions</span>: {</span><br><span class="line">        <span class="attr">parser</span>: <span class="string">'@typescript-eslint/parser'</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// https://eslint.bootcss.com/docs/user-guide/configuring#specifying-globals</span></span><br><span class="line">    <span class="attr">globals</span>: {</span><br><span class="line">        <span class="title class_">Nullable</span>: <span class="literal">true</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">extends</span>: [</span><br><span class="line">        <span class="comment">// add more generic rulesets here, such as:</span></span><br><span class="line">        <span class="comment">// 'eslint:recommended',</span></span><br><span class="line">        <span class="comment">// 'plugin:vue/vue3-recommended',</span></span><br><span class="line">        <span class="comment">// 'plugin:vue/recommended' // Use this if you are using Vue.js 2.x.</span></span><br><span class="line"></span><br><span class="line">        <span class="string">'plugin:vue/vue3-recommended'</span>,</span><br><span class="line">        <span class="comment">// 此条内容开启会导致 全局定义的 ts 类型报  no-undef 错误，因为</span></span><br><span class="line">        <span class="comment">// https://cn.eslint.org/docs/rules/</span></span><br><span class="line">        <span class="string">'eslint:recommended'</span>,</span><br><span class="line">        <span class="string">'plugin:@typescript-eslint/recommended'</span>, <span class="comment">// typescript-eslint推荐规则,</span></span><br><span class="line">        <span class="string">'prettier'</span>,</span><br><span class="line">        <span class="string">'plugin:prettier/recommended'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">rules</span>: {</span><br><span class="line">        <span class="comment">// 'no-undef': 'off',</span></span><br><span class="line">        <span class="comment">// 禁止使用 var</span></span><br><span class="line">        <span class="string">'no-var'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="attr">semi</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">// 优先使用 interface 而不是 type</span></span><br><span class="line">        <span class="string">'@typescript-eslint/consistent-type-definitions'</span>: [<span class="string">'error'</span>, <span class="string">'interface'</span>],</span><br><span class="line">        <span class="string">'@typescript-eslint/no-explicit-any'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="string">'@typescript-eslint/explicit-module-boundary-types'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="string">'@typescript-eslint/ban-types'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="string">'@typescript-eslint/no-unused-vars'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="string">'vue/html-indent'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">attribute</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">baseIndent</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">closeBracket</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">alignAttributesVertically</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">ignores</span>: [],</span><br><span class="line">            },</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 关闭此规则 使用 prettier 的格式化规则， 感觉prettier 更加合理，</span></span><br><span class="line">        <span class="comment">// 而且一起使用会有冲突</span></span><br><span class="line">        <span class="string">'vue/max-attributes-per-line'</span>: [<span class="string">'off'</span>],</span><br><span class="line">        <span class="comment">// 强制使用驼峰命名</span></span><br><span class="line">        <span class="string">'vue/component-name-in-template-casing'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            <span class="string">'PascalCase'</span>,</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">registeredComponentsOnly</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">ignores</span>: [],</span><br><span class="line">            },</span><br><span class="line">        ],</span><br><span class="line">    },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p><strong>项目下新建 .eslintignore</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># eslint 忽略检查 (根据项目需要自行添加)</span><br><span class="line">node_modules</span><br><span class="line">dist</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-prettier支持"><a href="#2-prettier支持" class="headerlink" title="2.prettier支持"></a>2.prettier支持</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装 prettier</span><br><span class="line">yarn add prettier --dev</span><br></pre></td></tr></tbody></table></figure>

<p>解决 eslint 和 prettier 冲突</p>
<p>解决 ESLint 中的样式规范和 prettier 中样式规范的冲突，以 prettier 的样式规范为准，使 ESLint 中的样式规范自动失效</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装插件 eslint-config-prettier</span><br><span class="line">yarn add eslint-config-prettier --dev</span><br></pre></td></tr></tbody></table></figure>

<p><strong>项目下新建 .prettier.js</strong></p>
<p>配置 prettier 格式化规则:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">module.exports = {</span><br><span class="line">  tabWidth: 2,</span><br><span class="line">  jsxSingleQuote: true,</span><br><span class="line">  jsxBracketSameLine: true,</span><br><span class="line">  printWidth: 100,</span><br><span class="line">  singleQuote: true,</span><br><span class="line">  semi: false,</span><br><span class="line">  overrides: [</span><br><span class="line">    {</span><br><span class="line">      files: '*.json',</span><br><span class="line">      options: {</span><br><span class="line">        printWidth: 200,</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  ],</span><br><span class="line">  arrowParens: 'always',</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>项目下新建 .prettierignore</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 忽略格式化文件 (根据项目需要自行添加)</span><br><span class="line">node_modules</span><br><span class="line">dist</span><br></pre></td></tr></tbody></table></figure>

<p>package.json 配置:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "script": {</span><br><span class="line">    "lint": "eslint src --fix --ext .ts,.tsx,.vue,.js,.jsx",</span><br><span class="line">    "prettier": "prettier --write ."</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>上面配置完成后,可以运行以下<code>命令</code>测试下代码检查个<code>格式化</code>效果:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># eslint 检查</span><br><span class="line">yarn lint</span><br><span class="line"># prettier 自动格式化</span><br><span class="line">yarn prettier</span><br></pre></td></tr></tbody></table></figure>

<h1 id="六、安装路由"><a href="#六、安装路由" class="headerlink" title="六、安装路由"></a>六、安装路由</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装路由</span><br><span class="line">yarn add vue-router@4</span><br></pre></td></tr></tbody></table></figure>

<p>在 src 文件下新增 router 文件夹 =&gt; index.ts 文件,内容如下:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span> } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteRecordRaw</span>[] = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Login'</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'@/pages/login/Login.vue'</span>), <span class="comment">// 注意这里要带上 文件后缀.vue</span></span><br><span class="line">  },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure>

<p>修改入口文件 mian.ts :</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure>

<h1 id="七、axios统一请求封装"><a href="#七、axios统一请求封装" class="headerlink" title="七、axios统一请求封装"></a>七、axios统一请求封装</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装 axios</span><br><span class="line">yarn add axios</span><br><span class="line"># 安装 nprogress 用于请求 loading</span><br><span class="line"># 也可以根据项目需求自定义其它 loading</span><br><span class="line">yarn add nprogress</span><br><span class="line"># 类型声明，或者添加一个包含 `declare module 'nprogress'</span><br><span class="line">yarn add @types/nprogress --dev</span><br></pre></td></tr></tbody></table></figure>

<p>新增 service 文件夹，service 下新增 http.ts 文件以及 moudles 文件夹(存放各模块接口)和interface(公共ts)文件夹:</p>
<p>http.ts : 用于axios封装**</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//http.ts</span></span><br><span class="line"><span class="keyword">import</span> axios, { <span class="title class_">AxiosRequestConfig</span> } <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">'nprogress'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求头和请求路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">'/api'</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">'Content-Type'</span>] = <span class="string">'application/json;charset=UTF-8'</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  (config): <span class="title class_">AxiosRequestConfig</span>&lt;any&gt; =&gt; {</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">'token'</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) {</span><br><span class="line">      <span class="comment">//@ts-ignore</span></span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">token</span> = token</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  },</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> error</span><br><span class="line">  }</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 响应拦截</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">111</span>) {</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">'token'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="comment">// token过期操作</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">ResType</span>&lt;T&gt; {</span><br><span class="line">  <span class="attr">code</span>: number</span><br><span class="line">  data?: T</span><br><span class="line">  <span class="attr">msg</span>: string</span><br><span class="line">  err?: string</span><br><span class="line">}</span><br><span class="line">interface <span class="title class_">Http</span> {</span><br><span class="line">  get&lt;T&gt;(<span class="attr">url</span>: string, params?: unknown): <span class="title class_">Promise</span>&lt;<span class="title class_">ResType</span>&lt;T&gt;&gt;</span><br><span class="line">  post&lt;T&gt;(<span class="attr">url</span>: string, params?: unknown): <span class="title class_">Promise</span>&lt;<span class="title class_">ResType</span>&lt;T&gt;&gt;</span><br><span class="line">  upload&lt;T&gt;(<span class="attr">url</span>: string, <span class="attr">params</span>: unknown): <span class="title class_">Promise</span>&lt;<span class="title class_">ResType</span>&lt;T&gt;&gt;</span><br><span class="line">  <span class="title function_">download</span>(<span class="attr">url</span>: string): <span class="keyword">void</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">http</span>: <span class="title class_">Http</span> = {</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">url, params</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">get</span>(url, { params })</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">post</span>(<span class="params">url, params</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">post</span>(url, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">upload</span>(<span class="params">url, file</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">post</span>(url, file, {</span><br><span class="line">          <span class="attr">headers</span>: { <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span> },</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">          <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">download</span>(<span class="params">url</span>) {</span><br><span class="line">    <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'iframe'</span>)</span><br><span class="line">    iframe.<span class="property">style</span>.<span class="property">display</span> = <span class="string">'none'</span></span><br><span class="line">    iframe.<span class="property">src</span> = url</span><br><span class="line">    iframe.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(iframe)</span><br><span class="line">    }</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe)</span><br><span class="line">  },</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br></pre></td></tr></tbody></table></figure>

<p>例如：moudles 下新增login文件夹，用于存放登录模块的请求接口,login 文件夹下分别新增 login.ts types.ts :</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'@/service/http'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> T <span class="keyword">from</span> <span class="string">'./types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">loginApi</span>: T.<span class="property">ILoginApi</span> = {</span><br><span class="line">    <span class="title function_">login</span>(<span class="params">params</span>){</span><br><span class="line">        <span class="keyword">return</span> http.<span class="title function_">post</span>(<span class="string">'/login'</span>, params)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> loginApi</span><br></pre></td></tr></tbody></table></figure>

<p>types.ts:</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">ILoginParams</span> {</span><br><span class="line">    <span class="attr">userName</span>: string</span><br><span class="line">    <span class="attr">passWord</span>: string | number</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">ILoginApi</span> {</span><br><span class="line">    <span class="attr">login</span>: <span class="function">(<span class="params">params: ILoginParams</span>)=&gt;</span> <span class="title class_">Promise</span>&lt;any&gt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="八、状态管理-pinia"><a href="#八、状态管理-pinia" class="headerlink" title="八、状态管理 pinia"></a>八、状态管理 pinia</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">yarn add pinia@next</span><br></pre></td></tr></tbody></table></figure>

<p>在 <code>src</code> 文件夹下新增 <code>store</code> 文件夹,接在在 store 中新增 main.ts</p>
<p>main.ts 中增加</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"># 引入</span><br><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">"pinia"</span></span><br><span class="line"># 创建根存储库并将其传递给应用程序</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br></pre></td></tr></tbody></table></figure>

<h1 id="九、添加element-plus"><a href="#九、添加element-plus" class="headerlink" title="九、添加element-plus"></a>九、添加element-plus</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#安装 element-plus </span><br><span class="line">yarn add element-plus</span><br></pre></td></tr></tbody></table></figure>

<h2 id="1-element-plus按需引入"><a href="#1-element-plus按需引入" class="headerlink" title="1.element-plus按需引入"></a>1.element-plus按需引入</h2><p>需要用到两个插件unplugin-vue-components、unplugin-auto-import这两个插件。 </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm i unplugin-vue-components unplugin-auto-import -D</span><br></pre></td></tr></tbody></table></figure>

<p>另外这里要注意的是，由于使用了 unplugin-vue-components unplugin-auto-import 这两个插件，按需加载其实是不需要 import 组件，但如果使用Api创建组件，例如elmesage,elnotification这些，可以看到不 import 的话会提示错误，如果 import 又会导致样式的丢失,需要下载一个插件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yarn add unplugin-element-plus -D</span><br><span class="line">#或者 </span><br><span class="line">npm i unplugin-element-plus -D </span><br></pre></td></tr></tbody></table></figure>

<p>配置vite.config.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineConfig } <span class="keyword">from</span> <span class="string">"vite"</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">"@vitejs/plugin-vue"</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">"path"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">'unplugin-auto-import/vite'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">'unplugin-vue-components/vite'</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">ElementPlusResolver</span> } <span class="keyword">from</span> <span class="string">'unplugin-vue-components/resolvers'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">'unplugin-element-plus/vite'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">dir: string</span>) =&gt; path.<span class="title function_">join</span>(__dirname, dir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>({</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    }),</span><br><span class="line">    <span class="title class_">Components</span>({</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    }),</span><br><span class="line">    <span class="title class_">ElementPlus</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//配置别名</span></span><br><span class="line">  <span class="attr">resolve</span>: {</span><br><span class="line">    <span class="attr">alias</span>: {</span><br><span class="line">      <span class="string">"@"</span>: <span class="title function_">resolve</span>(<span class="string">"src"</span>),</span><br><span class="line">      <span class="attr">comps</span>: <span class="title function_">resolve</span>(<span class="string">"src/components"</span>),</span><br><span class="line">      <span class="attr">service</span>: <span class="title function_">resolve</span>(<span class="string">"src/service"</span>),</span><br><span class="line">      <span class="attr">views</span>: <span class="title function_">resolve</span>(<span class="string">"src/views"</span>),</span><br><span class="line">      <span class="attr">route</span>: <span class="title function_">resolve</span>(<span class="string">"src/route"</span>),</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line"> <span class="comment">// css:{</span></span><br><span class="line">    <span class="comment">//preprocessorOptions:{</span></span><br><span class="line">      <span class="comment">//scss:{</span></span><br><span class="line">      <span class="comment">//  additionalData:'@import "@/assets/style/main.scss";'</span></span><br><span class="line">     <span class="comment">// }</span></span><br><span class="line">    <span class="comment">//}</span></span><br><span class="line"> <span class="comment">// },</span></span><br><span class="line">  <span class="comment">//配置跨域代理</span></span><br><span class="line">  <span class="attr">server</span>: {</span><br><span class="line">    <span class="comment">// 配置前端服务地址和端口</span></span><br><span class="line">    <span class="comment">//服务器主机名</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="comment">//端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3088</span>,</span><br><span class="line">    <span class="comment">//设为 true 时若端口已被占用则会直接退出，而不是尝试下一个可用端口</span></span><br><span class="line">    <span class="attr">strictPort</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//服务器启动时自动在浏览器中打开应用程序,当此值为字符串时，会被用作 URL 的路径名</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//自定义代理规则</span></span><br><span class="line">    <span class="attr">proxy</span>: {</span><br><span class="line">      <span class="string">"/api"</span>: {</span><br><span class="line">        <span class="attr">target</span>: <span class="string">"http://localhost:3000"</span>, <span class="comment">//要代理的本地api地址，也可以换成线上测试地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//跨域</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">""</span>),</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-添加element-plus图标"><a href="#2-添加element-plus图标" class="headerlink" title="2.添加element-plus图标"></a>2.添加element-plus图标</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># NPM</span><br><span class="line">$ npm install @element-plus/icons-vue</span><br><span class="line"># Yarn</span><br><span class="line">$ yarn add @element-plus/icons-vue</span><br></pre></td></tr></tbody></table></figure>

<p>然后在main.ts中全局注册并使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">ElementPlusIconsVue</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">	app.<span class="title function_">component</span>(key, <span class="title class_">ElementPlusIconsVue</span>[key <span class="keyword">as</span> keyof <span class="keyword">typeof</span> <span class="title class_">ElementPlusIconsVue</span>]);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h1 id="十、svg图标插件使用"><a href="#十、svg图标插件使用" class="headerlink" title="十、svg图标插件使用"></a>十、svg图标插件使用</h1><h2 id="1-安装svg图标插件"><a href="#1-安装svg图标插件" class="headerlink" title="1.安装svg图标插件"></a>1.安装svg图标插件</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#安装插件vue-svg-icon</span><br><span class="line">npm install vue-svg-icon --save-dev</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-注册全局组件svgIcon"><a href="#2-注册全局组件svgIcon" class="headerlink" title="2. 注册全局组件svgIcon"></a>2. 注册全局组件svgIcon</h2><p>在main.ts中全局注册并使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span></span><br><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">"pinia"</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">'./components/SvgIcon/index.vue'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"element-plus/dist/index.css"</span></span><br><span class="line"><span class="comment">//样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/index.scss'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 注册element Icons组件</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">ElementPlusIconsVue</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">	app.<span class="title function_">component</span>(key, <span class="title class_">ElementPlusIconsVue</span>[key <span class="keyword">as</span> keyof <span class="keyword">typeof</span> <span class="title class_">ElementPlusIconsVue</span>]);</span><br><span class="line">});</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>()).<span class="title function_">component</span>(<span class="string">'svg-icon'</span>, <span class="title class_">SvgIcon</span>).<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-下载存放svg图标"><a href="#3-下载存放svg图标" class="headerlink" title="3.下载存放svg图标"></a>3.下载存放svg图标</h2><p>在src下新建assets=&gt;icons=&gt;svg文件夹，用来存放svg图标，所有下载的SVG图标放入其中</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20221008180639420.png" alt="image-20221008180639420"></p>
<h2 id="4-使用svg图标"><a href="#4-使用svg图标" class="headerlink" title="4. 使用svg图标"></a>4. 使用svg图标</h2><p>以bug.svg图标为例，修改scale的值调整图标的大小。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;svgIcon name="del" :scale="1" /&gt;</span><br></pre></td></tr></tbody></table></figure>

<h1 id="十一、untils文件夹"><a href="#十一、untils文件夹" class="headerlink" title="十一、untils文件夹"></a>十一、untils文件夹</h1><p>在根目录下新建一个untils文件夹，这个文件夹下的内容主要是导出常用的一些公共方法等等:</p>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20221008171843967.png" alt="image-20221008171843967"></p>
<p>untils=&gt;util.ts</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//常用的工具方法</span></span><br><span class="line"><span class="keyword">import</span> { isArray } <span class="keyword">from</span> <span class="string">"@/utils/is"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 获取localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} key Storage名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localGet</span>(<span class="params">key: string</span>) {</span><br><span class="line">	<span class="keyword">const</span> value = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">	<span class="keyword">try</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(key) <span class="keyword">as</span> string);</span><br><span class="line">	} <span class="keyword">catch</span> (error) {</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 存储localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} key Storage名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Any</span>} value Storage值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">void</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localSet</span>(<span class="params">key: string, value: any</span>) {</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 清除localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} key Storage名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">void</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localRemove</span>(<span class="params">key: string</span>) {</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 清除所有localStorage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">void</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">localClear</span>(<span class="params"></span>) {</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 对象数组深克隆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Object</span>} obj 源对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">object</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> deepCopy&lt;T&gt;(<span class="attr">obj</span>: any): T {</span><br><span class="line">	<span class="keyword">let</span> <span class="attr">newObj</span>: any;</span><br><span class="line">	<span class="keyword">try</span> {</span><br><span class="line">		newObj = obj.<span class="property">push</span> ? [] : {};</span><br><span class="line">	} <span class="keyword">catch</span> (error) {</span><br><span class="line">		newObj = {};</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> obj) {</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> obj[attr] === <span class="string">"object"</span>) {</span><br><span class="line">			newObj[attr] = <span class="title function_">deepCopy</span>(obj[attr]);</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			newObj[attr] = obj[attr];</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> newObj;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 判断数据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Any</span>} val 需要判断类型的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isType</span>(<span class="params">val: any</span>) {</span><br><span class="line">	<span class="keyword">if</span> (val === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">"object"</span>) <span class="keyword">return</span> <span class="keyword">typeof</span> val;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(val).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>).<span class="title function_">toLocaleLowerCase</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 生成随机数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Number</span>} min 最小值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Number</span>} max 最大值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">number</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">randomNum</span>(<span class="params">min: number, max: number</span>): number {</span><br><span class="line">	<span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (min - max) + max);</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 递归查询当前路由所对应的路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} menuList 菜单列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} path 当前地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">array</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> getTabPane&lt;T, U&gt;(<span class="attr">menuList</span>: any[], <span class="attr">path</span>: U): T {</span><br><span class="line">	<span class="keyword">let</span> <span class="attr">result</span>: any;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> menuList || []) {</span><br><span class="line">		<span class="keyword">if</span> (item.<span class="property">path</span> === path) result = item;</span><br><span class="line">		<span class="keyword">const</span> res = <span class="title function_">getTabPane</span>(item.<span class="property">children</span>, path);</span><br><span class="line">		<span class="keyword">if</span> (res) result = res;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 使用递归处理路由菜单，生成一维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} menuList 所有菜单列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} newArr 菜单的一维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">array</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleRouter</span>(<span class="params">routerList: Menu.MenuOptions[], newArr: string[] = []</span>) {</span><br><span class="line">	routerList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item: Menu.MenuOptions</span>) =&gt;</span> {</span><br><span class="line">		<span class="keyword">typeof</span> item === <span class="string">"object"</span> &amp;&amp; item.<span class="property">path</span> &amp;&amp; newArr.<span class="title function_">push</span>(item.<span class="property">path</span>);</span><br><span class="line">		item.<span class="property">children</span> &amp;&amp; item.<span class="property">children</span>.<span class="property">length</span> &amp;&amp; <span class="title function_">handleRouter</span>(item.<span class="property">children</span>, newArr);</span><br><span class="line">	});</span><br><span class="line">	<span class="keyword">return</span> newArr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 扁平化数组对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} arr 数组对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">array</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getFlatArr</span>(<span class="params">arr: any</span>) {</span><br><span class="line">	<span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre: any, current: any</span>) =&gt;</span> {</span><br><span class="line">		<span class="keyword">let</span> flatArr = [...pre, current];</span><br><span class="line">		<span class="keyword">if</span> (current.<span class="property">children</span>) flatArr = [...flatArr, ...<span class="title function_">getFlatArr</span>(current.<span class="property">children</span>)];</span><br><span class="line">		<span class="keyword">return</span> flatArr;</span><br><span class="line">	}, []);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 格式化表格单元格默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Number</span>} row 行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Number</span>} col 列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} callValue 当前单元格值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defaultFormat</span>(<span class="params">row: number, col: number, callValue: any</span>) {</span><br><span class="line">	<span class="comment">// 如果当前值为数组,使用 / 拼接（根据需求自定义）</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_">isArray</span>(callValue)) <span class="keyword">return</span> callValue.<span class="property">length</span> ? callValue.<span class="title function_">join</span>(<span class="string">" / "</span>) : <span class="string">"--"</span>;</span><br><span class="line">	<span class="keyword">return</span> callValue ?? <span class="string">"--"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 处理无数据情况</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} callValue 需要处理的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatValue</span>(<span class="params">callValue: any</span>) {</span><br><span class="line">	<span class="comment">// 如果当前值为数组,使用 / 拼接（根据需求自定义）</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_">isArray</span>(callValue)) <span class="keyword">return</span> callValue.<span class="property">length</span> ? callValue.<span class="title function_">join</span>(<span class="string">" / "</span>) : <span class="string">"--"</span>;</span><br><span class="line">	<span class="keyword">return</span> callValue ?? <span class="string">"--"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 根据枚举列表查询当需要的数据（如果指定了 label 和 value 的 key值，会自动识别格式化）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} callValue 当前单元格值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">Array</span>} enumData 枚举列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">String</span>} type 过滤类型（目前只有 tag）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">filterEnum</span>(<span class="params">callValue: any, enumData: any, searchProps?: { [key: string]: any }, type?: string</span>): string {</span><br><span class="line">	<span class="keyword">const</span> value = searchProps?.<span class="property">value</span> ?? <span class="string">"value"</span>;</span><br><span class="line">	<span class="keyword">const</span> label = searchProps?.<span class="property">label</span> ?? <span class="string">"label"</span>;</span><br><span class="line">	<span class="keyword">let</span> <span class="attr">filterData</span>: any = {};</span><br><span class="line">	<span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(enumData)) filterData = enumData.<span class="title function_">find</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> item[value] === callValue);</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">"tag"</span>) <span class="keyword">return</span> filterData?.<span class="property">tagType</span> ? filterData.<span class="property">tagType</span> : <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">return</span> filterData ? filterData[label] : <span class="string">"--"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>is文件夹下的index.ts  常用的判断方式，is=&gt;index.ts</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 判断值是否未某个类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">is</span>(<span class="params">val: unknown, type: string</span>) {</span><br><span class="line">	<span class="keyword">return</span> toString.<span class="title function_">call</span>(val) === <span class="string">`[object <span class="subst">${type}</span>]`</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  是否为函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> isFunction&lt;T = <span class="title class_">Function</span>&gt;(<span class="attr">val</span>: unknown): val is T {</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">is</span>(val, <span class="string">"Function"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 是否已定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isDef = &lt;T = unknown&gt;(val?: T): val is T =&gt; {</span><br><span class="line">	return typeof val !== "undefined";</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">export const isUnDef = &lt;T = unknown&gt;(val?: T): val is T =&gt; {</span><br><span class="line">	return !isDef(val);</span><br><span class="line">};</span><br><span class="line">/**</span><br><span class="line"> * @description: 是否为对象</span><br><span class="line"> */</span><br><span class="line">export const isObject = (val: any): val is Record&lt;any, any&gt; =&gt; {</span><br><span class="line">	return val !== null &amp;&amp; is(val, "Object");</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为时间</span><br><span class="line"> */</span><br><span class="line">export function isDate(val: unknown): val is Date {</span><br><span class="line">	return is(val, "Date");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为数值</span><br><span class="line"> */</span><br><span class="line">export function isNumber(val: unknown): val is number {</span><br><span class="line">	return is(val, "Number");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为AsyncFunction</span><br><span class="line"> */</span><br><span class="line">export function isAsyncFunction&lt;T = any&gt;(val: unknown): val is Promise&lt;T&gt; {</span><br><span class="line">	return is(val, "AsyncFunction");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为promise</span><br><span class="line"> */</span><br><span class="line">export function isPromise&lt;T = any&gt;(val: unknown): val is Promise&lt;T&gt; {</span><br><span class="line">	return is(val, "Promise") &amp;&amp; isObject(val) &amp;&amp; isFunction(val.then) &amp;&amp; isFunction(val.catch);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为字符串</span><br><span class="line"> */</span><br><span class="line">export function isString(val: unknown): val is string {</span><br><span class="line">	return is(val, "String");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为boolean类型</span><br><span class="line"> */</span><br><span class="line">export function isBoolean(val: unknown): val is boolean {</span><br><span class="line">	return is(val, "Boolean");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description:  是否为数组</span><br><span class="line"> */</span><br><span class="line">export function isArray(val: any): val is Array&lt;any&gt; {</span><br><span class="line">	return val &amp;&amp; Array.isArray(val);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 是否客户端</span><br><span class="line"> */</span><br><span class="line">export const isClient = () =&gt; {</span><br><span class="line">	return typeof window !== "undefined";</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 是否为浏览器</span><br><span class="line"> */</span><br><span class="line">export const isWindow = (val: any): val is Window =&gt; {</span><br><span class="line">	return typeof window !== "undefined" &amp;&amp; is(val, "Window");</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">export const isElement = (val: unknown): val is Element =&gt; {</span><br><span class="line">	return isObject(val) &amp;&amp; !!val.tagName;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">export const isServer = typeof window === "undefined";</span><br><span class="line"></span><br><span class="line">// 是否为图片节点</span><br><span class="line">export function isImageDom(o: Element) {</span><br><span class="line">	return o &amp;&amp; ["IMAGE", "IMG"].includes(o.tagName);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">export function isNull(val: unknown): val is null {</span><br><span class="line">	return val === null;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">export function isNullAndUnDef(val: unknown): val is null | undefined {</span><br><span class="line">	return isUnDef(val) &amp;&amp; isNull(val);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">export function isNullOrUnDef(val: unknown): val is null | undefined {</span><br><span class="line">	return isUnDef(val) || isNull(val);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="十二、typings-gt-global-d-ts放全局变量-命名空间"><a href="#十二、typings-gt-global-d-ts放全局变量-命名空间" class="headerlink" title="十二、typings->global.d.ts放全局变量,命名空间"></a>十二、typings-&gt;global.d.ts放全局变量,命名空间</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// * Menu</span><br><span class="line">declare namespace Menu {</span><br><span class="line">	interface MenuOptions {</span><br><span class="line">		path: string;</span><br><span class="line">		title: string;</span><br><span class="line">		icon?: string;</span><br><span class="line">		isLink?: string;</span><br><span class="line">		close?: boolean;</span><br><span class="line">		children?: MenuOptions[];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">declare type TabsOptions = Menu.MenuOptions &amp; {};</span><br><span class="line"></span><br><span class="line">// * Vite</span><br><span class="line">declare type Recordable&lt;T = any&gt; = Record&lt;string, T&gt;;</span><br><span class="line"></span><br><span class="line">declare interface ViteEnv {</span><br><span class="line">	VITE_API_URL: string;</span><br><span class="line">	VITE_PORT: number;</span><br><span class="line">	VITE_OPEN: boolean;</span><br><span class="line">	VITE_GLOB_APP_TITLE: string;</span><br><span class="line">	VITE_DROP_CONSOLE: boolean;</span><br><span class="line">	VITE_PROXY_URL: string;</span><br><span class="line">	VITE_BUILD_GZIP: boolean;</span><br><span class="line">	VITE_REPORT: boolean;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="十三、vue3-0使用tsx语法"><a href="#十三、vue3-0使用tsx语法" class="headerlink" title="十三、vue3.0使用tsx语法"></a>十三、vue3.0使用tsx语法</h1><p>1.下载</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yarn add @vitejs/plugin-vue-jsx -D</span><br></pre></td></tr></tbody></table></figure>

<p>2.引入</p>
<p>在vite.config.ts中</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import { defineConfig } from 'vite'</span><br><span class="line">import vue from '@vitejs/plugin-vue'</span><br><span class="line">import vueJsx from '@vitejs/plugin-vue-jsx';</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig({</span><br><span class="line">  plugins: [vue(),vueJsx()]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>3.tsconfig.json 配置文件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">"jsx": "preserve",</span><br><span class="line">"jsxFactory": "h",</span><br><span class="line">"jsxFragmentFactory": "Fragment",</span><br></pre></td></tr></tbody></table></figure>



<p><font color="#478fd2">参考文章：</font></p>
<p><a href="https://juejin.cn/post/7036745610954801166#heading-21">Vite2 + Vue3 + TypeScript + Pinia 搭建一套企业级的开发脚手架</a></p>
<p><a href="https://juejin.cn/user/3456520289517608/posts">Vue3 + Ts + ElementPlus + Vite2 从零搭建后台管理系统</a></p>
<p><a href="https://github.com/someGenki/vue-lite-admin">禾几元老哥的github源码</a></p>
</body></html>]]></content>
      <categories>
        <category>项目搭建</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vue3</tag>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础</title>
    <url>/2022/09/30/git%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、git基础"><a href="#一、git基础" class="headerlink" title="一、git基础"></a>一、git基础</h1><h2 id="重新下载git后"><a href="#重新下载git后" class="headerlink" title="重新下载git后"></a>重新下载git后</h2><p><strong>1.先配钥匙（钥匙的作用是把你电脑上面的git和github或gitab连接）</strong></p>
<p>$ ssh-keygen -t rsa -C “<a href="mailto:your_email@youremail.com">your_email@youremail.com</a>“ //注意啊孩子，双引号里面是你的邮箱(如果在公司你应该有自己的企业邮箱)。填你常用的就行。还有enter代表执行。</p>
<p>添加公钥到 Github(gitee等) 中</p>
<p>登录 github 账号，选中并打开 setting，选择 SSH and GPG keys，选择 New SSH key，在 Title 中填入题目，在 Key 中填入id_rsa.pub 文件中的公钥。</p>
<p>可用如下命令验证上述配置是否成功：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ssh -T [git@github.com](mailto:git@github.com) </span><br></pre></td></tr></tbody></table></figure>

<p><strong>2.配置user.name   user.email</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 配置用户名 </span><br><span class="line">git config --global user.name "xxx"                       </span><br><span class="line"># 配置邮件</span><br><span class="line">git config --global user.email "[xxx@xxx.com](mailto:xxx@xxx.com)"              </span><br></pre></td></tr></tbody></table></figure>

<p><strong>3.建本地仓库</strong></p>
<p>新建一个文件夹，用vscode打开该文件夹，git init，该命令执行完后会在当前目录生成一个 .git 目录</p>
<p><strong>4.添加远程地址（将本地仓库与远程仓库关联起来）</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git remote add origin [git@github.com](mailto:git@github.com)/你的github用户名/仓库名.git</span><br></pre></td></tr></tbody></table></figure>

<p><strong>5.新建一个txt文本，里面写点东西。我的命名为read</strong></p>
<p><strong>6.add和commit</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git add read.txt $ git commit -m "这是你commit的原因，写了方便你我他"</span><br></pre></td></tr></tbody></table></figure>

<p><strong>7.push推送到你的github</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure>

<p><strong>另外注意事项：</strong></p>
<p> 生成秘钥</p>
<p>  在windows下查看[c盘-&gt;用户-&gt;用户名-&gt;.ssh]下是否有id_rsa、id_rsa.pub文件</p>
<p>，如果没有需要手动生成</p>
<p>  打开git bash，在控制台中输入以下命令： $ ssh-keygen -t rsa -C “自己邮箱”。</p>
<hr>
<h2 id="创建分支流程"><a href="#创建分支流程" class="headerlink" title="创建分支流程"></a>创建分支流程</h2><p><strong>1.先切换到主分支，然后创建本地新分支</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git branch  &lt;BranchName&gt;（master）</span><br></pre></td></tr></tbody></table></figure>

<p><strong>2.显示所有本地分支（创建完看看本地有没有该分支）</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></figure>

<p><strong>3.切换分支(既然都创建了，肯定要用这个分支，切换到该分支)</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout &lt;BranchName&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>4.建立远程分支</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git push --set-upstream origin + 刚刚创建的分支名 </span><br></pre></td></tr></tbody></table></figure>

<h2 id="删除分支流程"><a href="#删除分支流程" class="headerlink" title="删除分支流程"></a>删除分支流程</h2><p><strong>1.切换分支(先切换到其他分支上)</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout  &lt;BranchName2&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>2.删除本地分支( 需要切换到别的分支上去删除)  命令行：</strong> </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git branch -d  &lt;BranchName&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>3.删除远程分支（没建立远程分支就不要没必要） 命令行</strong>：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git push origin --delete  &lt;BranchName&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Git-把master的内容更新到自己分支上"><a href="#Git-把master的内容更新到自己分支上" class="headerlink" title="Git 把master的内容更新到自己分支上"></a>Git 把master的内容更新到自己分支上</h2><p><strong>1.如果分支(将此分支暂命名为feature)有修改，则先提交修改的内容，如果没有，直接跳到下一步</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m “这是你commit的原因，写了方便你我他”</span><br></pre></td></tr></tbody></table></figure>

<p><strong>2.切换到master分支下</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></tbody></table></figure>

<p><strong>3.将远程的master代码pull拉取到本地</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></tbody></table></figure>

<p><strong>4.切换到自己分支下</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout  &lt;BranchName&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>5.合并master到自己分支</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git merge master</span><br></pre></td></tr></tbody></table></figure>

<p>如果在合并的过程中，例如提示Test.java文件出现冲突了，手动修改一下这个文件，修改成自己想要内容；如果没有出现冲突，vs code上下载git history插件 ，可以对比冲突，保留自己想要的代码，没有就直接跳到7步<br><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20221018105811855.png" alt="冲突解决"><br>上方的Accept Current Change等四种选择按钮，根据情况选择保留Current Change或者Incoming Change;颜色提示很明显，&lt;&lt;&lt;&lt;&lt;&lt; HEAD以下绿色部分是current change,同理蓝色部分是incoming.<br>both是全部保留</p>
<p><strong>6.添加修改的文件，将新添加的文件提交上去</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git add Test.java</span><br><span class="line"></span><br><span class="line">git commit -m “这是你commit的原因，写了方便你我他”</span><br></pre></td></tr></tbody></table></figure>

<p><strong>7.将本地分支的代码push到远程仓库对应的分支上</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git push origin  </span><br></pre></td></tr></tbody></table></figure>

<h1 id="测试通过后可以上线了将自己分支代码合并到master"><a href="#测试通过后可以上线了将自己分支代码合并到master" class="headerlink" title="测试通过后可以上线了将自己分支代码合并到master"></a>测试通过后可以上线了将自己分支代码合并到master</h1><p>1.需要先在，Git 把master的内容更新到自己分支上（在上面）</p>
<p>2.切换到master主分支 git checkout master</p>
<p>3.git pull一下</p>
<p>4.合并到master </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git merge （自己分支名字）</span><br></pre></td></tr></tbody></table></figure>

<p>5.在vscode 源代码管理工具或者sourecetree上对比一下自己提交的代码</p>
<p>5.git push 上传推送代码</p>
<h2 id="git-stash的使用"><a href="#git-stash的使用" class="headerlink" title="git stash的使用"></a>git stash的使用</h2><p>应用场景：某一天你正在 feature 分支开发新需求，突然产品经理跑过来说线上有bug，必须马上修复。而此时你的功能开发到一半，于是你急忙想切到 master 分支，然后你就会看到以下报错：</p>
<p>因为当前有文件更改了，需要提交commit保持工作区干净才能切分支</p>
<p>使用git stash代码就被存起来了</p>
<p>当你修复完线上问题，切回 feature 分支，想恢复代码也只需要：git stash apply</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">相关的命令</span><br><span class="line"># 保存当前未commit的代码</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"># 保存当前未commit的代码并添加备注</span><br><span class="line">git stash save "备注的内容"</span><br><span class="line"></span><br><span class="line"># 列出stash的所有记录</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"># 删除stash的所有记录</span><br><span class="line">git stash clear</span><br><span class="line"></span><br><span class="line"># 应用最近一次的stash</span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"># 应用最近一次的stash，随后删除该记录</span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"># 删除最近的一次stash</span><br><span class="line">git stash drop</span><br></pre></td></tr></tbody></table></figure>

<h2 id="git-reset-–soft的使用"><a href="#git-reset-–soft的使用" class="headerlink" title="git reset –soft的使用"></a>git reset –soft的使用</h2><p>应用场景1：有时候手滑不小心把不该提交的内容 commit 了，这时想改回来，只能再 commit 一次，又多一条“黑历史”。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 恢复最近一次 commit</span><br><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></tbody></table></figure>

<p>reset –soft 相当于后悔药，给你重新改过的机会。对于上面的场景，就可以再次修改重新提交，保持干净的 commit 记录</p>
<h1 id="二、电脑同时配置github与公司内部使用的gitlab"><a href="#二、电脑同时配置github与公司内部使用的gitlab" class="headerlink" title="二、电脑同时配置github与公司内部使用的gitlab"></a>二、电脑同时配置github与公司内部使用的gitlab</h1><p>下载git</p>
<p>生成对应的gitlab和github的公秘钥 ssh-keygen -t rsa -C “你的gitlab邮箱” -f ~/.ssh/id_rsa_gitlab ssh-keygen -t rsa -C “注册 github 账户的邮箱”</p>
<p>这样你会在.ssh文件夹(.ssh在哪具体百度去)，找到四个文件</p>
<p>这四个文件分别对应gitlab和github的公私钥，分别将gitlab和github的公钥配置到github和你公司的gitlab的ssh上</p>
<p>在.ssh目录下创建一个config文件，写入以下内容</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User zhangyao</span><br><span class="line">IdentityFile ~/.ssh/github_rsa </span><br><span class="line"></span><br><span class="line">Host hcgit.hengchang6.com</span><br><span class="line">HostName gitlab.com</span><br><span class="line">User zhangyao</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></tbody></table></figure>

<p>测试连接是否成功</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ssh -T git@gitlab</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"># Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"># 出现上边这句，表示链接成功</span><br></pre></td></tr></tbody></table></figure>

<p><font color="#478fd2">参考文章：</font><a href="https://blog.csdn.net/jueji1998/article/details/103815585">电脑同时配置github与公司内部使用的gitlab</a></p>
<h1 id="本地已有项目如何上传到github上"><a href="#本地已有项目如何上传到github上" class="headerlink" title="本地已有项目如何上传到github上"></a>本地已有项目如何上传到github上</h1><p>不和你多bb了,自己看：<a href="https://blog.csdn.net/weixin_44370837/article/details/121565864">本地已有项目如何上传到github上_前端学狗的博客-CSDN博客</a></p>
<h1 id="git-冲突相关"><a href="#git-冲突相关" class="headerlink" title="git 冲突相关"></a>git 冲突相关</h1><p><strong>#预防发生冲突的方法：在每次push前git pull一下，保证本地代码都是最新的。</strong></p>
<p><strong>#冲突解决方法：</strong></p>
<p>第一种冲突：在Git push的时候提示冲突了。</p>
<p>这种解决方法可以使用    git stash</p>
<p>保存本地代码，然后拉取最新的远程分支代码</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git fetch --all   //只是下载远程内容，不做任何合并  </span><br><span class="line">git reset --hard origin/master    //把HEAD指向刚下载的最新版本</span><br><span class="line">再使用git stash apply应用最近存储，重新push即可。</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>前端随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>前端路由随笔</title>
    <url>/2022/09/29/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、什么是路由？"><a href="#一、什么是路由？" class="headerlink" title="一、什么是路由？"></a>一、什么是路由？</h1><p>路由的概念起源于服务端，在以前前后端不分离的时候，由后端来控制路由，当接收到客户端发来的   <code>HTTP</code> 请求，就会根据所请求的相应 <code>URL</code>，来找到相应的映射函数，然后执行该函数，并将函数的返回值发送给客户端。对于最简单的静态资源服务器，可以认为，所有 <code>URL</code> 的映射函数就是一个文件读取操作。对于动态资源，映射函数可能是一个数据库读取操作，也可能是进行一些数据的处理等等。然后根据这些读取的数据，在服务器端就使用相应的模板来对页面进行渲染后，再返回渲染完毕的页面。它的好处与缺点非常明显：</p>
<ul>
<li><p>好处：安全性好，<code>SEO</code> 好；</p>
</li>
<li><p>缺点：加大服务器的压力，不利于用户体验，代码冗合不好维护；</p>
</li>
</ul>
<p>也正是由于后端路由还存在着自己的不足，前端路由才有了自己的发展空间。对于前端路由来说，路由的映射函数通常是进行一些 <code>DOM</code> 的显示和隐藏操作。这样，当访问不同的路径的时候，会显示不同的页面组件。前端路由主要有以下两种实现方案：</p>
<ul>
<li><code>Hash</code></li>
<li><code>History</code><h1 id="二、前端路由Hash模式"><a href="#二、前端路由Hash模式" class="headerlink" title="二、前端路由Hash模式"></a>二、前端路由Hash模式</h1></li>
</ul>
<p>一个URL是由很多部分组成，包括协议、域名、路径、query、hash等，早期的前端路由的实现就是基于location.hash来实现的。其实现原理也很简单，location.hash的值就是URL中#后面的内容。例如：<a href="https://www.wdnmd.com/#666,%E5%AE%83%E7%9A%84location.hash='#666'">https://www.WDNMD.com#666,它的location.hash='#666'</a></p>
<h2 id="Hash模式的特性："><a href="#Hash模式的特性：" class="headerlink" title="Hash模式的特性："></a>Hash模式的特性：</h2><ol>
<li><p>URL中hash值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash部分不会被发送。</p>
</li>
<li><p>hash值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash的切换。</p>
</li>
<li><p>我们可以使用hashchange事件来监听hash的变化。(a标签和对loaction.hash进行赋值等等)</p>
<p>通过上面的了解，我们大概知道这些</p>
<ul>
<li><p>hash模式所有的工作都是在前端完成的，不需要后端服务的配合</p>
</li>
<li><p>hash模式的实现方式就是通过监听URL中hash部分的变化，从而做出对应的渲染逻辑</p>
</li>
<li><p>hash模式下，URL中会带有#，看起来不太美观</p>
<p>因此Hash模式还是有些小小的不足，History API也就出现了</p>
</li>
</ul>
</li>
</ol>
<h1 id="三、前端路由History-API模式"><a href="#三、前端路由History-API模式" class="headerlink" title="三、前端路由History API模式"></a>三、前端路由History API模式</h1><p>history路由模式的实现，是要归功于HTML5提供的一个history全局对象，可以将它理解为其中包含了关于我们访问网页（历史会话）的一些信息。window.history 属性指向 History 对象，它表示当前窗口的浏览历史。当发生改变时，只会改变页面的路径，不会刷新页面。 History 对象保存了当前窗口访问过的所有页面网址。通过 history.length 可以得出当前窗口一共访问过几个网址。 由于安全原因，浏览器不允许脚本读取这些地址，但是允许在地址之间导航。 浏览器工具栏的“前进”和“后退”按钮，其实就是对 History 对象进行操作。</p>
<p>同时它还暴露了一些有用的方法，比如：</p>
<ul>
<li>window.history.go 可以跳转到浏览器会话历史中的指定的某一个记录页</li>
<li>window.history.forward 指向浏览器会话历史中的下一页，跟浏览器的前进按钮相同</li>
<li>window.history.back 返回浏览器会话历史中的上一页，跟浏览器的回退按钮功能相同</li>
<li>window.history.pushState 可以将给定的数据压入到浏览器会话历史栈中</li>
<li>window.history.replaceState 将当前的会话页面的url替换成指定的数据</li>
</ul>
<p>而history路由的实现，主要就是依靠于pushState与replaceState实现的</p>
<p><font color="#478fd2">参考文章：</font></p>
<p><a href="https://juejin.cn/post/6844903906024095751">什么是路由？</a></p>
<p><a href="https://icode.best/i/13730847328933">vue路由模式及 history 模式下服务端配置</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>路由</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(四)——关于我页面搭建</title>
    <url>/2022/09/28/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E5%9B%9B)%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E6%88%91%E9%A1%B5%E9%9D%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<html><head></head><body><h1 id="关于我页面搭建"><a href="#关于我页面搭建" class="headerlink" title="关于我页面搭建"></a>关于我页面搭建</h1><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>都是开始整关于自己页面了，肯定需要把与自己相关的展示出来，例如你的github，gitee，掘金，csdn等等。当然，这里建议把Hexo和你使用的相关主题的链接也展示一下，毕竟，使用了别人开源的东西，多少要表示一下，哈哈。下面我的具体操作：</p>
<blockquote>
<p>在根目录下的source新建about文件夹，about=&gt;index.md,写入如下图的内容，其中type: ‘friends’ 和layout: ‘friends’是ayer主题原作者封装好的友情链接布局及操作，当然在此之前需要在themes=&gt;ayer=&gt;_config.yml的侧边栏菜单配置menu下配置   关于我: /about</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220928181752870.png"></p>
<p>链接相关配置也是在themes=&gt;ayer=&gt;_config.yml下配置，找到friends_link，图片地址和github链接填自己的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 友情链接</span><br><span class="line">friends_link:</span><br><span class="line">  DarknessZY:</span><br><span class="line">    url: https://github.com/DarknessZY</span><br><span class="line">    img: /images/github.png</span><br><span class="line">  耀耀切克闹灬:</span><br><span class="line">    url: https://juejin.cn/user/1781681116679854/columns</span><br><span class="line">    img: /images/juejin.png</span><br><span class="line">  Hexo官网:</span><br><span class="line">    url: https://hexo.io</span><br><span class="line">    img: /images/hexo.png</span><br><span class="line">  Ayer主题: #网站名称</span><br><span class="line">    #网站地址</span><br><span class="line">    url: https://github.com/Shen-Yu/hexo-theme-ayer</span><br><span class="line">    #网站图片(可忽略不写)</span><br><span class="line">    img: /images/ayer.png</span><br></pre></td></tr></tbody></table></figure>

<p>然后执行hexo命令，页面上就显示出来了：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0677d7cf6a9e471986f05d8becb63497~tplv-k3u1fbpfcp-watermark.image" alt="1673512329931.png"></p>
<h2 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h2><p>这块不能想之前那样直接写markdown就行了，需要自己写页面了，例如我的就是：找到ayer主题下的原作者写的友情链接的封装，themes=&gt;ayer=&gt;layout=&gt;_partial=&gt;friends.ejs,当然我的页面随便画画的，自己看着舒服就行了，最下面两个img标签，放的是收款码，有钱的捧个钱场，具体代码和效果如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;section class="outer"&gt;</span><br><span class="line">    &lt;% if(theme.friends_link &amp;&amp; theme.friends_link.length != 0){ %&gt;</span><br><span class="line">    &lt;h1 class="page-type-title"&gt;关于俺！&lt;/h1&gt;</span><br><span class="line">     &lt;!-- 打赏 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p style="font-size: 25px;font-weight: bolder;color: #dee1e6;"&gt;秋梨膏!请我杯喝茶怎么样!&lt;/p&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id="reword-out"&gt;</span><br><span class="line">        &lt;div id="reward-btn"&gt;</span><br><span class="line">          &lt;%= __('post.reward') %&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 介绍 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p style="font-size: 25px;font-weight: bolder;color: #dee1e6;"&gt; 一位正在北漂的菜鸡程序员&lt;/p&gt; </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span style="color: red;"&gt;&nbsp;姓名：张耀&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt; </span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span style="color: blue;"&gt; QQ：2498652509&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;有志同道合的小伙伴们可以加我qq，验证消息填'博客'+'你的姓名'，我就会通过！</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span style="color:greenyellow;"&gt;现居地：北京朝阳&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;  </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span style="color:orange;"&gt;家乡：湖北汉川&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;小县城一个，装满了故事，我有故事，你有酒吗？</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">        &lt;/div&gt;  </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 链接 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p style="font-size: 25px;font-weight: bolder;color: #dee1e6;"&gt; 点击进去看看吧!&lt;/p&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul id="friends_link"&gt;</span><br><span class="line">        &lt;% for (var i in theme.friends_link){ %&gt;</span><br><span class="line">        &lt;li class="friends_li"&gt;</span><br><span class="line">            &lt;a href="&lt;%- url_for(theme.friends_link[i].url) %&gt;" target="_blank" class="search-title"</span><br><span class="line">                &lt;% if (theme.friends_link[i].description){ %&gt;title="&lt;%= theme.friends_link[i].description %&gt;" &lt;% } %&gt;&gt;</span><br><span class="line">                &lt;% if (theme.friends_link[i].img){ %&gt;</span><br><span class="line">                &lt;img src="&lt;%- url_for(theme.friends_link[i].img) %&gt;"&gt;</span><br><span class="line">                &lt;% } else { %&gt;</span><br><span class="line">                &lt;i class="ri-user-fill"&gt;&lt;/i&gt;</span><br><span class="line">                &lt;% } %&gt;</span><br><span class="line">                &lt;%= i %&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;% } %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;%}%&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></tbody></table></figure>
<p> 具体页面如下：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/105de2b32abf4e6cb882ace37923faa7~tplv-k3u1fbpfcp-watermark.image" alt="1673512358047.png"></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo框架</tag>
      </tags>
  </entry>
  <entry>
    <title>前端兼容性问题</title>
    <url>/2022/09/26/border%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、CSS样式兼容"><a href="#一、CSS样式兼容" class="headerlink" title="一、CSS样式兼容"></a>一、CSS样式兼容</h1><h2 id="1-border移动端兼容"><a href="#1-border移动端兼容" class="headerlink" title="1.border移动端兼容"></a>1.border移动端兼容</h2><p>box-shadow， border等不明原因被遮挡的问题；小于1px的边框在部分机型显示不全 或 完全渲染不出来的问题，这个是在工作中UI走查，查出来的，刚开始我还不知道为什么，还是经验太浅了，哈哈！</p>
<h3 id="方案一-transform-rotateZ-360deg"><a href="#方案一-transform-rotateZ-360deg" class="headerlink" title="方案一 transform rotateZ(360deg)"></a>方案一 transform rotateZ(360deg)</h3><p>此方法也能解决 box-shadow， border等不明原因被遮挡的问题</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">border: 0.5px solid #000;</span><br><span class="line">border-radius: 0.5px;</span><br><span class="line"></span><br><span class="line">// 解决ios边框显示一半的问题</span><br><span class="line">transform: rotateZ(360deg);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="方案二-和UI沟通，尽量避免使用0-5px的边，线（推荐）"><a href="#方案二-和UI沟通，尽量避免使用0-5px的边，线（推荐）" class="headerlink" title="方案二 和UI沟通，尽量避免使用0.5px的边，线（推荐）"></a>方案二 和UI沟通，尽量避免使用0.5px的边，线（推荐）</h3><p>0.5px的边线在移动端渲染还有一些未知的问题，建议尽量不要使用0.5px的边线</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// iphone XS 把0.5px的dashed 虚线  渲染成了 border-bottom 0.5px dotted #C4C4C9</span><br><span class="line">border-bottom: 0.5px dashed #C4C4C9;</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>前端兼容性问题</category>
      </categories>
      <tags>
        <tag>前端兼容</tag>
      </tags>
  </entry>
  <entry>
    <title>npm随笔</title>
    <url>/2022/09/26/npm%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、npm-安装中的-i、-g、–save、–save-dev、-D、-S的区别"><a href="#一、npm-安装中的-i、-g、–save、–save-dev、-D、-S的区别" class="headerlink" title="一、npm 安装中的 i、-g、–save、–save-dev、-D、-S的区别"></a>一、npm 安装中的 i、-g、–save、–save-dev、-D、-S的区别</h1><h2 id="基本说明："><a href="#基本说明：" class="headerlink" title="基本说明："></a>基本说明：</h2><ul>
<li><strong><code>i</code></strong> 是 <strong><code>install</code></strong> 的简写</li>
<li><strong><code>-g</code></strong> 是全局安装，不带 <strong><code>-g</code></strong> 会安装在个人文件夹</li>
<li><strong><code>-S</code></strong> 是 <strong><code>--save</code></strong> 的简写，安装包信息会写入 <strong><code>dependencies</code></strong> 中</li>
<li><strong><code>-D</code></strong> 是 <strong><code>--save-dev</code></strong> 的简写，安装包写入 <strong><code>devDependencies</code></strong> 中</li>
</ul>
<h2 id="dependencies-与-devDependencies："><a href="#dependencies-与-devDependencies：" class="headerlink" title="dependencies 与 devDependencies："></a>dependencies 与 devDependencies：</h2><ul>
<li><p><strong><code>dependencies</code></strong> 生产阶段的依赖,也就是项目运行时的依赖</p>
</li>
<li><p><strong><code>devDependencies</code></strong> 开发阶段的依赖，就是我们在开发过程中需要的依赖，只在开发阶段起作用的</p>
<p>例如：你写 ES6 代码，需要 babel 转换成 es5 ，转换完成后，我们只需要转换后的代码，上线的时候，直接把转换后的代码部署到生产环境，不需要 bebal 了，生产环境不需要。这就可以安装到 devDependencies ，再比如说代码提示工具，也可以安装到 devDependencies，如果你用了 <code>Element-UI</code>，由于发布到生产后还是依赖 <code>Element-UI</code>，这就可以安装到 <strong><code>dependencies</code></strong></p>
</li>
</ul>
<h1 id="二、全局安装和本地安装"><a href="#二、全局安装和本地安装" class="headerlink" title="二、全局安装和本地安装"></a>二、全局安装和本地安装</h1><h2 id="全局安装："><a href="#全局安装：" class="headerlink" title="全局安装："></a>全局安装：</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install &lt;pageName&gt; -g//（这里-g是-global的简写）</span><br></pre></td></tr></tbody></table></figure>

<p>通过上面的命令行（带-g修饰符）安装某个包，就叫全局安装。通常全局包安装在node目录下的node_modules文件夹。可以通过执行下面几条命令查看node、npm的安装目录和全局包的安装目录。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">which node   // 查看node的安装目录</span><br><span class="line">which npm   // 查看npm的安装目录</span><br><span class="line">npm root -g // 查看全局包的安装目录</span><br><span class="line">npm list -g --depth 0 //查看全局安装过的</span><br></pre></td></tr></tbody></table></figure>

<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装:"></a>本地安装:</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install &lt;pageName&gt; (后面可以加几种修饰符，主要有两种--save-dev和--save)</span><br></pre></td></tr></tbody></table></figure>

<p>通过上面的命令行安装某个包，就叫本地安装。包安装在你当前项目文件夹下的node_modules文件夹中。</p>
<h3 id="全局安装的作用"><a href="#全局安装的作用" class="headerlink" title="全局安装的作用:"></a>全局安装的作用:</h3><p>全局安装的包可提供直接执行的命令(例：gulp -h可以查看gulp定义了什么命令)。 比如gulp全局安装后，可以在命令行上直接执行gulp -v、gulp -h等（原理：全局安装的gulp会将其package.json中的bin命令注入到了全局环境，使得你可以全局执行：gulp xxx命令，这另一个话题了，不深入）。倘若只在本地安装了gulp，未在全局安装gulp，直接执行这些命令会报错。你想要执行相应的命令则可能需要例如：node ./node_modules/gulp/bin/gulp.js -v(查看版本) 这样用一大串命令来执行。因此全局安装就发挥到他的好处了，一个gulp -v就搞定</p>
<p>当然，不是每个包都必须要全局安装的，一般在项目中需要用到该包定义的命令才需要全局安装。比如gulp <taskname>执行gulp任务…等，所以是否需要全局安装取决于我们如何使用这个包。全局安装的就像全局变量有点粗糙，但在某些情况下也是必要的，全局包很重要，但如果不需要，最好避免使用。</taskname></p>
<h2 id="可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？"><a href="#可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？" class="headerlink" title="可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？"></a>可以全局安装，那么直接全局安装到处使用就行了，干嘛还需要本地安装？</h2><ol>
<li>如果只是全局安装了而没本地安装，就得require(‘<pagepath>‘) 例：引入一个全局的包可能就是requirt(‘/usr/local/….’)通过全局包的路径引入，这样显然十分的不灵活。如果安装了本地包，那么就<strong>可以直接require(‘<pagename>‘)引入使用。</pagename></strong></pagepath></li>
<li>一个包通常会在不同的项目上会重复用到，如果只全局安装，那么当某个项目需要该包更新版本时，更新后可能就会影响到其他同样引用该包的项目，因此本地安装可以更灵活地在不同的项目使用不同版本的包，并避免全局包污染的问题。</li>
</ol>
<p>一个经验法则：要用到该包的命令执行任务的就需要全局安装，要通过require引入使用的就需要本地安装（ 但实际开发过程中，我们也不怎么需要考虑某个包是全局安装还是本地安装，因为这一点在该包的官网上一般会明确指出，以上是为了理解全局安装和本地安装）。</p>
<p>参考：<a href="https://segmentfault.com/a/1190000017787636?utm_source=tag-newest">node.js - npm(你怕吗) 全局安装与本地安装、开发依赖和生产依赖_个人文章 - SegmentFault 思否</a></p>
</body></html>]]></content>
      <categories>
        <category>前端随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(三)——博客在多台终端同步管理</title>
    <url>/2022/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%B8%89)%E2%80%94%E2%80%94%E5%8D%9A%E5%AE%A2%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>我们利用 Hexo 框架在本地搭建了一个精美的博客，可是只能本地访问，要想发布到互联网上，还需要将它部署在网站上。博客的功能只要能阅读文章就够了，因此可以考虑将其部署在提供静态网页托管服务的网站上，许多平台都提供了静态网页托管服务，其中最方便的当然是 GitHub Pages，只需要注册一个账号就可以使用。GitHub Pages的服务器毕竟在国外，如果觉得访问太慢，也可以选择国内功能相似的 Gitee Pages。本篇文章介绍怎样利用 GitHub 提供的免费静态网页托管服务 GitHub Pages 建站。后面我应该还是会选择部署在服务</p>
</blockquote>
<h2 id="一、GitHub-Pages"><a href="#一、GitHub-Pages" class="headerlink" title="一、GitHub Pages"></a>一、GitHub Pages</h2><p>GitHub 是世界上最流行的软件源代码托管服务平台，为什么要提供网页托管服务呢？</p>
<p>这是因为一个项目的主页如果只有源码，对新接触的人很不友好，不知从何处下手。虽然已经有了 readme.md 文件，但毕竟不如一个直观的网页来的直接。于是 GitHub 就设计了 Pages 功能，允许用户设计一个图文并茂的网页作为项目首页。</p>
<p>虽然 GitHub Pages 的初衷是提供自定义的项目首页，但是它的玩法不止这一个。因此许多博主都用这个功能来搭建自己的博客，因为它实在是太太方便了。</p>
<p>去GitHub Pages 官网&nbsp;<a href="https://pages.github.com/">pages.github</a>&nbsp;，拉到最后，可以看到官方也推荐使用 GitHub Pages 搭建博客，并且提供了示例教程。</p>
<h2 id="二、GitHub-Pages-准备"><a href="#二、GitHub-Pages-准备" class="headerlink" title="二、GitHub Pages 准备"></a>二、GitHub Pages 准备</h2><p>前提是你拥有一个gitHub账号</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55c5bbc9dd884b1d93177eb4027589dd~tplv-k3u1fbpfcp-watermark.image" alt="1673508844010.png"><br>由于每个 GitHub 账户只能建立一个 GitHub Pages 页面，所以 Repository name 必须填<code>&lt;你的用户名&gt;.github.io</code>，否则就会建立一个普通仓库，GitHub Pages 功能不会生效。比如用户名是<code>jacksparrow</code>，Repository name 这里就填<code>jacksparrow.github.io</code>，不知道用户名是哪个，可以点击页面右上角头像，看到第一行“Signed in as&nbsp;<code>xxx</code>”字样，&nbsp;<code>xxx</code>即为这里的用户名。</p>
<p>Description 填写仓库描述，比如&nbsp;<code>jacksparrow's blog</code>等，可不填。</p>
<p>注意勾选&nbsp;<code>Public</code>&nbsp;，否则 GitHub Pages 功能不会生效。建议勾选&nbsp;<code>Add a README file</code>，会自动生成一个&nbsp;<code>readme.md</code>文件。</p>
<p>最后点击<code>Create repository</code>创建仓库。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eac6665e8b8940889f29256f59320b31~tplv-k3u1fbpfcp-watermark.image" alt="1673509175671.png"><br>我们可以通过输入网址<code>https://&lt;你的用户名&gt;.github.io</code>，来访问到这个仓库里面的内容。</p>
<h2 id="三、GitHub-Pages-发布"><a href="#三、GitHub-Pages-发布" class="headerlink" title="三、GitHub Pages 发布"></a>三、GitHub Pages 发布</h2><p>我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。当然，对于 Hexo 来说，提交部署只需要几条命令。</p>
<h2 id="四、Hexo-Git-Github博客在多台终端同步管理"><a href="#四、Hexo-Git-Github博客在多台终端同步管理" class="headerlink" title="四、Hexo+Git+Github博客在多台终端同步管理"></a>四、<a href="https://so.csdn.net/so/search?q=Hexo&amp;spm=1001.2101.3001.7020">Hexo</a>+Git+Github博客在多台终端同步管理</h2><p>此方法利用Git管理Hexo产生的文件，实现在不同的电脑上同步（<a href="https://so.csdn.net/so/search?q=Github&amp;spm=1001.2101.3001.7020">Github</a>）所需的文件，也可以正常的在不同的Hexo环境里进行相应操作，只要在做完之后同步到Github的仓库里即可。下面具体来说说：</p>
<p>网上基本上都是这个思路：</p>
<h3 id="Github-分支管理Hexo环境目录"><a href="#Github-分支管理Hexo环境目录" class="headerlink" title="Github 分支管理Hexo环境目录"></a>Github 分支管理Hexo环境目录</h3><p>主要是通过维护两条git分支来实现，第一个分支是 Gihub 上默认的 master 分支，用于存放发布的博文的静态页面；另外再新建一个分支，比如命名为 Hexo ，通过此分支存放主题、原始的博客文件等等，这些文件才是不同电脑需要同步的文件；当每次修改主题或者新增博文后，先将修改的主题文件（在themes文件夹下）或者新增博客（在source文件夹下），同步到远程的 Hexo 分支，然后在通过 hexo g -d命令发布博文，也就是将新增的博文的静态页面同步到 master 分支。这样通过不同的分支管理不同的文件，实现了多台电脑同步更新博文的功能。！</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">├── .<span class="property">gitignore</span></span><br><span class="line">├── .<span class="property">deploy_git</span></span><br><span class="line">|   ├── ...</span><br><span class="line">|   ├── ...</span><br><span class="line">|   └── ...</span><br><span class="line">├── node_modules</span><br><span class="line">├── public</span><br><span class="line">├── package-lock.<span class="property">json</span></span><br><span class="line">├── db.<span class="property">json</span></span><br><span class="line">├── _config.<span class="property">yml</span></span><br><span class="line">├── package.<span class="property">json</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>其中 .deploy_git、public 两个文件夹下存放的是博客文章的静态页面，通过对比 Github 上博客仓库的master分支可以看到master分支下面的文件结构和 .deploy_git 文件夹下的文件是一致的，这个应该可以判断通过 hexo g -d 发布到 Github 的内容就是 .deploy_git 文件夹下面的文件。其余的文件夹和文件即是Hexo的主题文件、原始的博客文件等，刚在上文提到的Hexo分支，存的即时这些文件</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>在PC b，</p>
<h4 id="初始化分支"><a href="#初始化分支" class="headerlink" title="初始化分支"></a>初始化分支</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git clone 仓库地址（自己的仓库地址）</span><br></pre></td></tr></tbody></table></figure>

<p>将仓库文件拉取到本地，生成的文件名为 username.github.io；进入username.github.io文件夹，除了 <em>.git</em> 文件夹以外，其他文件全部删除；同时添加.gitnore</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line"># 添加git忽略</span><br></pre></td></tr></tbody></table></figure>

<p>提交本次修改</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m “提交说明”</span><br><span class="line">git push origin Hexo</span><br></pre></td></tr></tbody></table></figure>

<h4 id="同步分支（PC2上面操作）"><a href="#同步分支（PC2上面操作）" class="headerlink" title="同步分支（PC2上面操作）"></a>同步分支（PC2上面操作）</h4><p>git pull拉取远程hexo分支的代码</p>
<p>但是暂时不要提交，先安装hexo环境去</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装 hexo 框架</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 安装 hexo 依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>

<p>然后再执行</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure>

<p>这时你文件夹下多出了db.json，node_modules，public，还会多一个.deploy_git（hexo打包后上传到master主分支的静态博客文件夹）因为我用了yarn，所以会有yarn.lock，这个无关紧要，这时git提交上去就行，最后的文件目录如这样</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2747fbb084084f968bb07799807a7058~tplv-k3u1fbpfcp-watermark.image" alt="1673511752083.png"></p>
<p><strong>文章内更新点东西，加一句话什么的，再去执行hexo的命令</strong></p>
<p>过会再去打开https://你的用户名.github.io，更新了就代表没问题了</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/steven_zdg988/article/details/111240905">Hexo+Git+Github博客在多台终端同步管理_HackerEric的博客-CSDN博客</a></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>同步管理</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(二)——hexo主题搭建</title>
    <url>/2022/09/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%BA%8C)%E2%80%94%E2%80%94hexo%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、更换-Hexo-博客主题"><a href="#一、更换-Hexo-博客主题" class="headerlink" title="一、更换 Hexo 博客主题"></a>一、更换 Hexo 博客主题</h1><h2 id="1-如何找主题"><a href="#1-如何找主题" class="headerlink" title="1. 如何找主题"></a>1. 如何找主题</h2><p>默认主题非常简洁，适合大佬使用，像我等菜鸟，自己不会做却又想使用花里胡哨的主题，就要学会找主题了。</p>
<p>下面是我寻找主题的三个方法。</p>
<ul>
<li><p><strong>官方网站</strong></p>
<p>Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。</p>
<p>在 Hexo 官网点击“主题”，或者直接进入 Hexo 主题页：<a href="https://hexo.io/themes/">themes</a></p>
<p>通过上方的搜索框可以根据标签搜索。</p>
</li>
</ul>
<h2 id="2-github开源Hexo-博客主题"><a href="#2-github开源Hexo-博客主题" class="headerlink" title="2.github开源Hexo 博客主题"></a>2.github开源Hexo 博客主题</h2><p>大多数流行的主题都在 GitHub 托管开源了，我们可以直接去 GitHub 下载。</p>
<p>在 Github 官网搜索<code>hexo-theme</code>，选择<code>All GitHub</code>，或者直接进入搜索页：<a href="https://github.com/search?q=hexo-theme">search?q=hexo-theme</a></p>
<p>市面上使用比较多的主题：</p>
<ul>
<li><strong>Next</strong></li>
</ul>
<p>Demo 示例：<a href="https://theme-next.js.org/">NexT</a> | <a href="https://dandyxu.me/">Dandy</a> | <a href="https://raincal.com/">Raincal</a></p>
<p>GitHub 主页：<a href="https://github.com/iissnan/hexo-theme-next">hexo-theme-next</a></p>
<p>这个是 Hexo 最流行的主题，GitHub 上 15.5k stars，在 Hexo 主题中排行第一。</p>
<ul>
<li><strong>matery</strong></li>
</ul>
<p>Demo 示例：<a href="http://blinkfox.com/">闪烁之狐</a></p>
<p>GitHub 主页：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p>
<ul>
<li><strong>butterfly</strong></li>
</ul>
<p>Demo 示例： <a href="https://butterfly.js.org/">Butterfly</a> | <a href="https://jerryc.me/">JerryC</a></p>
<p>GitHub 主页：<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p>
<p>本菜鸟使用的主题就是以简约为主：</p>
<ul>
<li><strong>ayer</strong></li>
</ul>
<p>Demo 示例：<a href="https://shen-yu.gitee.io/">岛</a></p>
<p>GitHub 主页：<a href="https://github.com/Shen-Yu/hexo-theme-ayer">hexo-theme-ayer</a></p>
<h2 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3.更换主题"></a>3.更换主题</h2><p>以 <strong>ayer</strong> 主题为例。</p>
<p>在 vs code中根目录下，右键新建终端，执行下面命令：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-theme-ayer -S</span><br><span class="line">#如果hexo &lt; 5.0</span><br><span class="line"># 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git</span><br><span class="line">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></tbody></table></figure>
<p>此时打开博客根目录下的 themes 文件夹可以看到多了个 ayer 文件夹。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14089c4ea9a040c9b675ad91230683c8~tplv-k3u1fbpfcp-watermark.image" alt="1673503194683.png"></p>
<p>然后用记事本打开博客根目录下的 _config.yml (<code>D:\MyBlog_config.yml</code>)，找到<code>theme</code>标签，默认值是<code>landscape</code>主题，把它改为要更换的主题名字<code>ayer</code>，然后执行启动命令。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"># 清理 &amp;&amp; 生成 &amp;&amp; 启动</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b169bc466154832b63b76d2170de1b6~tplv-k3u1fbpfcp-watermark.image" alt="1673503295276.png"></p>
<p>这1时再到浏览器打开网址<code>http://localhost:3000</code>，可以看到我们的博客已经换上一款非常精美的主题。</p>
<h1 id="二-本地写博客"><a href="#二-本地写博客" class="headerlink" title="二.本地写博客"></a>二.本地写博客</h1><p><strong>利用Markdown语法的软件写博客，本地试运行：</strong></p>
<p>这里推荐使用Typora或uTools的Markdown笔记功能，具体怎么使用这两款软件， 就和掘金写文章差不多，官方都有说明。其中Typora现在开始收费了，但可以去下载老版本，老版本是免费的，具体操作可以按：</p>
<p><a href="http://www.itmind.net/16468.html">Typora免费版</a></p>
<p>根据这个网址上面来操作，下载老版本的Typora，但具体还能用多久就不知道了，有钱的小伙伴可以直接去官网下载正版，本人老穷b了。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a1d6ef57b314c3dae17ac224cc8b66d~tplv-k3u1fbpfcp-watermark.image" alt="5CBFAEB737CB3B14DDC82E5F0B6A357B.gif"></p>
<p>把写好的文章复制到根目录下的source=&gt;_posts</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2782defc88e84650bb394e8ff971f37d~tplv-k3u1fbpfcp-watermark.image" alt="1673503721548.png"><br>然后执行命令：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></tbody></table></figure>
<p>本地看时就发现文章已经有了:</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03993c78db734feba5d08a0baf347424~tplv-k3u1fbpfcp-watermark.image" alt="1673503821935.png"></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo框架</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建博客(一)——本地搭建hexo框架</title>
    <url>/2022/09/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2(%E4%B8%80)%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、hexo框架"><a href="#一、hexo框架" class="headerlink" title="一、hexo框架"></a>一、hexo框架</h1><h2 id="1-什么是-Hexo？"><a href="#1-什么是-Hexo？" class="headerlink" title="1.什么是 Hexo？"></a>1.什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="2-安装前提"><a href="#2-安装前提" class="headerlink" title="2.安装前提"></a>2.安装前提</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a> 步骤。</p>
<p>如果您的电脑中尚未安装所需要的程序，请自行百度按指示完成安装。</p>
<h2 id="3-安装-Hexo"><a href="#3-安装-Hexo" class="headerlink" title="3.安装 Hexo"></a>3.安装 Hexo</h2><h3 id="（1）本地安装-hexo"><a href="#（1）本地安装-hexo" class="headerlink" title="（1）本地安装 hexo"></a>（1）本地安装 hexo</h3><p>首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。取名 MyBlog。</p>
<p>使用VS code 打开该文件夹，右键打开终端</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 安装 hexo 框架</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 初始化文件夹</span><br><span class="line">hexo init</span><br><span class="line"># 安装 hexo 依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>

<p>命令很好理解，第一行安装 hexo 模块，<code>-g</code>表示安装全局模块；第二行是 hexo 初始化，会用 <code>git clone</code>命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。</p>
<h3 id="（2）可能遇到的问题"><a href="#（2）可能遇到的问题" class="headerlink" title="（2）可能遇到的问题"></a>（2）可能遇到的问题</h3><ul>
<li><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></li>
</ul>
<p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是<code>https://registry.npmjs.org/</code>。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 查看 npm 源</span><br><span class="line">npm config get registry</span><br><span class="line"># 临时修改 npm 源安装 hexo (仅本条命令有效)</span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class="line"># 或者永久修改 npm 源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>

<p>如果是公司内网使用代理访问外网 (比如<code>ping registry.npmjs.org</code> <code>ping registry.npm.taobao.org</code>都不通)，可以尝试给 npm 配置代理解决，再重新执行安装命令。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 设置代理</span><br><span class="line">npm config set proxy http://serverip:port</span><br><span class="line">npm confit set https-proxy http:/serverip:port</span><br><span class="line"># 设置带用户名密码的代理</span><br><span class="line">npm config set proxy http://username:password@serverip:port</span><br><span class="line">npm confit set https-proxy http://username:password@serverip:port</span><br><span class="line"># 取消代理</span><br><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><strong><code>hexo init</code>命令执行卡住，或者报错连接不上</strong></li>
</ul>
<p>同上设置代理</p>
<h2 id="4-运行本地博客"><a href="#4-运行本地博客" class="headerlink" title="4.运行本地博客"></a>4.运行本地博客</h2><p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。</p>
<p>在vs code 的终端中运行命令</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 生成静态网站</span><br><span class="line">hexo g</span><br><span class="line"># 启动服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure>

<p>点击运行成功后的出来的地址</p>
<p>自此一个简单的本地博客诞生了</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19b093769be04ecf8581612935219aa3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
</body></html>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo框架</tag>
      </tags>
  </entry>
  <entry>
    <title>TS基础</title>
    <url>/2022/09/22/Typescript/</url>
    <content><![CDATA[<html><head></head><body><h3 id="一、基础类型"><a href="#一、基础类型" class="headerlink" title="一、基础类型"></a>一、基础类型</h3><p>1.布尔类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let bool: boolean;</span><br><span class="line">bool = false;</span><br><span class="line">bool = 123; // Error：不能将类型“number”分配给类型“boolean”。</span><br></pre></td></tr></tbody></table></figure>

<p>2.数值类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let num：number = 123</span><br></pre></td></tr></tbody></table></figure>

<p>3.字符串类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let str: string;</span><br><span class="line">str = 'bac';</span><br><span class="line">str = `数值是${num}`;</span><br></pre></td></tr></tbody></table></figure>

<p>4.数组类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let arr1: number[];</span><br><span class="line">arr1 = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">let arr2: Array&lt;number&gt;;</span><br><span class="line">arr2 = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">let arr3: (string | number)[];</span><br><span class="line">arr3 = [1, '2', 3];</span><br></pre></td></tr></tbody></table></figure>

<p>5.元组类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let tuple: [string, number, boolean];</span><br><span class="line">tuple = ['a', 1, false]; // 必须按照上面的顺序和类型</span><br><span class="line">tuple = ['a', false, false]; // Error：不能将类型“boolean”分配给类型“number”。</span><br><span class="line">tuple = ['a', 1, false, 12]; // Error：不能将类型“[string, number, false, number]”分配给类型“[string, number, boolean]”。</span><br></pre></td></tr></tbody></table></figure>

<p>6.枚举类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">enum Roles {</span><br><span class="line">  SUPER_ADMIN, // 0</span><br><span class="line">  ADMIN, // 1</span><br><span class="line">  USER // 2</span><br><span class="line">}</span><br><span class="line">console.log(Roles.SUPER_ADMIN); // 0</span><br><span class="line">console.log(Roles[Roles.SUPER_ADMIN]); // SUPER_ADMIN</span><br></pre></td></tr></tbody></table></figure>

<p>7.any类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">let value: any;</span><br><span class="line">value = 'abc'</span><br><span class="line">value =2</span><br><span class="line">value = [1,2,3]</span><br><span class="line">let arr: any[] = [1,'a']</span><br></pre></td></tr></tbody></table></figure>

<p>8.void类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const consoleText = (text: string): void =&gt; { // 不返回内容</span><br><span class="line">  console.log(text);</span><br><span class="line">};</span><br><span class="line">let v: void;</span><br><span class="line">v = undefined;</span><br><span class="line">v = null; // tsconfig的strict需要关掉</span><br></pre></td></tr></tbody></table></figure>

<p>9.null和undefined</p>
<p>null 和 undefined 是其他类型的子类型</p>
<p>10.never类型</p>
<p>表示永远不存在的类型，抛错or死循环，返回值就是 never 类型。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const errorFunc = (message: string): never =&gt; {</span><br><span class="line">  throw new Error(message);</span><br><span class="line">};</span><br><span class="line">const infiniteFunc = (): never =&gt; {</span><br><span class="line">  while(true) {}</span><br><span class="line">};</span><br><span class="line">// let neverVariable: never</span><br><span class="line">let neverVariable = (() =&gt; {</span><br><span class="line">  while(true) {}</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure>

<p>11.对象类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">function getObject(obj: object): void {</span><br><span class="line">  console.log(obj);</span><br><span class="line">}</span><br><span class="line">getObject({ name: 'dylan' });</span><br><span class="line">getObject(123); // Error：类型“number”的参数不能赋给类型“object”的参数。</span><br></pre></td></tr></tbody></table></figure>

<p>12.类型断言</p>
<p>值 as 类型</p>
<p>或 &lt;类型&gt;值</p>
<h3 id="二、Symbol"><a href="#二、Symbol" class="headerlink" title="二、Symbol"></a>二、Symbol</h3><p>Symbol值是独一无二的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const s1 = Symbol(); // Symbol()</span><br><span class="line">const s2 = Symbol(); // Symbol()</span><br><span class="line">s1 === s2; // false</span><br></pre></td></tr></tbody></table></figure>

<p>目前来说工作上遇到的少</p>
<h3 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h3><p>我们可以使用接口来进行限制，使数据更加清晰直观</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">interface NameInfo {</span><br><span class="line">  firstName?: string;//?代表可选参数，没?不传这个值会报错</span><br><span class="line">  readonly lastName: string; //只读属性，不能更改NameInfo.lastName的值</span><br><span class="line">}</span><br><span class="line">const getFullName = ({ firstName, lastName }: NameInfo): string =&gt; {</span><br><span class="line">  return `${firstName} ${lastName}`;</span><br><span class="line">};</span><br><span class="line">getFullName({</span><br><span class="line">  firstName: 'haha',</span><br><span class="line">  lastName: 'Lv'</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>多传入参数时使用类型断言或者索引签名</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">interface Vegetable {</span><br><span class="line">  color?: string;</span><br><span class="line">  type: string;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">const getVegetables = ({ color, type }: Vegetable) =&gt; {</span><br><span class="line">  return `A ${color ? (color + ' ') : ''}${type}`;</span><br><span class="line">};</span><br><span class="line">getVegetables({ type: 'tomato', size: 2 }); // Error：类型“{ type: string; size: number; }”的参数不能赋给类型“Vegetable”的参数。</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//类型断言</span><br><span class="line">getVegetables({ type: 'tomato', size: 2 } as Vegetable);</span><br><span class="line"></span><br><span class="line">//索引签名</span><br><span class="line">interface Vegetable {</span><br><span class="line">  color?: string;</span><br><span class="line">  type: string;</span><br><span class="line">  [prop: string]: any; // 索引签名</span><br><span class="line">}</span><br><span class="line">getVegetables({ type: 'tomato', size: 2 });</span><br></pre></td></tr></tbody></table></figure>

<p>定义函数结构</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// 等同于类型别名：type AddFunc = (num1: number, num2: number) =&gt; number;</span><br><span class="line">interface AddFunc {</span><br><span class="line">  (num1: number, num2: number): number</span><br><span class="line">}</span><br><span class="line">const add: AddFunc = (n1, n2) =&gt; n1 + n2;</span><br></pre></td></tr></tbody></table></figure>

<p>索引类型</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">interface RoleDic {</span><br><span class="line">  [id: number]: string;//id这个索引只能为数值类型</span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure>

<p>接口的继承</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">interface Vegetables {</span><br><span class="line">  color: string;</span><br><span class="line">}</span><br><span class="line">interface Tomato extends Vegetables {</span><br><span class="line">  radius: number;</span><br><span class="line">}</span><br><span class="line">const tomato: Tomato = {</span><br><span class="line">  radius: 1,</span><br><span class="line">  color: 'red'</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<h3 id="四、泛型-T"><a href="#四、泛型-T" class="headerlink" title="四、泛型 T"></a>四、泛型 T</h3><p>为什么要用泛型？ 可以在函数调用时自由化传入的值和返回的值</p>
<p>使用范型约束函数类型：与之前不同的地方在于多了 T 这个泛型参数，可以理解为这个函数：传入了 T（某个类型）作为 value 的类型，返回由 T组成的数组</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//&lt;T&gt; 表示声明一个表示类型的变量，Value: T 表示声明参数是 T 类型的，后面的 : T 表示返回值也是 T 类型的</span><br><span class="line">const getArray = &lt;T&gt;(value: T, times: number = 5): T[] =&gt; {</span><br><span class="line">  return new Array(times).fill(value)</span><br><span class="line">} //如果使用any[]参数也可以任意传，但是也丢失了类型检测的功能</span><br><span class="line"></span><br><span class="line">//第一个T为string，那么value: T也该为string</span><br><span class="line">getArray&lt;string&gt;('abc').map(item =&gt; item.length); // [3, 3, 3, 3, 3]</span><br></pre></td></tr></tbody></table></figure>

<p>使用两个范型变量</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// 参数1是T类型，参数2是U类型，返回类型是元组类型 T,U组成的数组</span><br><span class="line">const getArray = &lt;T, U&gt;(param1: T, param2: U, times: number): [T, U][] =&gt; {</span><br><span class="line">  return new Array(times).fill([param1, param2]);</span><br><span class="line">};</span><br><span class="line">// 也可以明确泛型调用，不明确的话，TS会自动推导泛型类型：getArray&lt;number, string&gt;(1, 'a', 3);</span><br><span class="line">getArray(1, 'a', 3); // [[1, 'a'], [1, 'a'], [1, 'a']]</span><br></pre></td></tr></tbody></table></figure>

<br>

<h3 id="五、交叉类型"><a href="#五、交叉类型" class="headerlink" title="五、交叉类型"></a>五、交叉类型</h3><p>交叉类型就是取多个类型的并集，使用 &amp; 符号定义。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">const mergeFunc = &lt;T, U&gt;(arg1: T, arr2: U): T &amp; U =&gt; {</span><br><span class="line">  let res = {} as T &amp; U; // 使用类型断言来告诉TS这里是（T和U）的交叉类型</span><br><span class="line">  res = Object.assign(arg1, arr2);</span><br><span class="line">  return res;</span><br><span class="line">};</span><br><span class="line">mergeFunc({ a: 'a' }, { b: 'b' });</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>Web前端学习</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
