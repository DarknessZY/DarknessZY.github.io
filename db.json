{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/bg.png","path":"images/bg.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/gitee.png","path":"images/gitee.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","path":"images/hexo-tag-chart.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo.png","path":"images/hexo.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/snow2.js","path":"js/snow2.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","path":"css/fonts/remixicon.eot","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.css","path":"css/fonts/remixicon.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","path":"css/fonts/remixicon.ttf","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","path":"css/fonts/remixicon.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","path":"css/fonts/remixicon.woff","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","path":"css/fonts/remixicon.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Typescript.md","hash":"064cfe926f9b3415a14d58c9b64b4d94c54f3bc9","modified":1663825861928},{"_id":"source/_posts/hello，博客！.md","hash":"4554e3359d4a8590943dc76c38742fab423b04e5","modified":1663900261241},{"_id":"source/_posts/从零开始搭建博客(一)——本地搭建hexo框架.md","hash":"800bfd5479973bb7b5ad01ed8a770f6ae7b0f0b9","modified":1663843135600},{"_id":"source/_posts/从零开始搭建博客(二)——hexo主题搭建.md","hash":"5a17bea5a88a2351239445fa7408583d1b7a7151","modified":1663913130591},{"_id":"source/categories/index.md","hash":"6b0b16cb927cebc8b1722681b8345a5d53a3eddf","modified":1663814442138},{"_id":"source/about/index.md","hash":"548c9b638fac18ded7631cdbe28151bb5b5c2a11","modified":1663757991147},{"_id":"source/archives/index.md","hash":"c7091de529586ae2bae858323b763f996d4d0710","modified":1663838612762},{"_id":"source/tags/index.md","hash":"47ecd5cadb22dd7b1ced59690236018f2cdff1ba","modified":1663830308327},{"_id":"themes/ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1663726643849},{"_id":"themes/ayer/.gitignore","hash":"8faed9be54528620a8da662ad9f242e7305d6757","modified":1663726643852},{"_id":"themes/ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1663726643852},{"_id":"themes/ayer/.npmignore","hash":"13239db7290ce1d6dfc62fb60191a8048c6e5781","modified":1663726643852},{"_id":"themes/ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1663726643852},{"_id":"themes/ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1663726643853},{"_id":"themes/ayer/_config.yml","hash":"050af36af9b592f16d051e97a5a96e246a7446c1","modified":1663833286561},{"_id":"themes/ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1663726643854},{"_id":"themes/ayer/README.md","hash":"df98c8af4a4412483800a8f945e62ece4caa074c","modified":1663726643853},{"_id":"themes/ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1663726643870},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1663726643870},{"_id":"themes/ayer/package.json","hash":"f171e4375353a66c8b609b3bc8aece58e8b7cd01","modified":1663726643870},{"_id":"themes/ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1663726643870},{"_id":"themes/ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1663726643854},{"_id":"themes/ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1663726643854},{"_id":"themes/ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1663726643854},{"_id":"themes/ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1663726643855},{"_id":"themes/ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1663726643855},{"_id":"themes/ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1663726643855},{"_id":"themes/ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1663726643856},{"_id":"themes/ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1663726643856},{"_id":"themes/ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1663726643856},{"_id":"themes/ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1663726643856},{"_id":"themes/ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1663726643857},{"_id":"themes/ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1663726643857},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1663726643857},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1663726643857},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1663726643868},{"_id":"themes/ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1663726643868},{"_id":"themes/ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1663726643868},{"_id":"themes/ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1663726643868},{"_id":"themes/ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1663726643869},{"_id":"themes/ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1663726643869},{"_id":"themes/ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1663726643869},{"_id":"themes/ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1663726643869},{"_id":"themes/ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1663726643869},{"_id":"themes/ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1663726643873},{"_id":"themes/ayer/source/404.html","hash":"fce8d48b2534f5ba5feb3a91e43813f8f85b07d8","modified":1663726643887},{"_id":"themes/ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1663726643887},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"dd6854f6cbccf2ac8f6cb2b1cc18464ca97a433e","modified":1663832796163},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1663726643858},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1663726643859},{"_id":"themes/ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1663726643858},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"84f5c967f5019f4964711f3edd408a7503702e58","modified":1663726643859},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"9ef0ed563dd6e3277534f9601ab290b72b3dc42b","modified":1663726643859},{"_id":"themes/ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1663726643860},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1663726643860},{"_id":"themes/ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1663726643860},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1663726643860},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"1a9b8574d4341354ed00127ffb873c80ac1beee9","modified":1663726643861},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"38abac221b79d83fd8d3ec8ee0fba55ef162d148","modified":1663726643861},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"bef830bc48db44c19bfa922d8ed5f6ee1e924ea7","modified":1663726643861},{"_id":"themes/ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1663726643861},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"4d6b2bbe0d50f609a9d6e5d646d07f7ab29e8c66","modified":1663726643861},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1663726643862},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1663726643862},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1663726643867},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"ba0639363016f5badd13fefd000ef967c6a4e47b","modified":1663726643867},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1663726643874},{"_id":"themes/ayer/scripts/events/index.js","hash":"f3a5d9bda901565e3c302bcb5ed716b6d006089e","modified":1663726643873},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1663726643874},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1663726643875},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1663726643875},{"_id":"themes/ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1663726643875},{"_id":"themes/ayer/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1663726643876},{"_id":"themes/ayer/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1663726643876},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1663726643888},{"_id":"themes/ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1663726643888},{"_id":"themes/ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1663726643898},{"_id":"themes/ayer/source/dist/main.js","hash":"4338ca7a7bc35ee139016c91d4746643a3ee01c8","modified":1663726643899},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1663726643900},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1663726643901},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1663726643901},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1663726643902},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1663726643916},{"_id":"themes/ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1663726643916},{"_id":"themes/ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1663726643902},{"_id":"themes/ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1663726643916},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1663726643916},{"_id":"themes/ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1663726643917},{"_id":"themes/ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1663726643917},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1663726643918},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1663726643919},{"_id":"themes/ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1663726643919},{"_id":"themes/ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1663726643919},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1663726643920},{"_id":"themes/ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1663726643920},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1663726643921},{"_id":"themes/ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1663726643921},{"_id":"themes/ayer/source/js/snow2.js","hash":"c7906ce7c35792db5c4554a0253ab3b9fa61bc44","modified":1663832699123},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1663726643921},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1663726643877},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1663726643877},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"6e7671af612868b750f1dc195f2e7c1c34931800","modified":1663726643885},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1663726643877},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1663726643886},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1663726643878},{"_id":"themes/ayer/source-src/css/style.styl","hash":"dd5f5d0fef358ea1eba3f782458f72e13f764bba","modified":1663726643886},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1663726643886},{"_id":"themes/ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1663726643886},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1663726643862},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1663726643863},{"_id":"themes/ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1663726643862},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"55f2fafe9c6a151eeee39d1a2556742ebe89b2a2","modified":1663726643863},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1663726643863},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1663726643864},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"9f0250bc192a59a8577ea3048c8f5eef91ac10ef","modified":1663726643864},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1663726643864},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1663726643865},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1663726643864},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1663726643863},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1663726643865},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1663726643865},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1663726643865},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1663726643866},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1663726643866},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"d5b568a3554f0d6572e7b232b8a0ab3ea81a1845","modified":1663726643866},{"_id":"themes/ayer/layout/_partial/post/twikoo.ejs","hash":"1e591e7b71880ca0a1dd9ab9913aa67fdd91633a","modified":1663726643866},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1663726643867},{"_id":"themes/ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1663726643874},{"_id":"themes/ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1663726643873},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1663726643879},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1663726643878},{"_id":"themes/ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1663726643878},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1663726643878},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1663726643879},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1663726643879},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1663726643880},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1663726643880},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1663726643880},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1663726643880},{"_id":"themes/ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1663726643880},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1663726643881},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1663726643881},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1663726643882},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1663726643882},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1663726643882},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1663726643883},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1663726643883},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1663726643883},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1663726643884},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1663726643882},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1663726643884},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1663726643884},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1663726643884},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1663726643885},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1663726643885},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1663726643885},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1663726643901},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1663726643918},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1663726643921},{"_id":"themes/ayer/source/css/fonts/remixicon.css","hash":"8b54eed3270fae6d5bde5b0a6b522a32b5bd39a0","modified":1663726643889},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1663726643897},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1663726643898},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1663726643915},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1663726643872},{"_id":"themes/ayer/source/favicon.ico","hash":"793060414775036e76d5a10ab55e35618ad0c37f","modified":1663728257919},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1663726643891},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1663726643897},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1663726643894},{"_id":"themes/ayer/source/images/bg.png","hash":"2cb5415b917a9ce07ee91645801924659a426352","modified":1663728728131},{"_id":"public/atom.xml","hash":"1dfd4b6ad8dd922734de880363fabef6f9c65655","modified":1663913632346},{"_id":"public/search.xml","hash":"6d0e84a0858f26f27fce7aa59cc5aba3a4effdc8","modified":1663913632346},{"_id":"public/categories/index.html","hash":"c0c3b887629a1a1df39940f8f1534fdfa344b3a6","modified":1663913632346},{"_id":"public/about/index.html","hash":"a9ac56407431d93ca6f797bda5bc91bb87d3f118","modified":1663913632346},{"_id":"public/tags/index.html","hash":"d20bedc2b3c0723994c5a5b556be0fbb80a71279","modified":1663913632346},{"_id":"public/archives/index.html","hash":"c475a269987e770a2b5b068c2130d1bccdc4f887","modified":1663913632346},{"_id":"public/archives/2022/index.html","hash":"9e7624b4621fced8c76a9542fd370f2f26b5afe9","modified":1663913632346},{"_id":"public/archives/2022/09/index.html","hash":"d11994db467a6c5969f4155925f614582cd18d4b","modified":1663913632346},{"_id":"public/categories/Web前端学习/index.html","hash":"2d1d4e980576f8c6d4000a9957a97a350e24006e","modified":1663913632346},{"_id":"public/categories/博客搭建/index.html","hash":"3e9cdd66876a02b19c3fa0c7fcc60f4cadd55c5c","modified":1663913632346},{"_id":"public/tags/TypeScript/index.html","hash":"4c745aebf56b84d25233cff0241322b757610c1b","modified":1663913632346},{"_id":"public/tags/js/index.html","hash":"f099b406c72637cf7fc9fb1bb456fc0eb4c18ba5","modified":1663913632346},{"_id":"public/tags/为什么要搭建博客/index.html","hash":"90e0b554115eef39ce9c3d56e9705d93ceed9abc","modified":1663913632346},{"_id":"public/tags/博客搭建/index.html","hash":"14250a7e3065f6b2c43fbad7e0d4170f24bfa4a6","modified":1663913632346},{"_id":"public/tags/hexo框架/index.html","hash":"e769161b55e0df269226faf3b6dd0dcb6ab3c11d","modified":1663913632346},{"_id":"public/2022/09/22/从零开始搭建博客(二)——hexo主题搭建/index.html","hash":"5f0ce05d79a3c7e64af0d4d059e344b840ea8e87","modified":1663913632346},{"_id":"public/2022/09/22/从零开始搭建博客(一)——本地搭建hexo框架/index.html","hash":"aacfe4d55785f26bd5a53a5b6b8a11757a5bdfdf","modified":1663913632346},{"_id":"public/2022/09/22/Typescript/index.html","hash":"d08049c0560e941688ed49dea3eb4542167db4c0","modified":1663913632346},{"_id":"public/2022/09/22/hello，博客！/index.html","hash":"e9399e4fc487a4ffa294a9d143287cc50129b9c2","modified":1663913632346},{"_id":"public/index.html","hash":"14f19bcf60ed430e577c86d57441f0bfb9a82422","modified":1663913632346},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1663913632346},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1663913632346},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1663913632346},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1663913632346},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1663913632346},{"_id":"public/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1663913632346},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1663913632346},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1663913632346},{"_id":"public/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1663913632346},{"_id":"public/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1663913632346},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1663913632346},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1663913632346},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1663913632346},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1663913632346},{"_id":"public/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1663913632346},{"_id":"public/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1663913632346},{"_id":"public/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1663913632346},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1663913632346},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1663913632346},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1663913632346},{"_id":"public/css/custom.css","hash":"58950a4f4cd82465f85428ec17b3bc05f8153b56","modified":1663913632346},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1663913632346},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1663913632346},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1663913632346},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1663913632346},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1663913632346},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1663913632346},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1663913632346},{"_id":"public/js/snow2.js","hash":"99bed1233b7f26fdf5de9f28f016a96ade4a19db","modified":1663913632346},{"_id":"public/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1663913632346},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1663913632346},{"_id":"public/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1663913632346},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1663913632346},{"_id":"public/favicon.ico","hash":"793060414775036e76d5a10ab55e35618ad0c37f","modified":1663913632346},{"_id":"public/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1663913632346},{"_id":"public/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1663913632346},{"_id":"public/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1663913632346},{"_id":"public/images/bg.png","hash":"2cb5415b917a9ce07ee91645801924659a426352","modified":1663913632346}],"Category":[{"name":"Web前端学习","_id":"cl8e366ah0004hsveb2pq7l8i"},{"name":"博客搭建","_id":"cl8e366ak000ahsvehj5x54iy"}],"Data":[],"Page":[{"title":"分类","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\nlayout: \"categories\"\n---\n","date":"2022-09-22T02:40:42.138Z","updated":"2022-09-22T02:40:42.138Z","path":"categories/index.html","comments":1,"_id":"cl8e366ab0000hsve9z4s6ijp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2022-09-21T10:59:51.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-09-21 18:59:51\n---\n","updated":"2022-09-21T10:59:51.147Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl8e366af0002hsve2vh1cgp3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2022-09-21T10:59:45.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-09-21 18:59:45\nlayout: \"tags\"\n---\n","updated":"2022-09-22T07:05:08.327Z","path":"tags/index.html","comments":1,"_id":"cl8e366ai0006hsveeafb7urs","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"归档","date":"2022-09-21T10:59:25.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2022-09-21 18:59:25\n---\n","updated":"2022-09-22T09:23:32.762Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cl8e366aj0008hsve2szya3g1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"TS基础","date":"2022-09-22T10:12:00.000Z","_content":"\n### 一、基础类型\n\n1.布尔类型\n\n```\nlet bool: boolean;\nbool = false;\nbool = 123; // Error：不能将类型“number”分配给类型“boolean”。\n```\n\n2.数值类型\n\n```\nlet num：number = 123\n```\n\n3.字符串类型\n\n```\nlet str: string;\nstr = 'bac';\nstr = `数值是${num}`;\n```\n\n4.数组类型\n\n```\nlet arr1: number[];\narr1 = [1, 2, 3];\n\nlet arr2: Array<number>;\narr2 = [1, 2, 3];\n\nlet arr3: (string | number)[];\narr3 = [1, '2', 3];\n```\n\n5.元组类型\n\n```\nlet tuple: [string, number, boolean];\ntuple = ['a', 1, false]; // 必须按照上面的顺序和类型\ntuple = ['a', false, false]; // Error：不能将类型“boolean”分配给类型“number”。\ntuple = ['a', 1, false, 12]; // Error：不能将类型“[string, number, false, number]”分配给类型“[string, number, boolean]”。\n```\n\n6.枚举类型\n\n```\nenum Roles {\n  SUPER_ADMIN, // 0\n  ADMIN, // 1\n  USER // 2\n}\nconsole.log(Roles.SUPER_ADMIN); // 0\nconsole.log(Roles[Roles.SUPER_ADMIN]); // SUPER_ADMIN\n```\n\n7.any类型\n\n```\nlet value: any;\nvalue = 'abc'\nvalue =2\nvalue = [1,2,3]\nlet arr: any[] = [1,'a']\n```\n\n8.void类型\n\n```\nconst consoleText = (text: string): void => { // 不返回内容\n  console.log(text);\n};\nlet v: void;\nv = undefined;\nv = null; // tsconfig的strict需要关掉\n```\n\n9.null和undefined\n\nnull 和 undefined 是其他类型的子类型\n\n10.never类型\n\n表示永远不存在的类型，抛错or死循环，返回值就是 never 类型。\n\n```\nconst errorFunc = (message: string): never => {\n  throw new Error(message);\n};\nconst infiniteFunc = (): never => {\n  while(true) {}\n};\n// let neverVariable: never\nlet neverVariable = (() => {\n  while(true) {}\n})();\n```\n\n11.对象类型\n\n```\nfunction getObject(obj: object): void {\n  console.log(obj);\n}\ngetObject({ name: 'dylan' });\ngetObject(123); // Error：类型“number”的参数不能赋给类型“object”的参数。\n```\n\n12.类型断言\n\n值 as 类型\n\n或 <类型>值\n\n### 二、Symbol\n\nSymbol值是独一无二的\n\n```\nconst s1 = Symbol(); // Symbol()\nconst s2 = Symbol(); // Symbol()\ns1 === s2; // false\n```\n\n目前来说工作上遇到的少\n\n### 三、接口\n\n我们可以使用接口来进行限制，使数据更加清晰直观\n\n```\ninterface NameInfo {\n  firstName?: string;//?代表可选参数，没?不传这个值会报错\n  readonly lastName: string; //只读属性，不能更改NameInfo.lastName的值\n}\nconst getFullName = ({ firstName, lastName }: NameInfo): string => {\n  return `${firstName} ${lastName}`;\n};\ngetFullName({\n  firstName: 'haha',\n  lastName: 'Lv'\n});\n```\n\n多传入参数时使用类型断言或者索引签名\n\n```\ninterface Vegetable {\n  color?: string;\n  type: string;\n}\n\nconst getVegetables = ({ color, type }: Vegetable) => {\n  return `A ${color ? (color + ' ') : ''}${type}`;\n};\ngetVegetables({ type: 'tomato', size: 2 }); // Error：类型“{ type: string; size: number; }”的参数不能赋给类型“Vegetable”的参数。\n```\n\n```\n//类型断言\ngetVegetables({ type: 'tomato', size: 2 } as Vegetable);\n\n//索引签名\ninterface Vegetable {\n  color?: string;\n  type: string;\n  [prop: string]: any; // 索引签名\n}\ngetVegetables({ type: 'tomato', size: 2 });\n```\n\n定义函数结构\n\n```\n// 等同于类型别名：type AddFunc = (num1: number, num2: number) => number;\ninterface AddFunc {\n  (num1: number, num2: number): number\n}\nconst add: AddFunc = (n1, n2) => n1 + n2;\n```\n\n索引类型\n\n```\ninterface RoleDic {\n  [id: number]: string;//id这个索引只能为数值类型\n}  \n```\n\n接口的继承\n\n```\ninterface Vegetables {\n  color: string;\n}\ninterface Tomato extends Vegetables {\n  radius: number;\n}\nconst tomato: Tomato = {\n  radius: 1,\n  color: 'red'\n};\n```\n\n### 四、泛型 T\n\n为什么要用泛型？ 可以在函数调用时自由化传入的值和返回的值\n\n使用范型约束函数类型：与之前不同的地方在于多了 T 这个泛型参数，可以理解为这个函数：传入了 T（某个类型）作为 value 的类型，返回由 T组成的数组\n\n```\n//<T> 表示声明一个表示类型的变量，Value: T 表示声明参数是 T 类型的，后面的 : T 表示返回值也是 T 类型的\nconst getArray = <T>(value: T, times: number = 5): T[] => {\n  return new Array(times).fill(value)\n} //如果使用any[]参数也可以任意传，但是也丢失了类型检测的功能\n\n//第一个T为string，那么value: T也该为string\ngetArray<string>('abc').map(item => item.length); // [3, 3, 3, 3, 3]\n```\n\n使用两个范型变量\n\n```\n// 参数1是T类型，参数2是U类型，返回类型是元组类型 T,U组成的数组\nconst getArray = <T, U>(param1: T, param2: U, times: number): [T, U][] => {\n  return new Array(times).fill([param1, param2]);\n};\n// 也可以明确泛型调用，不明确的话，TS会自动推导泛型类型：getArray<number, string>(1, 'a', 3);\ngetArray(1, 'a', 3); // [[1, 'a'], [1, 'a'], [1, 'a']]\n```\n\n<br/>\n\n### 五、交叉类型\n\n交叉类型就是取多个类型的并集，使用 & 符号定义。\n\n```\nconst mergeFunc = <T, U>(arg1: T, arr2: U): T & U => {\n  let res = {} as T & U; // 使用类型断言来告诉TS这里是（T和U）的交叉类型\n  res = Object.assign(arg1, arr2);\n  return res;\n};\nmergeFunc({ a: 'a' }, { b: 'b' });\n```","source":"_posts/Typescript.md","raw":"---\ntitle: TS基础\ndate: 2022-09-22 18:12\ncategories: Web前端学习\ntag: [TypeScript,js] \n---\n\n### 一、基础类型\n\n1.布尔类型\n\n```\nlet bool: boolean;\nbool = false;\nbool = 123; // Error：不能将类型“number”分配给类型“boolean”。\n```\n\n2.数值类型\n\n```\nlet num：number = 123\n```\n\n3.字符串类型\n\n```\nlet str: string;\nstr = 'bac';\nstr = `数值是${num}`;\n```\n\n4.数组类型\n\n```\nlet arr1: number[];\narr1 = [1, 2, 3];\n\nlet arr2: Array<number>;\narr2 = [1, 2, 3];\n\nlet arr3: (string | number)[];\narr3 = [1, '2', 3];\n```\n\n5.元组类型\n\n```\nlet tuple: [string, number, boolean];\ntuple = ['a', 1, false]; // 必须按照上面的顺序和类型\ntuple = ['a', false, false]; // Error：不能将类型“boolean”分配给类型“number”。\ntuple = ['a', 1, false, 12]; // Error：不能将类型“[string, number, false, number]”分配给类型“[string, number, boolean]”。\n```\n\n6.枚举类型\n\n```\nenum Roles {\n  SUPER_ADMIN, // 0\n  ADMIN, // 1\n  USER // 2\n}\nconsole.log(Roles.SUPER_ADMIN); // 0\nconsole.log(Roles[Roles.SUPER_ADMIN]); // SUPER_ADMIN\n```\n\n7.any类型\n\n```\nlet value: any;\nvalue = 'abc'\nvalue =2\nvalue = [1,2,3]\nlet arr: any[] = [1,'a']\n```\n\n8.void类型\n\n```\nconst consoleText = (text: string): void => { // 不返回内容\n  console.log(text);\n};\nlet v: void;\nv = undefined;\nv = null; // tsconfig的strict需要关掉\n```\n\n9.null和undefined\n\nnull 和 undefined 是其他类型的子类型\n\n10.never类型\n\n表示永远不存在的类型，抛错or死循环，返回值就是 never 类型。\n\n```\nconst errorFunc = (message: string): never => {\n  throw new Error(message);\n};\nconst infiniteFunc = (): never => {\n  while(true) {}\n};\n// let neverVariable: never\nlet neverVariable = (() => {\n  while(true) {}\n})();\n```\n\n11.对象类型\n\n```\nfunction getObject(obj: object): void {\n  console.log(obj);\n}\ngetObject({ name: 'dylan' });\ngetObject(123); // Error：类型“number”的参数不能赋给类型“object”的参数。\n```\n\n12.类型断言\n\n值 as 类型\n\n或 <类型>值\n\n### 二、Symbol\n\nSymbol值是独一无二的\n\n```\nconst s1 = Symbol(); // Symbol()\nconst s2 = Symbol(); // Symbol()\ns1 === s2; // false\n```\n\n目前来说工作上遇到的少\n\n### 三、接口\n\n我们可以使用接口来进行限制，使数据更加清晰直观\n\n```\ninterface NameInfo {\n  firstName?: string;//?代表可选参数，没?不传这个值会报错\n  readonly lastName: string; //只读属性，不能更改NameInfo.lastName的值\n}\nconst getFullName = ({ firstName, lastName }: NameInfo): string => {\n  return `${firstName} ${lastName}`;\n};\ngetFullName({\n  firstName: 'haha',\n  lastName: 'Lv'\n});\n```\n\n多传入参数时使用类型断言或者索引签名\n\n```\ninterface Vegetable {\n  color?: string;\n  type: string;\n}\n\nconst getVegetables = ({ color, type }: Vegetable) => {\n  return `A ${color ? (color + ' ') : ''}${type}`;\n};\ngetVegetables({ type: 'tomato', size: 2 }); // Error：类型“{ type: string; size: number; }”的参数不能赋给类型“Vegetable”的参数。\n```\n\n```\n//类型断言\ngetVegetables({ type: 'tomato', size: 2 } as Vegetable);\n\n//索引签名\ninterface Vegetable {\n  color?: string;\n  type: string;\n  [prop: string]: any; // 索引签名\n}\ngetVegetables({ type: 'tomato', size: 2 });\n```\n\n定义函数结构\n\n```\n// 等同于类型别名：type AddFunc = (num1: number, num2: number) => number;\ninterface AddFunc {\n  (num1: number, num2: number): number\n}\nconst add: AddFunc = (n1, n2) => n1 + n2;\n```\n\n索引类型\n\n```\ninterface RoleDic {\n  [id: number]: string;//id这个索引只能为数值类型\n}  \n```\n\n接口的继承\n\n```\ninterface Vegetables {\n  color: string;\n}\ninterface Tomato extends Vegetables {\n  radius: number;\n}\nconst tomato: Tomato = {\n  radius: 1,\n  color: 'red'\n};\n```\n\n### 四、泛型 T\n\n为什么要用泛型？ 可以在函数调用时自由化传入的值和返回的值\n\n使用范型约束函数类型：与之前不同的地方在于多了 T 这个泛型参数，可以理解为这个函数：传入了 T（某个类型）作为 value 的类型，返回由 T组成的数组\n\n```\n//<T> 表示声明一个表示类型的变量，Value: T 表示声明参数是 T 类型的，后面的 : T 表示返回值也是 T 类型的\nconst getArray = <T>(value: T, times: number = 5): T[] => {\n  return new Array(times).fill(value)\n} //如果使用any[]参数也可以任意传，但是也丢失了类型检测的功能\n\n//第一个T为string，那么value: T也该为string\ngetArray<string>('abc').map(item => item.length); // [3, 3, 3, 3, 3]\n```\n\n使用两个范型变量\n\n```\n// 参数1是T类型，参数2是U类型，返回类型是元组类型 T,U组成的数组\nconst getArray = <T, U>(param1: T, param2: U, times: number): [T, U][] => {\n  return new Array(times).fill([param1, param2]);\n};\n// 也可以明确泛型调用，不明确的话，TS会自动推导泛型类型：getArray<number, string>(1, 'a', 3);\ngetArray(1, 'a', 3); // [[1, 'a'], [1, 'a'], [1, 'a']]\n```\n\n<br/>\n\n### 五、交叉类型\n\n交叉类型就是取多个类型的并集，使用 & 符号定义。\n\n```\nconst mergeFunc = <T, U>(arg1: T, arr2: U): T & U => {\n  let res = {} as T & U; // 使用类型断言来告诉TS这里是（T和U）的交叉类型\n  res = Object.assign(arg1, arr2);\n  return res;\n};\nmergeFunc({ a: 'a' }, { b: 'b' });\n```","slug":"Typescript","published":1,"updated":"2022-09-22T05:51:01.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e366ad0001hsve9qix3bti","content":"<h3 id=\"一、基础类型\"><a href=\"#一、基础类型\" class=\"headerlink\" title=\"一、基础类型\"></a>一、基础类型</h3><p>1.布尔类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let bool: boolean;</span><br><span class=\"line\">bool = false;</span><br><span class=\"line\">bool = 123; // Error：不能将类型“number”分配给类型“boolean”。</span><br></pre></td></tr></table></figure>\n\n<p>2.数值类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num：number = 123</span><br></pre></td></tr></table></figure>\n\n<p>3.字符串类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str: string;</span><br><span class=\"line\">str = &#x27;bac&#x27;;</span><br><span class=\"line\">str = `数值是$&#123;num&#125;`;</span><br></pre></td></tr></table></figure>\n\n<p>4.数组类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1: number[];</span><br><span class=\"line\">arr1 = [1, 2, 3];</span><br><span class=\"line\"></span><br><span class=\"line\">let arr2: Array&lt;number&gt;;</span><br><span class=\"line\">arr2 = [1, 2, 3];</span><br><span class=\"line\"></span><br><span class=\"line\">let arr3: (string | number)[];</span><br><span class=\"line\">arr3 = [1, &#x27;2&#x27;, 3];</span><br></pre></td></tr></table></figure>\n\n<p>5.元组类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let tuple: [string, number, boolean];</span><br><span class=\"line\">tuple = [&#x27;a&#x27;, 1, false]; // 必须按照上面的顺序和类型</span><br><span class=\"line\">tuple = [&#x27;a&#x27;, false, false]; // Error：不能将类型“boolean”分配给类型“number”。</span><br><span class=\"line\">tuple = [&#x27;a&#x27;, 1, false, 12]; // Error：不能将类型“[string, number, false, number]”分配给类型“[string, number, boolean]”。</span><br></pre></td></tr></table></figure>\n\n<p>6.枚举类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Roles &#123;</span><br><span class=\"line\">  SUPER_ADMIN, // 0</span><br><span class=\"line\">  ADMIN, // 1</span><br><span class=\"line\">  USER // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Roles.SUPER_ADMIN); // 0</span><br><span class=\"line\">console.log(Roles[Roles.SUPER_ADMIN]); // SUPER_ADMIN</span><br></pre></td></tr></table></figure>\n\n<p>7.any类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let value: any;</span><br><span class=\"line\">value = &#x27;abc&#x27;</span><br><span class=\"line\">value =2</span><br><span class=\"line\">value = [1,2,3]</span><br><span class=\"line\">let arr: any[] = [1,&#x27;a&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>8.void类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const consoleText = (text: string): void =&gt; &#123; // 不返回内容</span><br><span class=\"line\">  console.log(text);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let v: void;</span><br><span class=\"line\">v = undefined;</span><br><span class=\"line\">v = null; // tsconfig的strict需要关掉</span><br></pre></td></tr></table></figure>\n\n<p>9.null和undefined</p>\n<p>null 和 undefined 是其他类型的子类型</p>\n<p>10.never类型</p>\n<p>表示永远不存在的类型，抛错or死循环，返回值就是 never 类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const errorFunc = (message: string): never =&gt; &#123;</span><br><span class=\"line\">  throw new Error(message);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const infiniteFunc = (): never =&gt; &#123;</span><br><span class=\"line\">  while(true) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// let neverVariable: never</span><br><span class=\"line\">let neverVariable = (() =&gt; &#123;</span><br><span class=\"line\">  while(true) &#123;&#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>11.对象类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getObject(obj: object): void &#123;</span><br><span class=\"line\">  console.log(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getObject(&#123; name: &#x27;dylan&#x27; &#125;);</span><br><span class=\"line\">getObject(123); // Error：类型“number”的参数不能赋给类型“object”的参数。</span><br></pre></td></tr></table></figure>\n\n<p>12.类型断言</p>\n<p>值 as 类型</p>\n<p>或 &lt;类型&gt;值</p>\n<h3 id=\"二、Symbol\"><a href=\"#二、Symbol\" class=\"headerlink\" title=\"二、Symbol\"></a>二、Symbol</h3><p>Symbol值是独一无二的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const s1 = Symbol(); // Symbol()</span><br><span class=\"line\">const s2 = Symbol(); // Symbol()</span><br><span class=\"line\">s1 === s2; // false</span><br></pre></td></tr></table></figure>\n\n<p>目前来说工作上遇到的少</p>\n<h3 id=\"三、接口\"><a href=\"#三、接口\" class=\"headerlink\" title=\"三、接口\"></a>三、接口</h3><p>我们可以使用接口来进行限制，使数据更加清晰直观</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface NameInfo &#123;</span><br><span class=\"line\">  firstName?: string;//?代表可选参数，没?不传这个值会报错</span><br><span class=\"line\">  readonly lastName: string; //只读属性，不能更改NameInfo.lastName的值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const getFullName = (&#123; firstName, lastName &#125;: NameInfo): string =&gt; &#123;</span><br><span class=\"line\">  return `$&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">getFullName(&#123;</span><br><span class=\"line\">  firstName: &#x27;haha&#x27;,</span><br><span class=\"line\">  lastName: &#x27;Lv&#x27;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>多传入参数时使用类型断言或者索引签名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Vegetable &#123;</span><br><span class=\"line\">  color?: string;</span><br><span class=\"line\">  type: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const getVegetables = (&#123; color, type &#125;: Vegetable) =&gt; &#123;</span><br><span class=\"line\">  return `A $&#123;color ? (color + &#x27; &#x27;) : &#x27;&#x27;&#125;$&#123;type&#125;`;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">getVegetables(&#123; type: &#x27;tomato&#x27;, size: 2 &#125;); // Error：类型“&#123; type: string; size: number; &#125;”的参数不能赋给类型“Vegetable”的参数。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//类型断言</span><br><span class=\"line\">getVegetables(&#123; type: &#x27;tomato&#x27;, size: 2 &#125; as Vegetable);</span><br><span class=\"line\"></span><br><span class=\"line\">//索引签名</span><br><span class=\"line\">interface Vegetable &#123;</span><br><span class=\"line\">  color?: string;</span><br><span class=\"line\">  type: string;</span><br><span class=\"line\">  [prop: string]: any; // 索引签名</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getVegetables(&#123; type: &#x27;tomato&#x27;, size: 2 &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>定义函数结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 等同于类型别名：type AddFunc = (num1: number, num2: number) =&gt; number;</span><br><span class=\"line\">interface AddFunc &#123;</span><br><span class=\"line\">  (num1: number, num2: number): number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const add: AddFunc = (n1, n2) =&gt; n1 + n2;</span><br></pre></td></tr></table></figure>\n\n<p>索引类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface RoleDic &#123;</span><br><span class=\"line\">  [id: number]: string;//id这个索引只能为数值类型</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>接口的继承</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Vegetables &#123;</span><br><span class=\"line\">  color: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Tomato extends Vegetables &#123;</span><br><span class=\"line\">  radius: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const tomato: Tomato = &#123;</span><br><span class=\"line\">  radius: 1,</span><br><span class=\"line\">  color: &#x27;red&#x27;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、泛型-T\"><a href=\"#四、泛型-T\" class=\"headerlink\" title=\"四、泛型 T\"></a>四、泛型 T</h3><p>为什么要用泛型？ 可以在函数调用时自由化传入的值和返回的值</p>\n<p>使用范型约束函数类型：与之前不同的地方在于多了 T 这个泛型参数，可以理解为这个函数：传入了 T（某个类型）作为 value 的类型，返回由 T组成的数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//&lt;T&gt; 表示声明一个表示类型的变量，Value: T 表示声明参数是 T 类型的，后面的 : T 表示返回值也是 T 类型的</span><br><span class=\"line\">const getArray = &lt;T&gt;(value: T, times: number = 5): T[] =&gt; &#123;</span><br><span class=\"line\">  return new Array(times).fill(value)</span><br><span class=\"line\">&#125; //如果使用any[]参数也可以任意传，但是也丢失了类型检测的功能</span><br><span class=\"line\"></span><br><span class=\"line\">//第一个T为string，那么value: T也该为string</span><br><span class=\"line\">getArray&lt;string&gt;(&#x27;abc&#x27;).map(item =&gt; item.length); // [3, 3, 3, 3, 3]</span><br></pre></td></tr></table></figure>\n\n<p>使用两个范型变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 参数1是T类型，参数2是U类型，返回类型是元组类型 T,U组成的数组</span><br><span class=\"line\">const getArray = &lt;T, U&gt;(param1: T, param2: U, times: number): [T, U][] =&gt; &#123;</span><br><span class=\"line\">  return new Array(times).fill([param1, param2]);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 也可以明确泛型调用，不明确的话，TS会自动推导泛型类型：getArray&lt;number, string&gt;(1, &#x27;a&#x27;, 3);</span><br><span class=\"line\">getArray(1, &#x27;a&#x27;, 3); // [[1, &#x27;a&#x27;], [1, &#x27;a&#x27;], [1, &#x27;a&#x27;]]</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"五、交叉类型\"><a href=\"#五、交叉类型\" class=\"headerlink\" title=\"五、交叉类型\"></a>五、交叉类型</h3><p>交叉类型就是取多个类型的并集，使用 &amp; 符号定义。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mergeFunc = &lt;T, U&gt;(arg1: T, arr2: U): T &amp; U =&gt; &#123;</span><br><span class=\"line\">  let res = &#123;&#125; as T &amp; U; // 使用类型断言来告诉TS这里是（T和U）的交叉类型</span><br><span class=\"line\">  res = Object.assign(arg1, arr2);</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">mergeFunc(&#123; a: &#x27;a&#x27; &#125;, &#123; b: &#x27;b&#x27; &#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、基础类型\"><a href=\"#一、基础类型\" class=\"headerlink\" title=\"一、基础类型\"></a>一、基础类型</h3><p>1.布尔类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let bool: boolean;</span><br><span class=\"line\">bool = false;</span><br><span class=\"line\">bool = 123; // Error：不能将类型“number”分配给类型“boolean”。</span><br></pre></td></tr></table></figure>\n\n<p>2.数值类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num：number = 123</span><br></pre></td></tr></table></figure>\n\n<p>3.字符串类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str: string;</span><br><span class=\"line\">str = &#x27;bac&#x27;;</span><br><span class=\"line\">str = `数值是$&#123;num&#125;`;</span><br></pre></td></tr></table></figure>\n\n<p>4.数组类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1: number[];</span><br><span class=\"line\">arr1 = [1, 2, 3];</span><br><span class=\"line\"></span><br><span class=\"line\">let arr2: Array&lt;number&gt;;</span><br><span class=\"line\">arr2 = [1, 2, 3];</span><br><span class=\"line\"></span><br><span class=\"line\">let arr3: (string | number)[];</span><br><span class=\"line\">arr3 = [1, &#x27;2&#x27;, 3];</span><br></pre></td></tr></table></figure>\n\n<p>5.元组类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let tuple: [string, number, boolean];</span><br><span class=\"line\">tuple = [&#x27;a&#x27;, 1, false]; // 必须按照上面的顺序和类型</span><br><span class=\"line\">tuple = [&#x27;a&#x27;, false, false]; // Error：不能将类型“boolean”分配给类型“number”。</span><br><span class=\"line\">tuple = [&#x27;a&#x27;, 1, false, 12]; // Error：不能将类型“[string, number, false, number]”分配给类型“[string, number, boolean]”。</span><br></pre></td></tr></table></figure>\n\n<p>6.枚举类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Roles &#123;</span><br><span class=\"line\">  SUPER_ADMIN, // 0</span><br><span class=\"line\">  ADMIN, // 1</span><br><span class=\"line\">  USER // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Roles.SUPER_ADMIN); // 0</span><br><span class=\"line\">console.log(Roles[Roles.SUPER_ADMIN]); // SUPER_ADMIN</span><br></pre></td></tr></table></figure>\n\n<p>7.any类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let value: any;</span><br><span class=\"line\">value = &#x27;abc&#x27;</span><br><span class=\"line\">value =2</span><br><span class=\"line\">value = [1,2,3]</span><br><span class=\"line\">let arr: any[] = [1,&#x27;a&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>8.void类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const consoleText = (text: string): void =&gt; &#123; // 不返回内容</span><br><span class=\"line\">  console.log(text);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let v: void;</span><br><span class=\"line\">v = undefined;</span><br><span class=\"line\">v = null; // tsconfig的strict需要关掉</span><br></pre></td></tr></table></figure>\n\n<p>9.null和undefined</p>\n<p>null 和 undefined 是其他类型的子类型</p>\n<p>10.never类型</p>\n<p>表示永远不存在的类型，抛错or死循环，返回值就是 never 类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const errorFunc = (message: string): never =&gt; &#123;</span><br><span class=\"line\">  throw new Error(message);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const infiniteFunc = (): never =&gt; &#123;</span><br><span class=\"line\">  while(true) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// let neverVariable: never</span><br><span class=\"line\">let neverVariable = (() =&gt; &#123;</span><br><span class=\"line\">  while(true) &#123;&#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>11.对象类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getObject(obj: object): void &#123;</span><br><span class=\"line\">  console.log(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getObject(&#123; name: &#x27;dylan&#x27; &#125;);</span><br><span class=\"line\">getObject(123); // Error：类型“number”的参数不能赋给类型“object”的参数。</span><br></pre></td></tr></table></figure>\n\n<p>12.类型断言</p>\n<p>值 as 类型</p>\n<p>或 &lt;类型&gt;值</p>\n<h3 id=\"二、Symbol\"><a href=\"#二、Symbol\" class=\"headerlink\" title=\"二、Symbol\"></a>二、Symbol</h3><p>Symbol值是独一无二的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const s1 = Symbol(); // Symbol()</span><br><span class=\"line\">const s2 = Symbol(); // Symbol()</span><br><span class=\"line\">s1 === s2; // false</span><br></pre></td></tr></table></figure>\n\n<p>目前来说工作上遇到的少</p>\n<h3 id=\"三、接口\"><a href=\"#三、接口\" class=\"headerlink\" title=\"三、接口\"></a>三、接口</h3><p>我们可以使用接口来进行限制，使数据更加清晰直观</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface NameInfo &#123;</span><br><span class=\"line\">  firstName?: string;//?代表可选参数，没?不传这个值会报错</span><br><span class=\"line\">  readonly lastName: string; //只读属性，不能更改NameInfo.lastName的值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const getFullName = (&#123; firstName, lastName &#125;: NameInfo): string =&gt; &#123;</span><br><span class=\"line\">  return `$&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">getFullName(&#123;</span><br><span class=\"line\">  firstName: &#x27;haha&#x27;,</span><br><span class=\"line\">  lastName: &#x27;Lv&#x27;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>多传入参数时使用类型断言或者索引签名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Vegetable &#123;</span><br><span class=\"line\">  color?: string;</span><br><span class=\"line\">  type: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const getVegetables = (&#123; color, type &#125;: Vegetable) =&gt; &#123;</span><br><span class=\"line\">  return `A $&#123;color ? (color + &#x27; &#x27;) : &#x27;&#x27;&#125;$&#123;type&#125;`;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">getVegetables(&#123; type: &#x27;tomato&#x27;, size: 2 &#125;); // Error：类型“&#123; type: string; size: number; &#125;”的参数不能赋给类型“Vegetable”的参数。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//类型断言</span><br><span class=\"line\">getVegetables(&#123; type: &#x27;tomato&#x27;, size: 2 &#125; as Vegetable);</span><br><span class=\"line\"></span><br><span class=\"line\">//索引签名</span><br><span class=\"line\">interface Vegetable &#123;</span><br><span class=\"line\">  color?: string;</span><br><span class=\"line\">  type: string;</span><br><span class=\"line\">  [prop: string]: any; // 索引签名</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getVegetables(&#123; type: &#x27;tomato&#x27;, size: 2 &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>定义函数结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 等同于类型别名：type AddFunc = (num1: number, num2: number) =&gt; number;</span><br><span class=\"line\">interface AddFunc &#123;</span><br><span class=\"line\">  (num1: number, num2: number): number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const add: AddFunc = (n1, n2) =&gt; n1 + n2;</span><br></pre></td></tr></table></figure>\n\n<p>索引类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface RoleDic &#123;</span><br><span class=\"line\">  [id: number]: string;//id这个索引只能为数值类型</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>接口的继承</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Vegetables &#123;</span><br><span class=\"line\">  color: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Tomato extends Vegetables &#123;</span><br><span class=\"line\">  radius: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const tomato: Tomato = &#123;</span><br><span class=\"line\">  radius: 1,</span><br><span class=\"line\">  color: &#x27;red&#x27;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、泛型-T\"><a href=\"#四、泛型-T\" class=\"headerlink\" title=\"四、泛型 T\"></a>四、泛型 T</h3><p>为什么要用泛型？ 可以在函数调用时自由化传入的值和返回的值</p>\n<p>使用范型约束函数类型：与之前不同的地方在于多了 T 这个泛型参数，可以理解为这个函数：传入了 T（某个类型）作为 value 的类型，返回由 T组成的数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//&lt;T&gt; 表示声明一个表示类型的变量，Value: T 表示声明参数是 T 类型的，后面的 : T 表示返回值也是 T 类型的</span><br><span class=\"line\">const getArray = &lt;T&gt;(value: T, times: number = 5): T[] =&gt; &#123;</span><br><span class=\"line\">  return new Array(times).fill(value)</span><br><span class=\"line\">&#125; //如果使用any[]参数也可以任意传，但是也丢失了类型检测的功能</span><br><span class=\"line\"></span><br><span class=\"line\">//第一个T为string，那么value: T也该为string</span><br><span class=\"line\">getArray&lt;string&gt;(&#x27;abc&#x27;).map(item =&gt; item.length); // [3, 3, 3, 3, 3]</span><br></pre></td></tr></table></figure>\n\n<p>使用两个范型变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 参数1是T类型，参数2是U类型，返回类型是元组类型 T,U组成的数组</span><br><span class=\"line\">const getArray = &lt;T, U&gt;(param1: T, param2: U, times: number): [T, U][] =&gt; &#123;</span><br><span class=\"line\">  return new Array(times).fill([param1, param2]);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 也可以明确泛型调用，不明确的话，TS会自动推导泛型类型：getArray&lt;number, string&gt;(1, &#x27;a&#x27;, 3);</span><br><span class=\"line\">getArray(1, &#x27;a&#x27;, 3); // [[1, &#x27;a&#x27;], [1, &#x27;a&#x27;], [1, &#x27;a&#x27;]]</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"五、交叉类型\"><a href=\"#五、交叉类型\" class=\"headerlink\" title=\"五、交叉类型\"></a>五、交叉类型</h3><p>交叉类型就是取多个类型的并集，使用 &amp; 符号定义。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mergeFunc = &lt;T, U&gt;(arg1: T, arr2: U): T &amp; U =&gt; &#123;</span><br><span class=\"line\">  let res = &#123;&#125; as T &amp; U; // 使用类型断言来告诉TS这里是（T和U）的交叉类型</span><br><span class=\"line\">  res = Object.assign(arg1, arr2);</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">mergeFunc(&#123; a: &#x27;a&#x27; &#125;, &#123; b: &#x27;b&#x27; &#125;);</span><br></pre></td></tr></table></figure>"},{"title":"hello，欢迎来到耀耀切克闹的博客！","date":"2022-09-22T10:12:00.000Z","top":true,"_content":"\n\n\n\n# 一.为什么要搭建博客？\n\n1. 搭建博客就是为了写博客，整理思路，将学习的知识融会贯通，以教为学。\n2. 在这个过程中，你可以认识更多兴趣相投的人。\n3. 事件驱动学习，每周持续的博客更新，查看自己是否学习到新东西！\n4. 对自己也是一种督促，你拥有一个完全属于自己的博客，会驱动自己分享学习！\n\n# 二.搭建博客方式\n\n![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e3d012b007f43c597d5db60b9594379b.png)\n\n## 1.自己开发\n\n这是最原始的博客建站方式了，自己写代码（前台 + 后台管理+数据库等等）、自己将项目发布上线、自己来维护网站，啥都自己来干。这就意味着全栈的工作，你需要理解和学习的地方有好多好多，在这过程中需要耗费大量时间，但对自己的提升是不可估量的，并且代码掌握在自己手里，很安想加什么功能都不会受到限制，很灵活。这里推荐 Github 上的开源项目，可以在此上进行二次开发：\n\nHalo博客，一款现代化的开源博客/CMS系统，值得一试。详细部署可以去  https://docs.halo.run\n\n## 2.站点生成器\n\n博客是一种很典型的网站，所以有大佬将博客的功能（比如文章管理）抽象出来，做成了 站点生成器 ，可以用极少的命令 + 配置文件的方式，自动生成精美的博客网站。本人还是比较菜的，刚毕业，工作了2个月多，前端菜鸡程序员一枚，于是采用了这种方式，也是我极力推荐的一种方式，省时省力，灵活程度虽然比不上完全由自己开发，但适合大多数人的需求。并且，绝大多数的站点生成器都只能生成静态网站，也就是说网站的内容（比如博客文章、文档等）是固定的，不需要从数据库中获取内容，因此有很多优点：\n\n- 省钱：把文件扔 GitHub Pages、Gitee Pages 啥的就能免费部署\n\n- 速度快：省去了数据的动态获取过程，配合 CDN 加载速度飞起\n\n- SEO：静态网站更容易被搜索引擎的蜘蛛抓取，稳定排名\n\n- 易维护：没那么多花里胡哨的功能，比动态网站好维护不少\n\n  这里推荐：\n\n  ![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e6561ed83d781d08d5298519b34a4752.png)\n\n   \n  \n  **当然，好像另外还有一种方式就是建站程序，主流就是 WordPress（推荐）或 Typech，跟着官方文档操作就行，不过俺了解甚少。感兴趣的朋友可以去看看，据说也很方便。**\n  \n  \n\n## 3.建站平台和购买\n\n 简单说吧！就是花钱办事，用金钱换时间。\n\n**建站平台：**套个现成的模板、利用界面拖拖拽拽就能搞出来一个网站，平台还会给你提供域名，一键上线。此外，网站的维护也不用咱自己操心了，全交给别人，我们专注于网站的内容就行，百度搜索应该有一大堆。\n\n**购买**: 极致的体验，没有最好，只有更好，你就是大爷，可以尽情享受氪金带来的快乐！（手动狗头)","source":"_posts/hello，博客！.md","raw":"---\ntitle: hello，欢迎来到耀耀切克闹的博客！\ndate: 2022-09-22 18:12\ncategories: 博客搭建\ntag: [为什么要搭建博客,博客搭建] \ntop: true\n---\n\n\n\n\n# 一.为什么要搭建博客？\n\n1. 搭建博客就是为了写博客，整理思路，将学习的知识融会贯通，以教为学。\n2. 在这个过程中，你可以认识更多兴趣相投的人。\n3. 事件驱动学习，每周持续的博客更新，查看自己是否学习到新东西！\n4. 对自己也是一种督促，你拥有一个完全属于自己的博客，会驱动自己分享学习！\n\n# 二.搭建博客方式\n\n![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e3d012b007f43c597d5db60b9594379b.png)\n\n## 1.自己开发\n\n这是最原始的博客建站方式了，自己写代码（前台 + 后台管理+数据库等等）、自己将项目发布上线、自己来维护网站，啥都自己来干。这就意味着全栈的工作，你需要理解和学习的地方有好多好多，在这过程中需要耗费大量时间，但对自己的提升是不可估量的，并且代码掌握在自己手里，很安想加什么功能都不会受到限制，很灵活。这里推荐 Github 上的开源项目，可以在此上进行二次开发：\n\nHalo博客，一款现代化的开源博客/CMS系统，值得一试。详细部署可以去  https://docs.halo.run\n\n## 2.站点生成器\n\n博客是一种很典型的网站，所以有大佬将博客的功能（比如文章管理）抽象出来，做成了 站点生成器 ，可以用极少的命令 + 配置文件的方式，自动生成精美的博客网站。本人还是比较菜的，刚毕业，工作了2个月多，前端菜鸡程序员一枚，于是采用了这种方式，也是我极力推荐的一种方式，省时省力，灵活程度虽然比不上完全由自己开发，但适合大多数人的需求。并且，绝大多数的站点生成器都只能生成静态网站，也就是说网站的内容（比如博客文章、文档等）是固定的，不需要从数据库中获取内容，因此有很多优点：\n\n- 省钱：把文件扔 GitHub Pages、Gitee Pages 啥的就能免费部署\n\n- 速度快：省去了数据的动态获取过程，配合 CDN 加载速度飞起\n\n- SEO：静态网站更容易被搜索引擎的蜘蛛抓取，稳定排名\n\n- 易维护：没那么多花里胡哨的功能，比动态网站好维护不少\n\n  这里推荐：\n\n  ![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e6561ed83d781d08d5298519b34a4752.png)\n\n   \n  \n  **当然，好像另外还有一种方式就是建站程序，主流就是 WordPress（推荐）或 Typech，跟着官方文档操作就行，不过俺了解甚少。感兴趣的朋友可以去看看，据说也很方便。**\n  \n  \n\n## 3.建站平台和购买\n\n 简单说吧！就是花钱办事，用金钱换时间。\n\n**建站平台：**套个现成的模板、利用界面拖拖拽拽就能搞出来一个网站，平台还会给你提供域名，一键上线。此外，网站的维护也不用咱自己操心了，全交给别人，我们专注于网站的内容就行，百度搜索应该有一大堆。\n\n**购买**: 极致的体验，没有最好，只有更好，你就是大爷，可以尽情享受氪金带来的快乐！（手动狗头)","slug":"hello，博客！","published":1,"updated":"2022-09-23T02:31:01.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e366af0003hsve8n2h49bc","content":"<h1 id=\"一-为什么要搭建博客？\"><a href=\"#一-为什么要搭建博客？\" class=\"headerlink\" title=\"一.为什么要搭建博客？\"></a>一.为什么要搭建博客？</h1><ol>\n<li>搭建博客就是为了写博客，整理思路，将学习的知识融会贯通，以教为学。</li>\n<li>在这个过程中，你可以认识更多兴趣相投的人。</li>\n<li>事件驱动学习，每周持续的博客更新，查看自己是否学习到新东西！</li>\n<li>对自己也是一种督促，你拥有一个完全属于自己的博客，会驱动自己分享学习！</li>\n</ol>\n<h1 id=\"二-搭建博客方式\"><a href=\"#二-搭建博客方式\" class=\"headerlink\" title=\"二.搭建博客方式\"></a>二.搭建博客方式</h1><p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e3d012b007f43c597d5db60b9594379b.png\"></p>\n<h2 id=\"1-自己开发\"><a href=\"#1-自己开发\" class=\"headerlink\" title=\"1.自己开发\"></a>1.自己开发</h2><p>这是最原始的博客建站方式了，自己写代码（前台 + 后台管理+数据库等等）、自己将项目发布上线、自己来维护网站，啥都自己来干。这就意味着全栈的工作，你需要理解和学习的地方有好多好多，在这过程中需要耗费大量时间，但对自己的提升是不可估量的，并且代码掌握在自己手里，很安想加什么功能都不会受到限制，很灵活。这里推荐 Github 上的开源项目，可以在此上进行二次开发：</p>\n<p>Halo博客，一款现代化的开源博客/CMS系统，值得一试。详细部署可以去  <a href=\"https://docs.halo.run/\">https://docs.halo.run</a></p>\n<h2 id=\"2-站点生成器\"><a href=\"#2-站点生成器\" class=\"headerlink\" title=\"2.站点生成器\"></a>2.站点生成器</h2><p>博客是一种很典型的网站，所以有大佬将博客的功能（比如文章管理）抽象出来，做成了 站点生成器 ，可以用极少的命令 + 配置文件的方式，自动生成精美的博客网站。本人还是比较菜的，刚毕业，工作了2个月多，前端菜鸡程序员一枚，于是采用了这种方式，也是我极力推荐的一种方式，省时省力，灵活程度虽然比不上完全由自己开发，但适合大多数人的需求。并且，绝大多数的站点生成器都只能生成静态网站，也就是说网站的内容（比如博客文章、文档等）是固定的，不需要从数据库中获取内容，因此有很多优点：</p>\n<ul>\n<li><p>省钱：把文件扔 GitHub Pages、Gitee Pages 啥的就能免费部署</p>\n</li>\n<li><p>速度快：省去了数据的动态获取过程，配合 CDN 加载速度飞起</p>\n</li>\n<li><p>SEO：静态网站更容易被搜索引擎的蜘蛛抓取，稳定排名</p>\n</li>\n<li><p>易维护：没那么多花里胡哨的功能，比动态网站好维护不少</p>\n<p>这里推荐：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e6561ed83d781d08d5298519b34a4752.png\"></p>\n<p><strong>当然，好像另外还有一种方式就是建站程序，主流就是 WordPress（推荐）或 Typech，跟着官方文档操作就行，不过俺了解甚少。感兴趣的朋友可以去看看，据说也很方便。</strong></p>\n</li>\n</ul>\n<h2 id=\"3-建站平台和购买\"><a href=\"#3-建站平台和购买\" class=\"headerlink\" title=\"3.建站平台和购买\"></a>3.建站平台和购买</h2><p> 简单说吧！就是花钱办事，用金钱换时间。</p>\n<p><strong>建站平台：</strong>套个现成的模板、利用界面拖拖拽拽就能搞出来一个网站，平台还会给你提供域名，一键上线。此外，网站的维护也不用咱自己操心了，全交给别人，我们专注于网站的内容就行，百度搜索应该有一大堆。</p>\n<p><strong>购买</strong>: 极致的体验，没有最好，只有更好，你就是大爷，可以尽情享受氪金带来的快乐！（手动狗头)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-为什么要搭建博客？\"><a href=\"#一-为什么要搭建博客？\" class=\"headerlink\" title=\"一.为什么要搭建博客？\"></a>一.为什么要搭建博客？</h1><ol>\n<li>搭建博客就是为了写博客，整理思路，将学习的知识融会贯通，以教为学。</li>\n<li>在这个过程中，你可以认识更多兴趣相投的人。</li>\n<li>事件驱动学习，每周持续的博客更新，查看自己是否学习到新东西！</li>\n<li>对自己也是一种督促，你拥有一个完全属于自己的博客，会驱动自己分享学习！</li>\n</ol>\n<h1 id=\"二-搭建博客方式\"><a href=\"#二-搭建博客方式\" class=\"headerlink\" title=\"二.搭建博客方式\"></a>二.搭建博客方式</h1><p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e3d012b007f43c597d5db60b9594379b.png\"></p>\n<h2 id=\"1-自己开发\"><a href=\"#1-自己开发\" class=\"headerlink\" title=\"1.自己开发\"></a>1.自己开发</h2><p>这是最原始的博客建站方式了，自己写代码（前台 + 后台管理+数据库等等）、自己将项目发布上线、自己来维护网站，啥都自己来干。这就意味着全栈的工作，你需要理解和学习的地方有好多好多，在这过程中需要耗费大量时间，但对自己的提升是不可估量的，并且代码掌握在自己手里，很安想加什么功能都不会受到限制，很灵活。这里推荐 Github 上的开源项目，可以在此上进行二次开发：</p>\n<p>Halo博客，一款现代化的开源博客/CMS系统，值得一试。详细部署可以去  <a href=\"https://docs.halo.run/\">https://docs.halo.run</a></p>\n<h2 id=\"2-站点生成器\"><a href=\"#2-站点生成器\" class=\"headerlink\" title=\"2.站点生成器\"></a>2.站点生成器</h2><p>博客是一种很典型的网站，所以有大佬将博客的功能（比如文章管理）抽象出来，做成了 站点生成器 ，可以用极少的命令 + 配置文件的方式，自动生成精美的博客网站。本人还是比较菜的，刚毕业，工作了2个月多，前端菜鸡程序员一枚，于是采用了这种方式，也是我极力推荐的一种方式，省时省力，灵活程度虽然比不上完全由自己开发，但适合大多数人的需求。并且，绝大多数的站点生成器都只能生成静态网站，也就是说网站的内容（比如博客文章、文档等）是固定的，不需要从数据库中获取内容，因此有很多优点：</p>\n<ul>\n<li><p>省钱：把文件扔 GitHub Pages、Gitee Pages 啥的就能免费部署</p>\n</li>\n<li><p>速度快：省去了数据的动态获取过程，配合 CDN 加载速度飞起</p>\n</li>\n<li><p>SEO：静态网站更容易被搜索引擎的蜘蛛抓取，稳定排名</p>\n</li>\n<li><p>易维护：没那么多花里胡哨的功能，比动态网站好维护不少</p>\n<p>这里推荐：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/e6561ed83d781d08d5298519b34a4752.png\"></p>\n<p><strong>当然，好像另外还有一种方式就是建站程序，主流就是 WordPress（推荐）或 Typech，跟着官方文档操作就行，不过俺了解甚少。感兴趣的朋友可以去看看，据说也很方便。</strong></p>\n</li>\n</ul>\n<h2 id=\"3-建站平台和购买\"><a href=\"#3-建站平台和购买\" class=\"headerlink\" title=\"3.建站平台和购买\"></a>3.建站平台和购买</h2><p> 简单说吧！就是花钱办事，用金钱换时间。</p>\n<p><strong>建站平台：</strong>套个现成的模板、利用界面拖拖拽拽就能搞出来一个网站，平台还会给你提供域名，一键上线。此外，网站的维护也不用咱自己操心了，全交给别人，我们专注于网站的内容就行，百度搜索应该有一大堆。</p>\n<p><strong>购买</strong>: 极致的体验，没有最好，只有更好，你就是大爷，可以尽情享受氪金带来的快乐！（手动狗头)</p>\n"},{"title":"从零开始搭建博客(一)——本地搭建hexo框架","date":"2022-09-22T11:00:00.000Z","_content":"\n# 一、hexo框架\n\n## 1.什么是 Hexo？\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 2.安装前提\n\n安装 Hexo 相当简单，只需要先安装下列应用程序即可：\n\n- [Node.js](http://nodejs.org/) (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)\n- [Git](http://git-scm.com/)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 [安装 Hexo](https://hexo.io/zh-cn/docs/#安装-Hexo) 步骤。\n\n如果您的电脑中尚未安装所需要的程序，请自行百度按指示完成安装。\n\n## 3.安装 Hexo\n\n### （1）本地安装 hexo\n\n首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。取名 MyBlog。\n\n使用VS code 打开该文件夹，右键打开终端\n\n```\n# 安装 hexo 框架\nnpm install -g hexo-cli\n# 初始化文件夹\nhexo init\n# 安装 hexo 依赖包\nnpm install\n```\n\n命令很好理解，第一行安装 hexo 模块，`-g`表示安装全局模块；第二行是 hexo 初始化，会用 `git clone`命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。\n\n### （2）可能遇到的问题\n\n- **`npm install -g hexo-cli`命令执行卡住，或者报错连接不上**\n\n可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是`https://registry.npmjs.org/`。\n\n```\n# 查看 npm 源\nnpm config get registry\n# 临时修改 npm 源安装 hexo (仅本条命令有效)\nnpm --registry=https://registry.npm.taobao.org install -g hexo-cli\n# 或者永久修改 npm 源\nnpm config set registry https://registry.npm.taobao.org\n```\n\n如果是公司内网使用代理访问外网 (比如`ping registry.npmjs.org` `ping registry.npm.taobao.org`都不通)，可以尝试给 npm 配置代理解决，再重新执行安装命令。\n\n```\n# 设置代理\nnpm config set proxy http://serverip:port\nnpm confit set https-proxy http:/serverip:port\n# 设置带用户名密码的代理\nnpm config set proxy http://username:password@serverip:port\nnpm confit set https-proxy http://username:password@serverip:port\n# 取消代理\nnpm config delete proxy\nnpm config delete https-proxy\n```\n\n- **`hexo init`命令执行卡住，或者报错连接不上**\n\n同上设置代理\n\n## 4.运行本地博客\n\n前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。\n\n在vs code 的终端中运行命令\n\n```\n# 生成静态网站\nhexo g\n# 启动服务器\nhexo s\n```\n\n点击运行成功后的出来的地址\n\n自此一个简单的本地博客诞生了\n\n","source":"_posts/从零开始搭建博客(一)——本地搭建hexo框架.md","raw":"---\ntitle: 从零开始搭建博客(一)——本地搭建hexo框架\ndate: 2022-09-22 19:00\ncategories: 博客搭建\ntag: [hexo框架,博客搭建] \n---\n\n# 一、hexo框架\n\n## 1.什么是 Hexo？\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 2.安装前提\n\n安装 Hexo 相当简单，只需要先安装下列应用程序即可：\n\n- [Node.js](http://nodejs.org/) (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)\n- [Git](http://git-scm.com/)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 [安装 Hexo](https://hexo.io/zh-cn/docs/#安装-Hexo) 步骤。\n\n如果您的电脑中尚未安装所需要的程序，请自行百度按指示完成安装。\n\n## 3.安装 Hexo\n\n### （1）本地安装 hexo\n\n首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。取名 MyBlog。\n\n使用VS code 打开该文件夹，右键打开终端\n\n```\n# 安装 hexo 框架\nnpm install -g hexo-cli\n# 初始化文件夹\nhexo init\n# 安装 hexo 依赖包\nnpm install\n```\n\n命令很好理解，第一行安装 hexo 模块，`-g`表示安装全局模块；第二行是 hexo 初始化，会用 `git clone`命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。\n\n### （2）可能遇到的问题\n\n- **`npm install -g hexo-cli`命令执行卡住，或者报错连接不上**\n\n可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是`https://registry.npmjs.org/`。\n\n```\n# 查看 npm 源\nnpm config get registry\n# 临时修改 npm 源安装 hexo (仅本条命令有效)\nnpm --registry=https://registry.npm.taobao.org install -g hexo-cli\n# 或者永久修改 npm 源\nnpm config set registry https://registry.npm.taobao.org\n```\n\n如果是公司内网使用代理访问外网 (比如`ping registry.npmjs.org` `ping registry.npm.taobao.org`都不通)，可以尝试给 npm 配置代理解决，再重新执行安装命令。\n\n```\n# 设置代理\nnpm config set proxy http://serverip:port\nnpm confit set https-proxy http:/serverip:port\n# 设置带用户名密码的代理\nnpm config set proxy http://username:password@serverip:port\nnpm confit set https-proxy http://username:password@serverip:port\n# 取消代理\nnpm config delete proxy\nnpm config delete https-proxy\n```\n\n- **`hexo init`命令执行卡住，或者报错连接不上**\n\n同上设置代理\n\n## 4.运行本地博客\n\n前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。\n\n在vs code 的终端中运行命令\n\n```\n# 生成静态网站\nhexo g\n# 启动服务器\nhexo s\n```\n\n点击运行成功后的出来的地址\n\n自此一个简单的本地博客诞生了\n\n","slug":"从零开始搭建博客(一)——本地搭建hexo框架","published":1,"updated":"2022-09-22T10:38:55.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e366ai0007hsve0hmi9ova","content":"<h1 id=\"一、hexo框架\"><a href=\"#一、hexo框架\" class=\"headerlink\" title=\"一、hexo框架\"></a>一、hexo框架</h1><h2 id=\"1-什么是-Hexo？\"><a href=\"#1-什么是-Hexo？\" class=\"headerlink\" title=\"1.什么是 Hexo？\"></a>1.什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h2 id=\"2-安装前提\"><a href=\"#2-安装前提\" class=\"headerlink\" title=\"2.安装前提\"></a>2.安装前提</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>\n<ul>\n<li><a href=\"http://nodejs.org/\">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>\n<li><a href=\"http://git-scm.com/\">Git</a></li>\n</ul>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href=\"https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo\">安装 Hexo</a> 步骤。</p>\n<p>如果您的电脑中尚未安装所需要的程序，请自行百度按指示完成安装。</p>\n<h2 id=\"3-安装-Hexo\"><a href=\"#3-安装-Hexo\" class=\"headerlink\" title=\"3.安装 Hexo\"></a>3.安装 Hexo</h2><h3 id=\"（1）本地安装-hexo\"><a href=\"#（1）本地安装-hexo\" class=\"headerlink\" title=\"（1）本地安装 hexo\"></a>（1）本地安装 hexo</h3><p>首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。取名 MyBlog。</p>\n<p>使用VS code 打开该文件夹，右键打开终端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 hexo 框架</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"># 初始化文件夹</span><br><span class=\"line\">hexo init</span><br><span class=\"line\"># 安装 hexo 依赖包</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>命令很好理解，第一行安装 hexo 模块，<code>-g</code>表示安装全局模块；第二行是 hexo 初始化，会用 <code>git clone</code>命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。</p>\n<h3 id=\"（2）可能遇到的问题\"><a href=\"#（2）可能遇到的问题\" class=\"headerlink\" title=\"（2）可能遇到的问题\"></a>（2）可能遇到的问题</h3><ul>\n<li><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></li>\n</ul>\n<p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是<code>https://registry.npmjs.org/</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看 npm 源</span><br><span class=\"line\">npm config get registry</span><br><span class=\"line\"># 临时修改 npm 源安装 hexo (仅本条命令有效)</span><br><span class=\"line\">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class=\"line\"># 或者永久修改 npm 源</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>如果是公司内网使用代理访问外网 (比如<code>ping registry.npmjs.org</code> <code>ping registry.npm.taobao.org</code>都不通)，可以尝试给 npm 配置代理解决，再重新执行安装命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置代理</span><br><span class=\"line\">npm config set proxy http://serverip:port</span><br><span class=\"line\">npm confit set https-proxy http:/serverip:port</span><br><span class=\"line\"># 设置带用户名密码的代理</span><br><span class=\"line\">npm config set proxy http://username:password@serverip:port</span><br><span class=\"line\">npm confit set https-proxy http://username:password@serverip:port</span><br><span class=\"line\"># 取消代理</span><br><span class=\"line\">npm config delete proxy</span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>hexo init</code>命令执行卡住，或者报错连接不上</strong></li>\n</ul>\n<p>同上设置代理</p>\n<h2 id=\"4-运行本地博客\"><a href=\"#4-运行本地博客\" class=\"headerlink\" title=\"4.运行本地博客\"></a>4.运行本地博客</h2><p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。</p>\n<p>在vs code 的终端中运行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成静态网站</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"># 启动服务器</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>点击运行成功后的出来的地址</p>\n<p>自此一个简单的本地博客诞生了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、hexo框架\"><a href=\"#一、hexo框架\" class=\"headerlink\" title=\"一、hexo框架\"></a>一、hexo框架</h1><h2 id=\"1-什么是-Hexo？\"><a href=\"#1-什么是-Hexo？\" class=\"headerlink\" title=\"1.什么是 Hexo？\"></a>1.什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h2 id=\"2-安装前提\"><a href=\"#2-安装前提\" class=\"headerlink\" title=\"2.安装前提\"></a>2.安装前提</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>\n<ul>\n<li><a href=\"http://nodejs.org/\">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>\n<li><a href=\"http://git-scm.com/\">Git</a></li>\n</ul>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href=\"https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo\">安装 Hexo</a> 步骤。</p>\n<p>如果您的电脑中尚未安装所需要的程序，请自行百度按指示完成安装。</p>\n<h2 id=\"3-安装-Hexo\"><a href=\"#3-安装-Hexo\" class=\"headerlink\" title=\"3.安装 Hexo\"></a>3.安装 Hexo</h2><h3 id=\"（1）本地安装-hexo\"><a href=\"#（1）本地安装-hexo\" class=\"headerlink\" title=\"（1）本地安装 hexo\"></a>（1）本地安装 hexo</h3><p>首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。取名 MyBlog。</p>\n<p>使用VS code 打开该文件夹，右键打开终端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 hexo 框架</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"># 初始化文件夹</span><br><span class=\"line\">hexo init</span><br><span class=\"line\"># 安装 hexo 依赖包</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>命令很好理解，第一行安装 hexo 模块，<code>-g</code>表示安装全局模块；第二行是 hexo 初始化，会用 <code>git clone</code>命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。</p>\n<h3 id=\"（2）可能遇到的问题\"><a href=\"#（2）可能遇到的问题\" class=\"headerlink\" title=\"（2）可能遇到的问题\"></a>（2）可能遇到的问题</h3><ul>\n<li><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></li>\n</ul>\n<p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是<code>https://registry.npmjs.org/</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看 npm 源</span><br><span class=\"line\">npm config get registry</span><br><span class=\"line\"># 临时修改 npm 源安装 hexo (仅本条命令有效)</span><br><span class=\"line\">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class=\"line\"># 或者永久修改 npm 源</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>如果是公司内网使用代理访问外网 (比如<code>ping registry.npmjs.org</code> <code>ping registry.npm.taobao.org</code>都不通)，可以尝试给 npm 配置代理解决，再重新执行安装命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置代理</span><br><span class=\"line\">npm config set proxy http://serverip:port</span><br><span class=\"line\">npm confit set https-proxy http:/serverip:port</span><br><span class=\"line\"># 设置带用户名密码的代理</span><br><span class=\"line\">npm config set proxy http://username:password@serverip:port</span><br><span class=\"line\">npm confit set https-proxy http://username:password@serverip:port</span><br><span class=\"line\"># 取消代理</span><br><span class=\"line\">npm config delete proxy</span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>hexo init</code>命令执行卡住，或者报错连接不上</strong></li>\n</ul>\n<p>同上设置代理</p>\n<h2 id=\"4-运行本地博客\"><a href=\"#4-运行本地博客\" class=\"headerlink\" title=\"4.运行本地博客\"></a>4.运行本地博客</h2><p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。</p>\n<p>在vs code 的终端中运行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成静态网站</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"># 启动服务器</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>点击运行成功后的出来的地址</p>\n<p>自此一个简单的本地博客诞生了</p>\n"},{"title":"从零开始搭建博客(二)——hexo主题搭建","date":"2022-09-22T12:00:00.000Z","_content":"\n# 一、更换 Hexo 博客主题\n\n## 1. 如何找主题\n\n默认主题非常简洁，适合大佬使用，像我等菜鸟，自己不会做却又想使用花里胡哨的主题，就要学会找主题了。\n\n下面是我寻找主题的三个方法。\n\n- **官方网站**\n\n  Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。\n\n  在 Hexo 官网点击“主题”，或者直接进入 Hexo 主题页：[themes](https://hexo.io/themes/)\n\n  通过上方的搜索框可以根据标签搜索。\n\n## 2.github开源Hexo 博客主题\n\n大多数流行的主题都在 GitHub 托管开源了，我们可以直接去 GitHub 下载。\n\n在 Github 官网搜索`hexo-theme`，选择`All GitHub`，或者直接进入搜索页：[search?q=hexo-theme](https://github.com/search?q=hexo-theme)\n\n市面上使用比较多的主题：\n\n- **Next**\n\nDemo 示例：[NexT](https://theme-next.js.org/) | [Dandy](https://dandyxu.me/) | [Raincal](https://raincal.com/)\n\nGitHub 主页：[hexo-theme-next](https://github.com/iissnan/hexo-theme-next)\n\n这个是 Hexo 最流行的主题，GitHub 上 15.5k stars，在 Hexo 主题中排行第一。\n\n- **matery**\n\nDemo 示例：[闪烁之狐](http://blinkfox.com/)\n\nGitHub 主页：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)\n\n- **butterfly**\n\nDemo 示例： [Butterfly](https://butterfly.js.org/) | [JerryC](https://jerryc.me/)\n\nGitHub 主页：[hexo-theme-butterfly](https://github.com/jerryc127/hexo-theme-butterfly)\n\n\n\n本菜鸟使用的主题就是以简约为主：\n\n- **ayer**\n\nDemo 示例：[岛](https://shen-yu.gitee.io/)\n\nGitHub 主页：[hexo-theme-ayer](https://github.com/blinkfox/hexo-theme-matery)\n\n## 3.更换主题\n\n以 **ayer** 主题为例。\n\n在 vs code中 Mylog根目录下，右键，执行下面命令：\n\n```\nnpm i hexo-theme-ayer -S\n#如果hexo < 5.0\n# 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git\ngit clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer\n```\n\n我在使用 **ayer** 找到了这样一位大佬，后面的操作就是跟着这位大佬的搭建博客进行的了：[杰克小麻雀](https://blog.csdn.net/yushuaigee?type=blog )\n\n该博主的文章对我后面的搭建有巨大帮助，各位过去看看吧！后面估计很多内容可能会照着大佬来，如有雷同，纯属抄袭（手动狗头）\n\n# 二.本地写博客\n\n**利用Markdown语法的软件写博客，本地试运行：**\n\n这里推荐使用Typora或uTools的Markdown笔记功能，具体怎么使用这两款软件， 官方都有说明。其中Typora现在开始收费了，但可以去下载老版本，老版本是免费的，具体操作可以按：\n\n[Typora免费版](http://www.itmind.net/16468.html )\n\n根据这个网址上面来操作，下载老版本的Typora，但具体还能用多久就不知道了，有钱的小伙伴可以直接去官网下载正版，本人老穷b了。\n\n![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/11DDC475.jpg)\n\n把写好的文章复制到根目录下的source=>_posts\n\n![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184421310.png)\n\n\n\n![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184517354.png)\n","source":"_posts/从零开始搭建博客(二)——hexo主题搭建.md","raw":"---\ntitle: 从零开始搭建博客(二)——hexo主题搭建\ndate: 2022-09-22 20:00\ncategories: 博客搭建\ntag: [hexo框架,博客搭建] \n---\n\n# 一、更换 Hexo 博客主题\n\n## 1. 如何找主题\n\n默认主题非常简洁，适合大佬使用，像我等菜鸟，自己不会做却又想使用花里胡哨的主题，就要学会找主题了。\n\n下面是我寻找主题的三个方法。\n\n- **官方网站**\n\n  Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。\n\n  在 Hexo 官网点击“主题”，或者直接进入 Hexo 主题页：[themes](https://hexo.io/themes/)\n\n  通过上方的搜索框可以根据标签搜索。\n\n## 2.github开源Hexo 博客主题\n\n大多数流行的主题都在 GitHub 托管开源了，我们可以直接去 GitHub 下载。\n\n在 Github 官网搜索`hexo-theme`，选择`All GitHub`，或者直接进入搜索页：[search?q=hexo-theme](https://github.com/search?q=hexo-theme)\n\n市面上使用比较多的主题：\n\n- **Next**\n\nDemo 示例：[NexT](https://theme-next.js.org/) | [Dandy](https://dandyxu.me/) | [Raincal](https://raincal.com/)\n\nGitHub 主页：[hexo-theme-next](https://github.com/iissnan/hexo-theme-next)\n\n这个是 Hexo 最流行的主题，GitHub 上 15.5k stars，在 Hexo 主题中排行第一。\n\n- **matery**\n\nDemo 示例：[闪烁之狐](http://blinkfox.com/)\n\nGitHub 主页：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)\n\n- **butterfly**\n\nDemo 示例： [Butterfly](https://butterfly.js.org/) | [JerryC](https://jerryc.me/)\n\nGitHub 主页：[hexo-theme-butterfly](https://github.com/jerryc127/hexo-theme-butterfly)\n\n\n\n本菜鸟使用的主题就是以简约为主：\n\n- **ayer**\n\nDemo 示例：[岛](https://shen-yu.gitee.io/)\n\nGitHub 主页：[hexo-theme-ayer](https://github.com/blinkfox/hexo-theme-matery)\n\n## 3.更换主题\n\n以 **ayer** 主题为例。\n\n在 vs code中 Mylog根目录下，右键，执行下面命令：\n\n```\nnpm i hexo-theme-ayer -S\n#如果hexo < 5.0\n# 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git\ngit clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer\n```\n\n我在使用 **ayer** 找到了这样一位大佬，后面的操作就是跟着这位大佬的搭建博客进行的了：[杰克小麻雀](https://blog.csdn.net/yushuaigee?type=blog )\n\n该博主的文章对我后面的搭建有巨大帮助，各位过去看看吧！后面估计很多内容可能会照着大佬来，如有雷同，纯属抄袭（手动狗头）\n\n# 二.本地写博客\n\n**利用Markdown语法的软件写博客，本地试运行：**\n\n这里推荐使用Typora或uTools的Markdown笔记功能，具体怎么使用这两款软件， 官方都有说明。其中Typora现在开始收费了，但可以去下载老版本，老版本是免费的，具体操作可以按：\n\n[Typora免费版](http://www.itmind.net/16468.html )\n\n根据这个网址上面来操作，下载老版本的Typora，但具体还能用多久就不知道了，有钱的小伙伴可以直接去官网下载正版，本人老穷b了。\n\n![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/11DDC475.jpg)\n\n把写好的文章复制到根目录下的source=>_posts\n\n![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184421310.png)\n\n\n\n![](https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184517354.png)\n","slug":"从零开始搭建博客(二)——hexo主题搭建","published":1,"updated":"2022-09-23T06:05:30.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8e366aj0009hsve2nmrglkw","content":"<h1 id=\"一、更换-Hexo-博客主题\"><a href=\"#一、更换-Hexo-博客主题\" class=\"headerlink\" title=\"一、更换 Hexo 博客主题\"></a>一、更换 Hexo 博客主题</h1><h2 id=\"1-如何找主题\"><a href=\"#1-如何找主题\" class=\"headerlink\" title=\"1. 如何找主题\"></a>1. 如何找主题</h2><p>默认主题非常简洁，适合大佬使用，像我等菜鸟，自己不会做却又想使用花里胡哨的主题，就要学会找主题了。</p>\n<p>下面是我寻找主题的三个方法。</p>\n<ul>\n<li><p><strong>官方网站</strong></p>\n<p>Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。</p>\n<p>在 Hexo 官网点击“主题”，或者直接进入 Hexo 主题页：<a href=\"https://hexo.io/themes/\">themes</a></p>\n<p>通过上方的搜索框可以根据标签搜索。</p>\n</li>\n</ul>\n<h2 id=\"2-github开源Hexo-博客主题\"><a href=\"#2-github开源Hexo-博客主题\" class=\"headerlink\" title=\"2.github开源Hexo 博客主题\"></a>2.github开源Hexo 博客主题</h2><p>大多数流行的主题都在 GitHub 托管开源了，我们可以直接去 GitHub 下载。</p>\n<p>在 Github 官网搜索<code>hexo-theme</code>，选择<code>All GitHub</code>，或者直接进入搜索页：<a href=\"https://github.com/search?q=hexo-theme\">search?q=hexo-theme</a></p>\n<p>市面上使用比较多的主题：</p>\n<ul>\n<li><strong>Next</strong></li>\n</ul>\n<p>Demo 示例：<a href=\"https://theme-next.js.org/\">NexT</a> | <a href=\"https://dandyxu.me/\">Dandy</a> | <a href=\"https://raincal.com/\">Raincal</a></p>\n<p>GitHub 主页：<a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a></p>\n<p>这个是 Hexo 最流行的主题，GitHub 上 15.5k stars，在 Hexo 主题中排行第一。</p>\n<ul>\n<li><strong>matery</strong></li>\n</ul>\n<p>Demo 示例：<a href=\"http://blinkfox.com/\">闪烁之狐</a></p>\n<p>GitHub 主页：<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-matery</a></p>\n<ul>\n<li><strong>butterfly</strong></li>\n</ul>\n<p>Demo 示例： <a href=\"https://butterfly.js.org/\">Butterfly</a> | <a href=\"https://jerryc.me/\">JerryC</a></p>\n<p>GitHub 主页：<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">hexo-theme-butterfly</a></p>\n<p>本菜鸟使用的主题就是以简约为主：</p>\n<ul>\n<li><strong>ayer</strong></li>\n</ul>\n<p>Demo 示例：<a href=\"https://shen-yu.gitee.io/\">岛</a></p>\n<p>GitHub 主页：<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-ayer</a></p>\n<h2 id=\"3-更换主题\"><a href=\"#3-更换主题\" class=\"headerlink\" title=\"3.更换主题\"></a>3.更换主题</h2><p>以 <strong>ayer</strong> 主题为例。</p>\n<p>在 vs code中 Mylog根目录下，右键，执行下面命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-theme-ayer -S</span><br><span class=\"line\">#如果hexo &lt; 5.0</span><br><span class=\"line\"># 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git</span><br><span class=\"line\">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>\n\n<p>我在使用 <strong>ayer</strong> 找到了这样一位大佬，后面的操作就是跟着这位大佬的搭建博客进行的了：<a href=\"https://blog.csdn.net/yushuaigee?type=blog\">杰克小麻雀</a></p>\n<p>该博主的文章对我后面的搭建有巨大帮助，各位过去看看吧！后面估计很多内容可能会照着大佬来，如有雷同，纯属抄袭（手动狗头）</p>\n<h1 id=\"二-本地写博客\"><a href=\"#二-本地写博客\" class=\"headerlink\" title=\"二.本地写博客\"></a>二.本地写博客</h1><p><strong>利用Markdown语法的软件写博客，本地试运行：</strong></p>\n<p>这里推荐使用Typora或uTools的Markdown笔记功能，具体怎么使用这两款软件， 官方都有说明。其中Typora现在开始收费了，但可以去下载老版本，老版本是免费的，具体操作可以按：</p>\n<p><a href=\"http://www.itmind.net/16468.html\">Typora免费版</a></p>\n<p>根据这个网址上面来操作，下载老版本的Typora，但具体还能用多久就不知道了，有钱的小伙伴可以直接去官网下载正版，本人老穷b了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/11DDC475.jpg\"></p>\n<p>把写好的文章复制到根目录下的source=&gt;_posts</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184421310.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184517354.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、更换-Hexo-博客主题\"><a href=\"#一、更换-Hexo-博客主题\" class=\"headerlink\" title=\"一、更换 Hexo 博客主题\"></a>一、更换 Hexo 博客主题</h1><h2 id=\"1-如何找主题\"><a href=\"#1-如何找主题\" class=\"headerlink\" title=\"1. 如何找主题\"></a>1. 如何找主题</h2><p>默认主题非常简洁，适合大佬使用，像我等菜鸟，自己不会做却又想使用花里胡哨的主题，就要学会找主题了。</p>\n<p>下面是我寻找主题的三个方法。</p>\n<ul>\n<li><p><strong>官方网站</strong></p>\n<p>Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。</p>\n<p>在 Hexo 官网点击“主题”，或者直接进入 Hexo 主题页：<a href=\"https://hexo.io/themes/\">themes</a></p>\n<p>通过上方的搜索框可以根据标签搜索。</p>\n</li>\n</ul>\n<h2 id=\"2-github开源Hexo-博客主题\"><a href=\"#2-github开源Hexo-博客主题\" class=\"headerlink\" title=\"2.github开源Hexo 博客主题\"></a>2.github开源Hexo 博客主题</h2><p>大多数流行的主题都在 GitHub 托管开源了，我们可以直接去 GitHub 下载。</p>\n<p>在 Github 官网搜索<code>hexo-theme</code>，选择<code>All GitHub</code>，或者直接进入搜索页：<a href=\"https://github.com/search?q=hexo-theme\">search?q=hexo-theme</a></p>\n<p>市面上使用比较多的主题：</p>\n<ul>\n<li><strong>Next</strong></li>\n</ul>\n<p>Demo 示例：<a href=\"https://theme-next.js.org/\">NexT</a> | <a href=\"https://dandyxu.me/\">Dandy</a> | <a href=\"https://raincal.com/\">Raincal</a></p>\n<p>GitHub 主页：<a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a></p>\n<p>这个是 Hexo 最流行的主题，GitHub 上 15.5k stars，在 Hexo 主题中排行第一。</p>\n<ul>\n<li><strong>matery</strong></li>\n</ul>\n<p>Demo 示例：<a href=\"http://blinkfox.com/\">闪烁之狐</a></p>\n<p>GitHub 主页：<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-matery</a></p>\n<ul>\n<li><strong>butterfly</strong></li>\n</ul>\n<p>Demo 示例： <a href=\"https://butterfly.js.org/\">Butterfly</a> | <a href=\"https://jerryc.me/\">JerryC</a></p>\n<p>GitHub 主页：<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">hexo-theme-butterfly</a></p>\n<p>本菜鸟使用的主题就是以简约为主：</p>\n<ul>\n<li><strong>ayer</strong></li>\n</ul>\n<p>Demo 示例：<a href=\"https://shen-yu.gitee.io/\">岛</a></p>\n<p>GitHub 主页：<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-ayer</a></p>\n<h2 id=\"3-更换主题\"><a href=\"#3-更换主题\" class=\"headerlink\" title=\"3.更换主题\"></a>3.更换主题</h2><p>以 <strong>ayer</strong> 主题为例。</p>\n<p>在 vs code中 Mylog根目录下，右键，执行下面命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-theme-ayer -S</span><br><span class=\"line\">#如果hexo &lt; 5.0</span><br><span class=\"line\"># 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git</span><br><span class=\"line\">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>\n\n<p>我在使用 <strong>ayer</strong> 找到了这样一位大佬，后面的操作就是跟着这位大佬的搭建博客进行的了：<a href=\"https://blog.csdn.net/yushuaigee?type=blog\">杰克小麻雀</a></p>\n<p>该博主的文章对我后面的搭建有巨大帮助，各位过去看看吧！后面估计很多内容可能会照着大佬来，如有雷同，纯属抄袭（手动狗头）</p>\n<h1 id=\"二-本地写博客\"><a href=\"#二-本地写博客\" class=\"headerlink\" title=\"二.本地写博客\"></a>二.本地写博客</h1><p><strong>利用Markdown语法的软件写博客，本地试运行：</strong></p>\n<p>这里推荐使用Typora或uTools的Markdown笔记功能，具体怎么使用这两款软件， 官方都有说明。其中Typora现在开始收费了，但可以去下载老版本，老版本是免费的，具体操作可以按：</p>\n<p><a href=\"http://www.itmind.net/16468.html\">Typora免费版</a></p>\n<p>根据这个网址上面来操作，下载老版本的Typora，但具体还能用多久就不知道了，有钱的小伙伴可以直接去官网下载正版，本人老穷b了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/11DDC475.jpg\"></p>\n<p>把写好的文章复制到根目录下的source=&gt;_posts</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184421310.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/DarknessZY/myblog@master/img/image-20220922184517354.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl8e366ad0001hsve9qix3bti","category_id":"cl8e366ah0004hsveb2pq7l8i","_id":"cl8e366al000chsvedo4m1vs9"},{"post_id":"cl8e366af0003hsve8n2h49bc","category_id":"cl8e366ak000ahsvehj5x54iy","_id":"cl8e366am000ihsve8tn52phg"},{"post_id":"cl8e366ai0007hsve0hmi9ova","category_id":"cl8e366ak000ahsvehj5x54iy","_id":"cl8e366an000khsvefv875r9v"},{"post_id":"cl8e366aj0009hsve2nmrglkw","category_id":"cl8e366ak000ahsvehj5x54iy","_id":"cl8e366ao000nhsveg2eih4fn"}],"PostTag":[{"post_id":"cl8e366ad0001hsve9qix3bti","tag_id":"cl8e366ah0005hsvecrh3aqm2","_id":"cl8e366am000fhsve2k397b2v"},{"post_id":"cl8e366ad0001hsve9qix3bti","tag_id":"cl8e366ak000bhsve1q5087f6","_id":"cl8e366am000ghsvebmoq7tr7"},{"post_id":"cl8e366af0003hsve8n2h49bc","tag_id":"cl8e366al000ehsvefp42cjd3","_id":"cl8e366ao000mhsve4x5x0llh"},{"post_id":"cl8e366af0003hsve8n2h49bc","tag_id":"cl8e366an000jhsveg1817jv6","_id":"cl8e366ao000ohsvecobd5mtj"},{"post_id":"cl8e366ai0007hsve0hmi9ova","tag_id":"cl8e366an000lhsve5ccb23in","_id":"cl8e366ap000rhsve95xeckwy"},{"post_id":"cl8e366ai0007hsve0hmi9ova","tag_id":"cl8e366an000jhsveg1817jv6","_id":"cl8e366ap000shsve3oy0cbmx"},{"post_id":"cl8e366aj0009hsve2nmrglkw","tag_id":"cl8e366an000lhsve5ccb23in","_id":"cl8e366ap000uhsve3mylhcbg"},{"post_id":"cl8e366aj0009hsve2nmrglkw","tag_id":"cl8e366an000jhsveg1817jv6","_id":"cl8e366ap000vhsve8atkfs1c"}],"Tag":[{"name":"TypeScript","_id":"cl8e366ah0005hsvecrh3aqm2"},{"name":"js","_id":"cl8e366ak000bhsve1q5087f6"},{"name":"为什么要搭建博客","_id":"cl8e366al000ehsvefp42cjd3"},{"name":"博客搭建","_id":"cl8e366an000jhsveg1817jv6"},{"name":"hexo框架","_id":"cl8e366an000lhsve5ccb23in"}]}}